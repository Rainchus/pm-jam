#export .scrApi_Done2 2
#export .scrApi_Done1 1
#export .scrApi_Block 0

#export .boostAttack 0
#export .boostDef 1

#export .ORFlags 0
#export .NOTFlags 1
#export .SetFlags 2

#export .collisionInActiveFlag 00010000

#export:Function $isBadgeEquipped {
    .Init
    LIO t2, 8010F498
    ADDIU t3, t2, 78 %end of list
    .loop
    LH t1, 0 (t2)
    BEQL a0, t1, .end
    ADDIU v0, r0, 1 %return true
    BNE t2, t3, .loop
    ADDIU t2, t2, 2
    ADDIU v0, r0, 0 %return false
    .end
    JR RA
    NOP
}

#export:Function $upgradeStarlow {
     LI t0, 8010F2AC %goombario partner struct
     LBU t1, 0001 (t0) %load upgrade
     ORI t2, r0, 2
     BEQ t1, t2, .skipUpgrade
     NOP
     ADDIU t1, t1, 1
     SB t1, 0001 (t0) %store +1 ugprade
     .skipUpgrade
     JR RA
     ORI v0, r0, 2
}

#export:Function $Scr_API_ClearStatCustom { %actorIndex(or actorSelf), boost type(0 for atk, 1 for def)
     PUSH s0, ra
     LW s0, 000C (a0) %load script arg ptr
     LW t0, 0000 (s0) %load first arg from script (actor ID)
     ADDIU t1, r0, FF81 %actor self ID
     BEQL t0, t1, .isSelf
     LW t0, 0148 (a0) %load actor id from self
     .isSelf
     ANDI t0, t0, FDFF %remove ORed 0x200 from actor ID (specifes this is an enemy)
     LI t1, 800DC150
     SLL t2, t0, 2 %multiply by 4
     ADDU t2, t2, t1
     LW t3, 0000 (t2) %load current actor ptr by ID
     
     LW t0, 0004 (a0) %load arg 2
     BEQ t0, r0, .resetDef
     NOP
     BEQ r0, r0, .end
     SB r0, 0221 (t3) %reset atk increase

     .resetDef
     SB r0, 0222 (t3) %reset def increase

     .end
     POP s0, ra
     JR RA
     ORI v0, r0, 2
}

#new:Data $ringBufferCurrentIndex {
     0b
}

#new:Data $fpsRingBuffer { %30 u64s
     0 0  0 0  0 0  0 0  0 0
     0 0  0 0  0 0  0 0  0 0
     0 0  0 0  0 0  0 0  0 0
     0 0  0 0  0 0  0 0  0 0
     0 0  0 0  0 0  0 0  0 0
     0 0  0 0  0 0  0 0  0 0
}

#new:Data $thirtyAsDouble {
     41F00000 00000000
}

#new:Data $someFloat {
     4EA7A358
}

@Hook:Global 800E92B8 {
     JAL $clearfpsSprintfBuffer
     NOP
     JAL $getFPSAverage
     NOP
     MFC1 a0, f0
     JAL $printFPS
     NOP
     LW ra, 008C (sp)
     LW ra, 008C (sp)
     LW s7, 0084 (sp)
     LW s6, 0080 (sp)
     LW s5, 007C (sp)
     LW s4, 0078 (sp)
     J 800E92C0
     NOP
}

#new:Function $clearfpsSprintfBuffer {
     DADDU t1, r0, r0
     LI t0, $fpsSprintfBuffer
     .loop
     SW r0, 0000 (t0)
     ADDIU t0, t0, 4
     ADDIU t1, t1, 1
     SLTI t2, t1, 7`
     BNE t2, r0, .loop
     NOP
     JR RA
     NOP
}

#new:Data $fpsSprintfBuffer {
     0 0 0 0 0 0 0
}

#new:Data $fpsStringBuffer {
     0 0 0 0 0 0 0
}

#new:ASCII $formatString {
     "%2.2f"
}

#new:Function $fpsAsciiToStringFormat { %ptr to ascii string on a0
     BEQ a0, r0, .nullString
     NOP
     LI t1, $fpsStringBuffer
     ORI t2, r0, 00FD
     .loop
     LB t0, 0000 (a0)
     BEQ t0, r0, .end
     NOP
     ADDIU t0, t0, -20
     SB t0, 0000 (t1)
     ADDIU t1, t1, 1
     BEQ r0, r0, .loop
     ADDIU a0, a0, 1
     .end
     SB t2, 0000 (t1) %terminate string
     .nullString
     JR RA
     NOP
}

#new:Function $printFPS { %takes fps on a0
     PUSH[20] ra
     %format string

     MTC1 a0, f0
     cvt.d.s f1, f0
     MFC1 a2, f1
     MFC1 a3, f0

     LI a0, $fpsSprintfBuffer
     LI a1, $formatString
     JAL ~Func:sprintf
     NOP
     LI a0, $fpsSprintfBuffer
     JAL $fpsAsciiToStringFormat
     NOP

     %draw string
     LI a0, $fpsStringBuffer
     ORI a1, r0, 0104 %x pos
     ORI a2, r0, 00CC %y pos
     ORI a3, r0, 00FF %opacity
     SW r0, 0010 (sp)
     SW r0, 0014 (sp)
     JAL ~Func:draw_string
     SW r0, 0018 (sp)


     JPOP[20] ra

}

#export:Function $getFPSAverage { %returns as float
     ADDIU SP, SP, -18
     SW RA, 0014 (SP)
     JAL ~Func:osGetCount
     NOP            
     LI a2, $ringBufferCurrentIndex
     LBU V1, 0000 (A2)
     ADDIU A0, V1, 0001
     LI a1, $fpsRingBuffer
     SLL V1, V1, 3
     ANDI A0, A0, 00FF
     ADDU V1, V1, A1
     SLTIU A3, A0, 30` %ring buffer total entries
     LW A1, 0004 (V1)
     SW R0, 0000 (V1)
     BEQ A3, r0 .label2
     SW V0, 0004 (V1)
     SB A0, 0000 (A2)
     .label1
     SUBU V0, V0, A1
     MTC1 V0, F0
     BGE V0, r0, .label0
     CVT.D.W F0, F0
     LI v0, $thirtyAsDouble
     LDC1 F2, 0 (V0)
     ADD.D F0, F0, F2
     .label0
     LI v0, $someFloat
     LW RA, 0014 (SP)
     LWC1 F2, 0000 (V0)
     CVT.S.D F0, F0
     DIV.S F0, F2, F0
     JR RA
     ADDIU SP, SP, 18
     .label2
     B .label1
     SB R0, 0000 (A2)
}

#export:Function $Scr_API_BoostStatCustom { %actorIndex(or actorSelf), boost type(0 for atk, 1 for def), amountToBoostBy
     PUSH s0, s1, ra

     LW s0, 000C (a0) %load script arg ptr

     LW t0, 0000 (s0) %load first arg from script (actor ID)
     ADDIU t1, r0, FF81 %actor self ID
     BEQL t0, t1, .isSelf
     LW t0, 0148 (a0) %load actor id from self
     .isSelf
     ANDI t0, t0, FDFF %remove ORed 0x200 from actor ID (specifes this is an enemy)

     LI t1, 800DC150
     SLL t2, t0, 2 %multiply by 4
     ADDU t2, t2, t1
     LW s1, 0000 (t2) %load current actor ptr by ID

     LW t0, 0004 (s0) %load 2nd arg from script
     BEQ t0, r0, .atkBoost
     LW t1, 0008 (s0) %load 3rd arg from script (boost amount)
     
     %else, is def boost
     LB t2, 0222 (s1) %load def boost amount
     ADDU t2, t2, t1
     BEQ r0, r0, .end
     SB t2, 0222 (s1) %store new def amount

     .atkBoost
     LB t2, 0221 (s1) %load atk boost amount
     ADDU t2, t2, t1
     BEQ r0, r0, .end
     SB t2, 0221 (s1) %store new atk amount

     .end
     POP s0, s1, ra
     JR RA
     ORI v0, r0, .scrApi_Done2
}

#export:Function $FunctionTexturePanning1 {
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  SW        RA, 14 (SP)
   10:  LW        V1, A8 (S0)
   14:  LW        V0, 88 (S0)
   18:  ADDU      V1, V1, V0
   1C:  BGEZ      V1, .o30
   20:  SW        V1, A8 (S0)
   24:  LUI       V0, 2
   28:  BEQ       R0, R0, .o40
   2C:  ADDU      V0, V1, V0
        .o30
   30:  LUI       A0, 2
   34:  SLT       V0, A0, V1
   38:  BEQ       V0, R0, .o44
   3C:  SUBU      V0, V1, A0
        .o40
   40:  SW        V0, A8 (S0)
        .o44
   44:  LW        V1, AC (S0)
   48:  LW        V0, 8C (S0)
   4C:  ADDU      V1, V1, V0
   50:  BGEZ      V1, .o64
   54:  SW        V1, AC (S0)
   58:  LUI       V0, 2
   5C:  BEQ       R0, R0, .o74
   60:  ADDU      V0, V1, V0
        .o64
   64:  LUI       A0, 2
   68:  SLT       V0, A0, V1
   6C:  BEQ       V0, R0, .o78
   70:  SUBU      V0, V1, A0
        .o74
   74:  SW        V0, AC (S0)
        .o78
   78:  LW        V1, B0 (S0)
   7C:  LW        V0, 90 (S0)
   80:  ADDU      V1, V1, V0
   84:  BGEZ      V1, .o98
   88:  SW        V1, B0 (S0)
   8C:  LUI       V0, 2
   90:  BEQ       R0, R0, .oA8
   94:  ADDU      V0, V1, V0
        .o98
   98:  LUI       A0, 2
   9C:  SLT       V0, A0, V1
   A0:  BEQ       V0, R0, .oAC
   A4:  SUBU      V0, V1, A0
        .oA8
   A8:  SW        V0, B0 (S0)
        .oAC
   AC:  LW        V1, B4 (S0)
   B0:  LW        V0, 94 (S0)
   B4:  ADDU      V1, V1, V0
   B8:  BGEZ      V1, .oCC
   BC:  SW        V1, B4 (S0)
   C0:  LUI       V0, 2
   C4:  BEQ       R0, R0, .oDC
   C8:  ADDU      V0, V1, V0
        .oCC
   CC:  LUI       A0, 2
   D0:  SLT       V0, A0, V1
   D4:  BEQ       V0, R0, .oE0
   D8:  SUBU      V0, V1, A0
        .oDC
   DC:  SW        V0, B4 (S0)
        .oE0
   E0:  LW        A0, 84 (S0)
   E4:  JAL       ~Func:set_main_pan_u
   E8:  LW        A1, A8 (S0)
   EC:  LW        A0, 84 (S0)
   F0:  JAL       ~Func:set_main_pan_v
   F4:  LW        A1, AC (S0)
   F8:  LW        A0, 84 (S0)
   FC:  JAL       ~Func:set_aux_pan_u
  100:  LW        A1, B0 (S0)
  104:  LW        A0, 84 (S0)
  108:  JAL       ~Func:set_aux_pan_v
  10C:  LW        A1, B4 (S0)
  110:  LW        RA, 14 (SP)
  114:  LW        S0, 10 (SP)
  118:  CLEAR     V0
  11C:  JR        RA
  120:  ADDIU     SP, SP, 18
}

#export:Function $FunctionTexturePanning2 {
    0:  ADDIU     SP, SP, FFE8
    4:  SW        S0, 10 (SP)
    8:  COPY      S0, A0
    C:  BEQ       A1, R0, .o24
   10:  SW        RA, 14 (SP)
   14:  SW        R0, 70 (S0)
   18:  SW        R0, 74 (S0)
   1C:  SW        R0, 78 (S0)
   20:  SW        R0, 7C (S0)
        .o24
   24:  LW        V0, 70 (S0)
   28:  BNE       V0, R0, .o64
   2C:  NOP
   30:  LW        V1, A8 (S0)
   34:  LW        V0, 88 (S0)
   38:  ADDU      V1, V1, V0
   3C:  BGEZ      V1, .o50
   40:  SW        V1, A8 (S0)
   44:  LUI       V0, 2
   48:  BEQ       R0, R0, .o60
   4C:  ADDU      V0, V1, V0
        .o50
   50:  LUI       A0, 2
   54:  SLT       V0, A0, V1
   58:  BEQ       V0, R0, .o64
   5C:  SUBU      V0, V1, A0
        .o60
   60:  SW        V0, A8 (S0)
        .o64
   64:  LW        V0, 74 (S0)
   68:  BNE       V0, R0, .oA4
   6C:  NOP
   70:  LW        V1, AC (S0)
   74:  LW        V0, 8C (S0)
   78:  ADDU      V1, V1, V0
   7C:  BGEZ      V1, .o90
   80:  SW        V1, AC (S0)
   84:  LUI       V0, 2
   88:  BEQ       R0, R0, .oA0
   8C:  ADDU      V0, V1, V0
        .o90
   90:  LUI       A0, 2
   94:  SLT       V0, A0, V1
   98:  BEQ       V0, R0, .oA4
   9C:  SUBU      V0, V1, A0
        .oA0
   A0:  SW        V0, AC (S0)
        .oA4
   A4:  LW        V0, 78 (S0)
   A8:  BNE       V0, R0, .oE4
   AC:  NOP
   B0:  LW        V1, B0 (S0)
   B4:  LW        V0, 90 (S0)
   B8:  ADDU      V1, V1, V0
   BC:  BGEZ      V1, .oD0
   C0:  SW        V1, B0 (S0)
   C4:  LUI       V0, 2
   C8:  BEQ       R0, R0, .oE0
   CC:  ADDU      V0, V1, V0
        .oD0
   D0:  LUI       A0, 2
   D4:  SLT       V0, A0, V1
   D8:  BEQ       V0, R0, .oE4
   DC:  SUBU      V0, V1, A0
        .oE0
   E0:  SW        V0, B0 (S0)
        .oE4
   E4:  LW        V0, 7C (S0)
   E8:  BNE       V0, R0, .o124
   EC:  NOP
   F0:  LW        V1, B4 (S0)
   F4:  LW        V0, 94 (S0)
   F8:  ADDU      V1, V1, V0
   FC:  BGEZ      V1, .o110
  100:  SW        V1, B4 (S0)
  104:  LUI       V0, 2
  108:  BEQ       R0, R0, .o120
  10C:  ADDU      V0, V1, V0
        .o110
  110:  LUI       A0, 2
  114:  SLT       V0, A0, V1
  118:  BEQ       V0, R0, .o124
  11C:  SUBU      V0, V1, A0
        .o120
  120:  SW        V0, B4 (S0)
        .o124
  124:  LW        A0, 84 (S0)
  128:  JAL       ~Func:set_main_pan_u
  12C:  LW        A1, A8 (S0)
  130:  LW        A0, 84 (S0)
  134:  JAL       ~Func:set_main_pan_v
  138:  LW        A1, AC (S0)
  13C:  LW        A0, 84 (S0)
  140:  JAL       ~Func:set_aux_pan_u
  144:  LW        A1, B0 (S0)
  148:  LW        A0, 84 (S0)
  14C:  JAL       ~Func:set_aux_pan_v
  150:  LW        A1, B4 (S0)
  154:  LW        V0, 70 (S0)
  158:  LW        V1, 78 (S0)
  15C:  LW        A0, 98 (S0)
  160:  ADDIU     V0, V0, 1
  164:  SW        V0, 70 (S0)
  168:  LW        V0, 74 (S0)
  16C:  ADDIU     V1, V1, 1
  170:  SW        V1, 78 (S0)
  174:  LW        V1, 70 (S0)
  178:  ADDIU     V0, V0, 1
  17C:  SW        V0, 74 (S0)
  180:  LW        V0, 7C (S0)
  184:  SLT       V1, V1, A0
  188:  ADDIU     V0, V0, 1
  18C:  BNE       V1, R0, .o198
  190:  SW        V0, 7C (S0)
  194:  SW        R0, 70 (S0)
        .o198
  198:  LW        V0, 74 (S0)
  19C:  LW        V1, 9C (S0)
  1A0:  SLT       V0, V0, V1
  1A4:  BEQL      V0, R0, .o1AC
  1A8:  SW        R0, 74 (S0)
        .o1AC
  1AC:  LW        V0, 78 (S0)
  1B0:  LW        V1, A0 (S0)
  1B4:  SLT       V0, V0, V1
  1B8:  BEQL      V0, R0, .o1C0
  1BC:  SW        R0, 78 (S0)
        .o1C0
  1C0:  LW        V0, 7C (S0)
  1C4:  LW        V1, A4 (S0)
  1C8:  SLT       V0, V0, V1
  1CC:  BEQL      V0, R0, .o1D4
  1D0:  SW        R0, 7C (S0)
        .o1D4
  1D4:  LW        RA, 14 (SP)
  1D8:  LW        S0, 10 (SP)
  1DC:  CLEAR     V0
  1E0:  JR        RA
  1E4:  ADDIU     SP, SP, 18
}

#export:Script $Script_Update_Texture_Panner {
    0:  SetGroup  00000000
    C:  If  *Var5  ==  00000001
   1C:  	If  *Var6  ==  00000001
   2C:  		If  *Var7  ==  00000001
   3C:  			If  *Var8  ==  00000001
   4C:  				Call  $FunctionTexturePanning1 ( )
   58:  				Return
   60:  			EndIf
   68:  		EndIf
   70:  	EndIf
   78:  EndIf
   80:  Call  $FunctionTexturePanning2 ( )
   8C:  Return
   94:  End
}

#export:Function:Battle $SetNewCursorPositionForProtoBatter {
    PUSH s0, s1, ra

    ADDU s0, a0, r0
    LW s1, 000C (a0) %load pointer to script args

    %assuming this will never be a Var[X]
    LW a0, 0000 (s1) %load arg0
    ADDIU a1, r0, FF81 %actor self ID
    BEQ a0, a1, .actorSelf
    NOP
    .actorSelf

    POP s0, s1, ra
    JR RA
    ORI v0, r0, 2
}

#export:Function $DrawMenuBox {
    ADDIU        SP, SP, -58
    SW        RA, 50 (SP)
    % setup call to DrawBox
    SW        R0, 10 (SP)    % posZ
    SW        A2, 14 (SP)    % width
    SW        A3, 18 (SP) % height
    SW        T1, 1C (SP) % opacity
    COPY      A2, A0 % posX
    COPY      A3, A1 % posY
    COPY      A1, T0 % flags
    CLEAR     A0 % flags
    SW        R0, 20 (SP) % fogRGB
    SW        R0, 24 (SP) % scaleX (unused)
    SW        R0, 28 (SP) % scaleY (unused)
    SW        R0, 2C (SP) % rotX (unused)
    SW        R0, 30 (SP) % rotY (unused)
    SW        R0, 34 (SP) % rotZ (unused)
    SW        R0, 38 (SP) % unk func
    SW        R0, 3C (SP) % unk func arg0
    SW        R0, 40 (SP) % txMtx (unused)
    SW        R0, 44 (SP) % txShiftY (unused)
    SW        R0, 48 (SP) % txShiftX (unused)
    JAL       800F52E0 %draw_box
    SW        R0, 4C (SP) % unk
    LW        RA, 50 (SP)
    JR        RA
    ADDIU        SP, SP, 58
}


#export:Function $ScrApi_XORVar { %arg0 = Var to XOR, arg1 = value to XOR with
    PUSH s0, s1, s2, ra
    ADDU s0, a0, r0 %move script pointer to s0
    LW s1, 000C (s0) %load ptr to script args

    JAL ~Func:get_variable
    LW a1, 0000 (s1) %load script args

    ADDU s2, v0, r0 %returned value of Var

    ADDU a0, s0, r0 %copy script ptr back to a0
    JAL ~Func:get_variable
    LW a1, 0004 (s1) %load script arg1

    XOR a2, s2, v0 %arg0 ^ arg1
    
    ADDU a0, s0, r0 %copy script ptr back to a0
    JAL ~Func:set_variable
    LW a1, 0000 (s1) %load variable constant

    POP s0, s1, s2, ra
    JR RA
    ORI v0, r0, .scrApi_Done2
}

#export:Function $ScrApi_Set2DBool {
    PUSH ra

    LW a1, 000C (a0) %load script ptr to args
    JAL ~Func:get_variable
    LW a1, 0000 (a1) %get variable
    SAW v0, $YAxisBool

    POP ra
    JR RA
    ORI v0, r0, .scrApi_Done2
}