% Script File: 04 Area HOS.bscr
% Decoded from: 47F0B0 to 48D1A0 (04 Area HOS)

#new:Function $Function_80218000
{
    0:  LI        V0, 1
    4:  SAB       V0, 8010F2A2
    C:  JR        RA
   10:  LI        V0, 2
}

PADDING: 80218014 to 80218020 (0047F0C4 to 0047F0D0)
00000000 00000000 00000000

#new:Function $Function_80218020
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S2, 20 (SP)
    8:  COPY      S2, A0
    C:  SW        RA, 24 (SP)
   10:  SW        S1, 1C (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        A0, 148 (S2)
   1C:  JAL       ~Func:get_actor
   20:  COPY      S0, A1
   24:  BEQ       S0, R0, .oDC
   28:  COPY      S1, V0
   2C:  LWC1      F2, 18 (S1)
   30:  LWC1      F0, 144 (S1)
   34:  SUB.S     F2, F2, F0
   38:  MUL.S     F2, F2, F2
   3C:  NOP
   40:  LWC1      F6, 1C (S1)
   44:  LWC1      F0, 148 (S1)
   48:  SUB.S     F6, F6, F0
   4C:  MUL.S     F6, F6, F6
   50:  NOP
   54:  LWC1      F4, 14C (S1)
   58:  LWC1      F0, 20 (S1)
   5C:  SUB.S     F0, F0, F4
   60:  MUL.S     F0, F0, F0
   64:  NOP
   68:  ADD.S     F2, F2, F6
   6C:  ADD.S     F12, F2, F0
   70:  SQRT.S    F4, F12
   74:  C.EQ.S    F4, F4
   78:  NOP
   7C:  BC1T      .o90
   80:  NOP
   84:  JAL       ~Func:sqrtf
   88:  NOP
   8C:  MOV.S     F4, F0
        .o90
   90:  LWC1      F0, 4C (S1)
   94:  LIF       F2, 0.5
   9C:  DIV.S     F0, F4, F0
   A0:  MUL.S     F0, F0, F2
   A4:  NOP
   A8:  LIF       F2, 1.0
   B0:  NOP
   B4:  ADD.S     F0, F0, F2
   B8:  TRUNC.W.S F8, F0
   BC:  SWC1      F8, 70 (S2)
   C0:  LWC1      F0, 14C (S1)
   C4:  LI        A0, 359
   C8:  SWC1      F0, 10 (SP)
   CC:  LW        A2, 144 (S1)
   D0:  LW        A3, 148 (S1)
   D4:  JAL       ~Func:sfx_play_sound_at_position
   D8:  CLEAR     A1
        .oDC
   DC:  LW        V0, 70 (S2)
   E0:  COPY      V1, V0
   E4:  ADDIU     V0, V0, FFFF
   E8:  BGTZ      V1, .o114
   EC:  SW        V0, 70 (S2)
   F0:  LWC1      F0, 14C (S1)
   F4:  LI        A0, 759
   F8:  SWC1      F0, 10 (SP)
   FC:  LW        A2, 144 (S1)
  100:  LW        A3, 148 (S1)
  104:  JAL       ~Func:sfx_play_sound_at_position
  108:  CLEAR     A1
  10C:  BEQ       R0, R0, .o118
  110:  LI        V0, 2
        .o114
  114:  CLEAR     V0
        .o118
  118:  LW        RA, 24 (SP)
  11C:  LW        S2, 20 (SP)
  120:  LW        S1, 1C (SP)
  124:  LW        S0, 18 (SP)
  128:  JR        RA
  12C:  ADDIU     SP, SP, 28
}

% Origin: HINT
#new:Function $Function_80218150
{
    0:  ADDIU     SP, SP, FFA0
    4:  SW        S1, 24 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 28 (SP)
   10:  SW        S0, 20 (SP)
   14:  SDC1      F30, 58 (SP)
   18:  SDC1      F28, 50 (SP)
   1C:  SDC1      F26, 48 (SP)
   20:  SDC1      F24, 40 (SP)
   24:  SDC1      F22, 38 (SP)
   28:  SDC1      F20, 30 (SP)
   2C:  LW        S0, C (S1)
   30:  LW        A1, 0 (S0)
   34:  JAL       ~Func:get_float_variable
   38:  ADDIU     S0, S0, 4
   3C:  LW        A1, 0 (S0)
   40:  ADDIU     S0, S0, 4
   44:  COPY      A0, S1
   48:  JAL       ~Func:get_float_variable
   4C:  MOV.S     F30, F0
   50:  LW        A1, 0 (S0)
   54:  ADDIU     S0, S0, 4
   58:  COPY      A0, S1
   5C:  JAL       ~Func:get_float_variable
   60:  MOV.S     F20, F0
   64:  LW        A1, 0 (S0)
   68:  ADDIU     S0, S0, 4
   6C:  COPY      A0, S1
   70:  JAL       ~Func:get_float_variable
   74:  MOV.S     F28, F0
   78:  LW        A1, 0 (S0)
   7C:  ADDIU     S0, S0, 4
   80:  COPY      A0, S1
   84:  JAL       ~Func:get_float_variable
   88:  MOV.S     F26, F0
   8C:  LW        A1, 0 (S0)
   90:  ADDIU     S0, S0, 4
   94:  COPY      A0, S1
   98:  JAL       ~Func:get_float_variable
   9C:  MOV.S     F24, F0
   A0:  COPY      A0, S1
   A4:  LW        A1, 0 (S0)
   A8:  JAL       ~Func:get_variable
   AC:  MOV.S     F22, F0
   B0:  LW        A0, 148 (S1)
   B4:  JAL       ~Func:get_actor
   B8:  COPY      S0, V0
   BC:  CVT.D.S   F20, F20
   C0:  MFC1      A1, F30
   C4:  LIF       F1, 2.3125
   CC:  MTC1      R0, F0
   D0:  MFC1      A3, F28
   D4:  ADD.D     F20, F20, F0
   D8:  CLEAR     A0
   DC:  SW        S0, 1C (SP)
   E0:  CVT.S.D   F20, F20
   E4:  MFC1      A2, F20
   E8:  COPY      S0, V0
   EC:  SWC1      F26, 10 (SP)
   F0:  SWC1      F24, 14 (SP)
   F4:  JAL       ~Func:playFX_12
   F8:  SWC1      F22, 18 (SP)
   FC:  COPY      A0, V0
  100:  LB        V1, 210 (S0)
  104:  LI        V0, A
  108:  BNE       V1, V0, .o128
  10C:  NOP
  110:  LW        V0, C (A0)
  114:  LIF       F0, 0.39804688
  120:  NOP
  124:  SWC1      F0, 28 (V0)
        .o128
  128:  LW        RA, 28 (SP)
  12C:  LW        S1, 24 (SP)
  130:  LW        S0, 20 (SP)
  134:  LDC1      F30, 58 (SP)
  138:  LDC1      F28, 50 (SP)
  13C:  LDC1      F26, 48 (SP)
  140:  LDC1      F24, 40 (SP)
  144:  LDC1      F22, 38 (SP)
  148:  LDC1      F20, 30 (SP)
  14C:  LI        V0, 2
  150:  JR        RA
  154:  ADDIU     SP, SP, 60
}

#new:Function $Function_802182A8
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  LW        V0, C (A0)
    C:  LAH       A2, 800DC1EC
   14:  JAL       ~Func:set_variable
   18:  LW        A1, 0 (V0)
   1C:  LW        RA, 10 (SP)
   20:  LI        V0, 2
   24:  JR        RA
   28:  ADDIU     SP, SP, 18
}

#new:Function $Function_802182D4
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 20 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S0, 10 (SP)
   1C:  LW        S0, C (S1)
   20:  LW        A1, 0 (S0)
   24:  JAL       ~Func:get_variable
   28:  ADDIU     S0, S0, 4
   2C:  LW        A1, 0 (S0)
   30:  ADDIU     S0, S0, 4
   34:  COPY      A0, S1
   38:  JAL       ~Func:get_variable
   3C:  COPY      S3, V0
   40:  LW        A1, 0 (S0)
   44:  ADDIU     S0, S0, 4
   48:  COPY      A0, S1
   4C:  JAL       ~Func:get_variable
   50:  COPY      S2, V0
   54:  COPY      A0, S1
   58:  LW        A1, 0 (S0)
   5C:  JAL       ~Func:get_variable
   60:  COPY      S0, V0
   64:  LW        A0, 148 (S1)
   68:  JAL       ~Func:get_actor
   6C:  COPY      S1, V0
   70:  COPY      V1, V0
   74:  LW        V0, 8 (V1)
   78:  LBU       V0, 24 (V0)
   7C:  LW        A0, 8 (V1)
   80:  SUBU      S3, S3, V0
   84:  SB        S3, 194 (V1)
   88:  LBU       V0, 25 (A0)
   8C:  SUBU      S2, S2, V0
   90:  SB        S2, 195 (V1)
   94:  LBU       V0, 26 (A0)
   98:  SUBU      S0, S0, V0
   9C:  SB        S0, 196 (V1)
   A0:  LBU       A0, 27 (A0)
   A4:  SUBU      S1, S1, A0
   A8:  SB        S1, 197 (V1)
   AC:  LW        RA, 20 (SP)
   B0:  LW        S3, 1C (SP)
   B4:  LW        S2, 18 (SP)
   B8:  LW        S1, 14 (SP)
   BC:  LW        S0, 10 (SP)
   C0:  LI        V0, 2
   C4:  JR        RA
   C8:  ADDIU     SP, SP, 28
}

#new:Function $Function_802183A0
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  COPY      A0, S1
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  COPY      S0, V0
   34:  COPY      A0, S0
   38:  JAL       ~Func:start_rumble
   3C:  COPY      A1, V0
   40:  LW        RA, 18 (SP)
   44:  LW        S1, 14 (SP)
   48:  LW        S0, 10 (SP)
   4C:  LI        V0, 2
   50:  JR        RA
   54:  ADDIU     SP, SP, 20
}

% Origin: HINT
#new:Function $Function_802183F8
{
    0:  ADDIU     SP, SP, FFE0
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 18 (SP)
   10:  SW        S0, 10 (SP)
   14:  LW        S0, C (S1)
   18:  LW        A1, 0 (S0)
   1C:  JAL       ~Func:get_variable
   20:  ADDIU     S0, S0, 4
   24:  COPY      A0, V0
   28:  LI        V0, FF81
   2C:  BNE       A0, V0, .o38
   30:  NOP
   34:  LW        A0, 148 (S1)
        .o38
   38:  JAL       ~Func:get_actor
   3C:  NOP
   40:  COPY      A0, V0
   44:  LBU       V1, 136 (A0)
   48:  LI        V0, 47
   4C:  BEQ       V1, V0, .o7C
   50:  SLT       V0, V1, V0
   54:  BNEL      V0, R0, .o9C
   58:  COPY      A0, S1
   5C:  SLTI      V0, V1, 65
   60:  BEQ       V0, R0, .o98
   64:  SLTI      V0, V1, 4D
   68:  BNE       V0, R0, .o9C
   6C:  COPY      A0, S1
   70:  LW        A1, 0 (S0)
   74:  BEQ       R0, R0, .oA4
   78:  LI        A2, FFFF
        .o7C
   7C:  LW        V1, A8 (A0)
   80:  LI        V0, 1
   84:  BNE       V1, V0, .o9C
   88:  COPY      A0, S1
   8C:  LW        A1, 0 (S0)
   90:  BEQ       R0, R0, .oA4
   94:  LI        A2, FFFF
        .o98
   98:  COPY      A0, S1
        .o9C
   9C:  LW        A1, 0 (S0)
   A0:  CLEAR     A2
        .oA4
   A4:  JAL       ~Func:set_variable
   A8:  NOP
   AC:  LW        RA, 18 (SP)
   B0:  LW        S1, 14 (SP)
   B4:  LW        S0, 10 (SP)
   B8:  LI        V0, 2
   BC:  JR        RA
   C0:  ADDIU     SP, SP, 20
}

PADDING: 802184BC to 802184C0 (0047F56C to 0047F570)
00000000

#new:Function $Function_802184C0
{
    0:  ADDIU     SP, SP, FFC0
    4:  SW        S3, 2C (SP)
    8:  ADDIU     S3, A0, FFFF
    C:  COPY      A0, S3
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  ADDIU     A3, SP, 18
   1C:  SW        RA, 3C (SP)
   20:  SW        S6, 38 (SP)
   24:  SW        S5, 34 (SP)
   28:  SW        S4, 30 (SP)
   2C:  SW        S2, 28 (SP)
   30:  SW        S1, 24 (SP)
   34:  JAL       ~Func:mdl_get_copied_vertices
   38:  SW        S0, 20 (SP)
   3C:  LW        V0, 18 (SP)
   40:  BLEZ      V0, .o188
   44:  CLEAR     S0
   48:  LA        V1, $???_80224BB0
   50:  SLL       V0, S3, 1
   54:  ADDU      S5, V0, V1
   58:  LI        S4, 55555556
   60:  ORI       S6, R0, 8000
   64:  MULT      S0, S4
        .o68
   68:  SRA       S2, S0, 1F
   6C:  MFHI      V1
   70:  SUBU      V1, V1, S2
   74:  SLL       V0, V1, 1
   78:  ADDU      V0, V0, V1
   7C:  SUBU      V0, S0, V0
   80:  LHU       V1, 0 (S5)
   84:  ADDIU     V0, V0, 1
   88:  MULT      V1, V0
   8C:  SLL       V0, S0, 4
   90:  MFLO      V1
   94:  ADDU      A0, V1, S0
   98:  LW        V1, 14 (SP)
   9C:  ANDI      A0, A0, FFFF
   A0:  JAL       ~Func:sins
   A4:  ADDU      S1, V1, V0
   A8:  SLL       V0, V0, 10
   AC:  SRA       V0, V0, 10
   B0:  ADDU      V0, V0, S6
   B4:  SRL       V1, V0, 1F
   B8:  ADDU      V0, V0, V1
   BC:  SLL       V0, V0, F
   C0:  SRA       V0, V0, 10
   C4:  SLL       V1, V0, 2
   C8:  ADDU      V1, V1, V0
   CC:  SLL       V0, V1, 5
   D0:  SUBU      V1, V0, V1
   D4:  BGEZ      V1, .oE0
   D8:  COPY      V0, V1
   DC:  ADDIU     V0, V1, 7FFF
        .oE0
   E0:  SRA       V0, V0, F
   E4:  ADDIU     V0, V0, 64
   E8:  SB        V0, C (S1)
   EC:  SUBU      V1, S0, S2
   F0:  SRA       A1, V1, 1
   F4:  MULT      A1, S4
   F8:  SB        V0, D (S1)
   FC:  LHU       A0, 0 (S5)
  100:  SRA       V1, V1, 1F
  104:  SRL       A2, A0, F
  108:  MFHI      T1
  10C:  SUBU      V1, T1, V1
  110:  SLL       V0, V1, 1
  114:  ADDU      V0, V0, V1
  118:  SUBU      A1, A1, V0
  11C:  ADDIU     A1, A1, 1
  120:  SLL       A1, A1, F
  124:  MULT      A2, A1
  128:  SRL       A0, A0, E
  12C:  SLL       A0, A0, F
  130:  MFLO      V1
  134:  ADDU      A0, V1, A0
  138:  ADDU      A0, A0, S0
  13C:  JAL       ~Func:sins
  140:  ANDI      A0, A0, FFFF
  144:  SLL       V0, V0, 10
  148:  SRA       V0, V0, 10
  14C:  LBU       V1, C (S1)
  150:  ADDU      V0, V0, S6
  154:  MULT      V1, V0
  158:  MFLO      V1
  15C:  BGEZ      V1, .o170
  160:  SRA       V0, V1, 10
  164:  ORI       V0, R0, FFFF
  168:  ADDU      V1, V1, V0
  16C:  SRA       V0, V1, 10
        .o170
  170:  SB        V0, E (S1)
  174:  LW        V0, 18 (SP)
  178:  ADDIU     S0, S0, 1
  17C:  SLT       V0, S0, V0
  180:  BNE       V0, R0, .o68
  184:  MULT      S0, S4
        .o188
  188:  LA        V1, 8009A66C
  190:  LW        V0, 0 (V1)
  194:  COPY      A0, S3
  198:  COPY      S0, V0
  19C:  ADDIU     V0, V0, 8
  1A0:  SW        V0, 0 (V1)
  1A4:  LUI       V0, DE00
  1A8:  JAL       ~Func:mdl_get_copied_gfx
  1AC:  SW        V0, 0 (S0)
  1B0:  SW        V0, 4 (S0)
  1B4:  LA        V0, $???_80224BB0
  1BC:  SLL       V1, S3, 1
  1C0:  ADDU      V1, V1, V0
  1C4:  LHU       V0, 0 (V1)
  1C8:  ADDIU     V0, V0, 253
  1CC:  SH        V0, 0 (V1)
  1D0:  LW        RA, 3C (SP)
  1D4:  LW        S6, 38 (SP)
  1D8:  LW        S5, 34 (SP)
  1DC:  LW        S4, 30 (SP)
  1E0:  LW        S3, 2C (SP)
  1E4:  LW        S2, 28 (SP)
  1E8:  LW        S1, 24 (SP)
  1EC:  LW        S0, 20 (SP)
  1F0:  JR        RA
  1F4:  ADDIU     SP, SP, 40
}

#new:Function $Function_802186B8
{
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  COPY      A0, S2
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       ~Func:mdl_get_copied_vertices
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A4
   48:  CLEAR     S0
   4C:  LA        V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LI        S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       ~Func:sins
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  COPY      A0, V0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LAD       F2, $ConstDouble_80225FB0
  108:  MTC1      V0, F0
  10C:  NOP
  110:  CVT.D.W   F0, F0
  114:  ADD.D     F0, F0, F2
  118:  C.LE.D    F20, F0
  11C:  NOP
  120:  BC1TL     .o138
  124:  SUB.D     F0, F0, F20
  128:  TRUNC.W.D F4, F0
  12C:  MFC1      V0, F4
  130:  BEQ       R0, R0, .o14C
  134:  SB        V0, 0 (S1)
        .o138
  138:  TRUNC.W.D F4, F0
  13C:  MFC1      V0, F4
  140:  NOP
  144:  OR        V0, V0, S5
  148:  SB        V0, 0 (S1)
        .o14C
  14C:  SLL       V0, A0, 10
  150:  SRA       V0, V0, 10
  154:  SLL       V1, V0, 2
  158:  ADDU      V1, V1, V0
  15C:  SLL       V0, V1, 5
  160:  SUBU      V0, V0, V1
  164:  BGEZ      V0, .o170
  168:  ADDIU     V1, S1, 1
  16C:  ADDIU     V0, V0, 7FFF
        .o170
  170:  SRA       V0, V0, F
  174:  LAD       F2, $ConstDouble_80225FB8
  17C:  MTC1      V0, F0
  180:  NOP
  184:  CVT.D.W   F0, F0
  188:  ADD.D     F0, F0, F2
  18C:  C.LE.D    F20, F0
  190:  NOP
  194:  BC1TL     .o1AC
  198:  SUB.D     F0, F0, F20
  19C:  TRUNC.W.D F4, F0
  1A0:  MFC1      V0, F4
  1A4:  BEQ       R0, R0, .o1C0
  1A8:  SB        V0, 0 (V1)
        .o1AC
  1AC:  TRUNC.W.D F4, F0
  1B0:  MFC1      V0, F4
  1B4:  NOP
  1B8:  OR        V0, V0, S5
  1BC:  SB        V0, 0 (V1)
        .o1C0
  1C0:  SRL       V1, S0, 1F
  1C4:  ADDU      V1, S0, V1
  1C8:  SRA       A1, V1, 1
  1CC:  MULT      A1, S3
  1D0:  LHU       A0, 0 (S4)
  1D4:  SRA       V1, V1, 1F
  1D8:  SRL       A2, A0, F
  1DC:  MFHI      T1
  1E0:  SUBU      V1, T1, V1
  1E4:  SLL       V0, V1, 1
  1E8:  ADDU      V0, V0, V1
  1EC:  SUBU      A1, A1, V0
  1F0:  ADDIU     A1, A1, 1
  1F4:  SLL       A1, A1, F
  1F8:  MULT      A2, A1
  1FC:  SRL       A0, A0, E
  200:  SLL       A0, A0, F
  204:  MFLO      V1
  208:  ADDU      A0, V1, A0
  20C:  ADDU      A0, A0, S0
  210:  JAL       ~Func:sins
  214:  ANDI      A0, A0, FFFF
  218:  SLL       V0, V0, 10
  21C:  SRA       V0, V0, 10
  220:  LBU       V1, 0 (S1)
  224:  ADDU      V0, V0, S6
  228:  MULT      V1, V0
  22C:  MFLO      V1
  230:  BGEZ      V1, .o240
  234:  ADDIU     A0, S1, 2
  238:  ORI       V0, R0, FFFF
  23C:  ADDU      V1, V1, V0
        .o240
  240:  SRA       V0, V1, 10
  244:  LAD       F2, $ConstDouble_80225FC0
  24C:  MTC1      V0, F0
  250:  NOP
  254:  CVT.D.W   F0, F0
  258:  ADD.D     F0, F0, F2
  25C:  C.LE.D    F20, F0
  260:  NOP
  264:  BC1TL     .o27C
  268:  SUB.D     F0, F0, F20
  26C:  TRUNC.W.D F4, F0
  270:  MFC1      V0, F4
  274:  BEQ       R0, R0, .o290
  278:  SB        V0, 0 (A0)
        .o27C
  27C:  TRUNC.W.D F4, F0
  280:  MFC1      V0, F4
  284:  NOP
  288:  OR        V0, V0, S5
  28C:  SB        V0, 0 (A0)
        .o290
  290:  LW        V0, 18 (SP)
  294:  ADDIU     S0, S0, 1
  298:  SLT       V0, S0, V0
  29C:  BNE       V0, R0, .o7C
  2A0:  MULT      S0, S3
        .o2A4
  2A4:  LA        V1, 8009A66C
  2AC:  LW        V0, 0 (V1)
  2B0:  COPY      A0, S2
  2B4:  COPY      S0, V0
  2B8:  ADDIU     V0, V0, 8
  2BC:  SW        V0, 0 (V1)
  2C0:  LUI       V0, DE00
  2C4:  JAL       ~Func:mdl_get_copied_gfx
  2C8:  SW        V0, 0 (S0)
  2CC:  SW        V0, 4 (S0)
  2D0:  LA        V0, $???_80224BB0
  2D8:  SLL       V1, S2, 1
  2DC:  ADDU      V1, V1, V0
  2E0:  LHU       V0, 0 (V1)
  2E4:  ADDIU     V0, V0, 253
  2E8:  SH        V0, 0 (V1)
  2EC:  LW        RA, 3C (SP)
  2F0:  LW        S6, 38 (SP)
  2F4:  LW        S5, 34 (SP)
  2F8:  LW        S4, 30 (SP)
  2FC:  LW        S3, 2C (SP)
  300:  LW        S2, 28 (SP)
  304:  LW        S1, 24 (SP)
  308:  LW        S0, 20 (SP)
  30C:  LDC1      F20, 40 (SP)
  310:  JR        RA
  314:  ADDIU     SP, SP, 48
}

#new:Function $Function_802189D0
{
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  COPY      A0, S2
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       ~Func:mdl_get_copied_vertices
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A8
   48:  CLEAR     S0
   4C:  LA        V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LI        S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       ~Func:sins
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  COPY      A0, V0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LAD       F2, $ConstDouble_80225FC8
  108:  MTC1      V0, F0
  10C:  NOP
  110:  CVT.D.W   F0, F0
  114:  ADD.D     F0, F0, F2
  118:  C.LE.D    F20, F0
  11C:  NOP
  120:  BC1TL     .o138
  124:  SUB.D     F0, F0, F20
  128:  TRUNC.W.D F4, F0
  12C:  MFC1      V0, F4
  130:  BEQ       R0, R0, .o14C
  134:  SB        V0, 0 (S1)
        .o138
  138:  TRUNC.W.D F4, F0
  13C:  MFC1      V0, F4
  140:  NOP
  144:  OR        V0, V0, S5
  148:  SB        V0, 0 (S1)
        .o14C
  14C:  SLL       V0, A0, 10
  150:  SRA       V0, V0, 10
  154:  SLL       V1, V0, 2
  158:  ADDU      V1, V1, V0
  15C:  SLL       V0, V1, 5
  160:  SUBU      V0, V0, V1
  164:  BGEZ      V0, .o170
  168:  ADDIU     V1, S1, 1
  16C:  ADDIU     V0, V0, 7FFF
        .o170
  170:  SRA       V0, V0, F
  174:  LIF       F3, 3.390625
  17C:  MTC1      R0, F2
  180:  MTC1      V0, F0
  184:  NOP
  188:  CVT.D.W   F0, F0
  18C:  ADD.D     F0, F0, F2
  190:  C.LE.D    F20, F0
  194:  NOP
  198:  BC1TL     .o1B0
  19C:  SUB.D     F0, F0, F20
  1A0:  TRUNC.W.D F4, F0
  1A4:  MFC1      V0, F4
  1A8:  BEQ       R0, R0, .o1C4
  1AC:  SB        V0, 0 (V1)
        .o1B0
  1B0:  TRUNC.W.D F4, F0
  1B4:  MFC1      V0, F4
  1B8:  NOP
  1BC:  OR        V0, V0, S5
  1C0:  SB        V0, 0 (V1)
        .o1C4
  1C4:  SRL       V1, S0, 1F
  1C8:  ADDU      V1, S0, V1
  1CC:  SRA       A1, V1, 1
  1D0:  MULT      A1, S3
  1D4:  LHU       A0, 0 (S4)
  1D8:  SRA       V1, V1, 1F
  1DC:  SRL       A2, A0, F
  1E0:  MFHI      T1
  1E4:  SUBU      V1, T1, V1
  1E8:  SLL       V0, V1, 1
  1EC:  ADDU      V0, V0, V1
  1F0:  SUBU      A1, A1, V0
  1F4:  ADDIU     A1, A1, 1
  1F8:  SLL       A1, A1, F
  1FC:  MULT      A2, A1
  200:  SRL       A0, A0, E
  204:  SLL       A0, A0, F
  208:  MFLO      V1
  20C:  ADDU      A0, V1, A0
  210:  ADDU      A0, A0, S0
  214:  JAL       ~Func:sins
  218:  ANDI      A0, A0, FFFF
  21C:  SLL       V0, V0, 10
  220:  SRA       V0, V0, 10
  224:  LBU       V1, 0 (S1)
  228:  ADDU      V0, V0, S6
  22C:  MULT      V1, V0
  230:  MFLO      V1
  234:  BGEZ      V1, .o244
  238:  ADDIU     A0, S1, 2
  23C:  ORI       V0, R0, FFFF
  240:  ADDU      V1, V1, V0
        .o244
  244:  SRA       V0, V1, 10
  248:  LAD       F2, $ConstDouble_80225FD0
  250:  MTC1      V0, F0
  254:  NOP
  258:  CVT.D.W   F0, F0
  25C:  ADD.D     F0, F0, F2
  260:  C.LE.D    F20, F0
  264:  NOP
  268:  BC1TL     .o280
  26C:  SUB.D     F0, F0, F20
  270:  TRUNC.W.D F4, F0
  274:  MFC1      V0, F4
  278:  BEQ       R0, R0, .o294
  27C:  SB        V0, 0 (A0)
        .o280
  280:  TRUNC.W.D F4, F0
  284:  MFC1      V0, F4
  288:  NOP
  28C:  OR        V0, V0, S5
  290:  SB        V0, 0 (A0)
        .o294
  294:  LW        V0, 18 (SP)
  298:  ADDIU     S0, S0, 1
  29C:  SLT       V0, S0, V0
  2A0:  BNE       V0, R0, .o7C
  2A4:  MULT      S0, S3
        .o2A8
  2A8:  LA        V1, 8009A66C
  2B0:  LW        V0, 0 (V1)
  2B4:  COPY      A0, S2
  2B8:  COPY      S0, V0
  2BC:  ADDIU     V0, V0, 8
  2C0:  SW        V0, 0 (V1)
  2C4:  LUI       V0, DE00
  2C8:  JAL       ~Func:mdl_get_copied_gfx
  2CC:  SW        V0, 0 (S0)
  2D0:  SW        V0, 4 (S0)
  2D4:  LA        V0, $???_80224BB0
  2DC:  SLL       V1, S2, 1
  2E0:  ADDU      V1, V1, V0
  2E4:  LHU       V0, 0 (V1)
  2E8:  ADDIU     V0, V0, 253
  2EC:  SH        V0, 0 (V1)
  2F0:  LW        RA, 3C (SP)
  2F4:  LW        S6, 38 (SP)
  2F8:  LW        S5, 34 (SP)
  2FC:  LW        S4, 30 (SP)
  300:  LW        S3, 2C (SP)
  304:  LW        S2, 28 (SP)
  308:  LW        S1, 24 (SP)
  30C:  LW        S0, 20 (SP)
  310:  LDC1      F20, 40 (SP)
  314:  JR        RA
  318:  ADDIU     SP, SP, 48
}

#new:Function $Function_80218CEC
{
    0:  ADDIU     SP, SP, FFB8
    4:  SW        S2, 28 (SP)
    8:  ADDIU     S2, A0, FFFF
    C:  COPY      A0, S2
   10:  ADDIU     A1, SP, 10
   14:  ADDIU     A2, SP, 14
   18:  SW        RA, 3C (SP)
   1C:  SW        S6, 38 (SP)
   20:  SW        S5, 34 (SP)
   24:  SW        S4, 30 (SP)
   28:  SW        S3, 2C (SP)
   2C:  SW        S1, 24 (SP)
   30:  SW        S0, 20 (SP)
   34:  SDC1      F20, 40 (SP)
   38:  JAL       ~Func:mdl_get_copied_vertices
   3C:  ADDIU     A3, SP, 18
   40:  LW        V0, 18 (SP)
   44:  BLEZ      V0, .o2A8
   48:  CLEAR     S0
   4C:  LA        V1, $???_80224BB0
   54:  SLL       V0, S2, 1
   58:  ADDU      S4, V0, V1
   5C:  LI        S3, 55555556
   64:  ORI       S6, R0, 8000
   68:  LIF       F21, 28.0
   70:  MTC1      R0, F20
   74:  LUI       S5, 8000
   78:  MULT      S0, S3
        .o7C
   7C:  SRA       V1, S0, 1F
   80:  MFHI      T1
   84:  SUBU      V1, T1, V1
   88:  SLL       V0, V1, 1
   8C:  ADDU      V0, V0, V1
   90:  SUBU      V0, S0, V0
   94:  LHU       V1, 0 (S4)
   98:  ADDIU     V0, V0, 1
   9C:  MULT      V1, V0
   A0:  LW        V0, 14 (SP)
   A4:  MFLO      V1
   A8:  ADDU      A0, V1, S0
   AC:  ANDI      A0, A0, FFFF
   B0:  SLL       V1, S0, 4
   B4:  ADDU      V0, V0, V1
   B8:  JAL       ~Func:sins
   BC:  ADDIU     S1, V0, C
   C0:  SLL       V0, V0, 10
   C4:  SRA       V0, V0, 10
   C8:  ADDU      V0, V0, S6
   CC:  SRL       V1, V0, 1F
   D0:  ADDU      V0, V0, V1
   D4:  SRA       V0, V0, 1
   D8:  SLL       V1, V0, 10
   DC:  SRA       V1, V1, 10
   E0:  SLL       A0, V1, 2
   E4:  ADDU      A0, A0, V1
   E8:  SLL       V1, A0, 5
   EC:  SUBU      V1, V1, A0
   F0:  BGEZ      V1, .oFC
   F4:  COPY      A0, V0
   F8:  ADDIU     V1, V1, 7FFF
        .oFC
   FC:  SRA       V0, V1, F
  100:  LIF       F3, 3.390625
  108:  MTC1      R0, F2
  10C:  MTC1      V0, F0
  110:  NOP
  114:  CVT.D.W   F0, F0
  118:  ADD.D     F0, F0, F2
  11C:  C.LE.D    F20, F0
  120:  NOP
  124:  BC1TL     .o13C
  128:  SUB.D     F0, F0, F20
  12C:  TRUNC.W.D F4, F0
  130:  MFC1      V0, F4
  134:  BEQ       R0, R0, .o150
  138:  SB        V0, 0 (S1)
        .o13C
  13C:  TRUNC.W.D F4, F0
  140:  MFC1      V0, F4
  144:  NOP
  148:  OR        V0, V0, S5
  14C:  SB        V0, 0 (S1)
        .o150
  150:  SLL       V0, A0, 10
  154:  SRA       V0, V0, 10
  158:  SLL       V1, V0, 2
  15C:  ADDU      V1, V1, V0
  160:  SLL       V0, V1, 5
  164:  SUBU      V0, V0, V1
  168:  BGEZ      V0, .o174
  16C:  ADDIU     V1, S1, 1
  170:  ADDIU     V0, V0, 7FFF
        .o174
  174:  SRA       V0, V0, F
  178:  LAD       F2, $ConstDouble_80225FD8
  180:  MTC1      V0, F0
  184:  NOP
  188:  CVT.D.W   F0, F0
  18C:  ADD.D     F0, F0, F2
  190:  C.LE.D    F20, F0
  194:  NOP
  198:  BC1TL     .o1B0
  19C:  SUB.D     F0, F0, F20
  1A0:  TRUNC.W.D F4, F0
  1A4:  MFC1      V0, F4
  1A8:  BEQ       R0, R0, .o1C4
  1AC:  SB        V0, 0 (V1)
        .o1B0
  1B0:  TRUNC.W.D F4, F0
  1B4:  MFC1      V0, F4
  1B8:  NOP
  1BC:  OR        V0, V0, S5
  1C0:  SB        V0, 0 (V1)
        .o1C4
  1C4:  SRL       V1, S0, 1F
  1C8:  ADDU      V1, S0, V1
  1CC:  SRA       A1, V1, 1
  1D0:  MULT      A1, S3
  1D4:  LHU       A0, 0 (S4)
  1D8:  SRA       V1, V1, 1F
  1DC:  SRL       A2, A0, F
  1E0:  MFHI      T1
  1E4:  SUBU      V1, T1, V1
  1E8:  SLL       V0, V1, 1
  1EC:  ADDU      V0, V0, V1
  1F0:  SUBU      A1, A1, V0
  1F4:  ADDIU     A1, A1, 1
  1F8:  SLL       A1, A1, F
  1FC:  MULT      A2, A1
  200:  SRL       A0, A0, E
  204:  SLL       A0, A0, F
  208:  MFLO      V1
  20C:  ADDU      A0, V1, A0
  210:  ADDU      A0, A0, S0
  214:  JAL       ~Func:sins
  218:  ANDI      A0, A0, FFFF
  21C:  SLL       V0, V0, 10
  220:  SRA       V0, V0, 10
  224:  LBU       V1, 0 (S1)
  228:  ADDU      V0, V0, S6
  22C:  MULT      V1, V0
  230:  MFLO      V1
  234:  BGEZ      V1, .o244
  238:  ADDIU     A0, S1, 2
  23C:  ORI       V0, R0, FFFF
  240:  ADDU      V1, V1, V0
        .o244
  244:  SRA       V0, V1, 10
  248:  LAD       F2, $ConstDouble_80225FE0
  250:  MTC1      V0, F0
  254:  NOP
  258:  CVT.D.W   F0, F0
  25C:  ADD.D     F0, F0, F2
  260:  C.LE.D    F20, F0
  264:  NOP
  268:  BC1TL     .o280
  26C:  SUB.D     F0, F0, F20
  270:  TRUNC.W.D F4, F0
  274:  MFC1      V0, F4
  278:  BEQ       R0, R0, .o294
  27C:  SB        V0, 0 (A0)
        .o280
  280:  TRUNC.W.D F4, F0
  284:  MFC1      V0, F4
  288:  NOP
  28C:  OR        V0, V0, S5
  290:  SB        V0, 0 (A0)
        .o294
  294:  LW        V0, 18 (SP)
  298:  ADDIU     S0, S0, 1
  29C:  SLT       V0, S0, V0
  2A0:  BNE       V0, R0, .o7C
  2A4:  MULT      S0, S3
        .o2A8
  2A8:  LA        V1, 8009A66C
  2B0:  LW        V0, 0 (V1)
  2B4:  COPY      A0, S2
  2B8:  COPY      S0, V0
  2BC:  ADDIU     V0, V0, 8
  2C0:  SW        V0, 0 (V1)
  2C4:  LUI       V0, DE00
  2C8:  JAL       ~Func:mdl_get_copied_gfx
  2CC:  SW        V0, 0 (S0)
  2D0:  SW        V0, 4 (S0)
  2D4:  LA        V0, $???_80224BB0
  2DC:  SLL       V1, S2, 1
  2E0:  ADDU      V1, V1, V0
  2E4:  LHU       V0, 0 (V1)
  2E8:  ADDIU     V0, V0, 253
  2EC:  SH        V0, 0 (V1)
  2F0:  LW        RA, 3C (SP)
  2F4:  LW        S6, 38 (SP)
  2F8:  LW        S5, 34 (SP)
  2FC:  LW        S4, 30 (SP)
  300:  LW        S3, 2C (SP)
  304:  LW        S2, 28 (SP)
  308:  LW        S1, 24 (SP)
  30C:  LW        S0, 20 (SP)
  310:  LDC1      F20, 40 (SP)
  314:  JR        RA
  318:  ADDIU     SP, SP, 48
}

PADDING: 80219008 to 80219010 (004800B8 to 004800C0)
00000000 00000000

#new:IdleAnimations $IdleAnimations_80219010
{
	.Status:Normal    00090001
	.Status:Stone     00090000
	.Status:Sleep     00090000
	.Status:Poison    00090001
	.Status:Stop      00090000
	.Status:Static    00090000
	.Status:Paralyze  00090000
	.Status:Dizzy     00090000
	.Status:Dizzy     00090000
	.Status:End
}

#new:DefenseTable $DefenseTable_8021905C
{
	.Element:Normal 00000000
	.Element:End
}

#new:StatusTable $StatusTable_80219068
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze    0`
	.Status:Shrink      0`
	.Status:Stop        0`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

#new:PartsTable $PartsTable_80219114
{
	00800000 01000000 FC1800FF $IdleAnimations_80219010 $DefenseTable_8021905C 00000000 00000000 00000000 00000000
}

#new:Actor $GoombarioTutor1
{
	% stats
	[Index]        94b
	[Level]        99`b
	[MaxHP]        99`b
	[Coins]         0`b
	[Flags]       00040000
	[StatusTable] $StatusTable_80219068
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80219114
	[Script]      $Script_Init_80219160
	% move effectiveness
	[Escape]        0`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce] 100`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         24`b  32`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:Script $Script_Init_80219160
{
    0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80219444 )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_802191D0 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_802191E0 )
   3C:  Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
   54:  Exec  $Script_80219C74
   60:  Return
   68:  End
}

#new:Script $Script_Idle_802191D0
{
    0:  Return
    8:  End
}

#new:Script $Script_HandleEvent_802191E0
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Thread
   1C:  	Call  8026BF48      ( 00000001 )
   2C:  	Call  GetLastEvent  ( .Actor:Self *Var0 )
   40:  	Switch  *Var0
   4C:  		Case  ==  .Event:Hit % A
   58:  			Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   70:  			If  *Var0  ==  00000000
   80:  				Call  RandInt   ( 00000002 *Var0 )
   94:  				Switch  *Var0
   A0:  					Case  ==  00000000
   AC:  						Call  ActorSpeak    ( 000A002D .Actor:Self 00000001 0009000A 00090002 ) % Ouch!
   CC:  					Case  ==  00000001
   D8:  						Call  ActorSpeak    ( 000A002E .Actor:Self 00000001 0009000A 00090002 ) % Ow!
   F8:  					Case  ==  00000002
  104:  				EndSwitch
  10C:  			EndIf
  114:  	EndSwitch
  11C:  	Call  8026BF48  ( 00000000 )
  12C:  EndThread
  134:  Call  GetLastEvent  ( .Actor:Self *Var0 )
  148:  Switch  *Var0
  154:  	CaseOR  ==  .Event:HitCombo % 9
  160:  	CaseOR  ==  .Event:Hit % A
  16C:  		SetConst  *Var0  00000001
  17C:  		SetConst  *Var1  0009000A
  18C:  		ExecWait  DoNormalHit
  198:  	EndCaseGroup
  1A0:  	CaseOR  ==  00000017 % 17
  1AC:  	CaseOR  ==  .Event:Immune % 19
  1B8:  		SetConst  *Var0  00000001
  1C8:  		SetConst  *Var1  00090001
  1D8:  		ExecWait  DoImmune
  1E4:  	EndCaseGroup
  1EC:  	Case  ==  00000030 % 30
  1F8:  		SetConst  *Var0  00000001
  208:  		SetConst  *Var1  0009000A
  218:  		ExecWait  DoNormalHit
  224:  		Wait  1000`
  230:  	Default
  238:  EndSwitch
  240:  Call  UseIdleAnimation  ( .Actor:Self .True )
  254:  Return
  25C:  End
}

#new:Script $Script_TakeTurn_80219444
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  SetBattleCamZoom  (  400` )
   5C:  Call  SetBattleCamOffsetZ   (  40` )
   6C:  Call  BattleCamTargetActor  ( .Actor:Self )
   7C:  Call  SetAnimation      ( .Actor:Self 00000001 00090003 )
   94:  Call  SetGoalToTarget   ( .Actor:Self )
   A4:  Call  AddGoalPos        ( .Actor:Self  50`  0`  0` )
   C0:  Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
   D4:  Call  RunToGoal ( .Actor:Self  0` .False )
   EC:  Call  SetAnimation      ( .Actor:Self 00000001 00090001 )
  104:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
  120:  Wait  1`
  12C:  Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
  148:  Wait  5`
  154:  Call  SetActorDispOffset    ( .Actor:Self 00000000 0000000A 00000000 )
  170:  Call  SetAnimation      ( .Actor:Self 00000001 00090006 )
  188:  Call  UseBattleCamPreset    ( 00000042 )
  198:  Call  SetBattleCamZoom  (  400` )
  1A8:  Call  SetBattleCamOffsetZ   (  40` )
  1B8:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
  1D0:  Call  BattleCamTargetActor  ( .Actor:Self )
  1E0:  Call  SetGoalToTarget   ( .Actor:Self )
  1F0:  Call  AddGoalPos        ( .Actor:Self  -10`  0`  0` )
  20C:  Call  GetBattleFlags2   ( *Var0 )
  21C:  If  *Var0  &  00000200
  22C:  	Call  AddGoalPos    ( .Actor:Self  5`  10`  0` )
  248:  EndIf
  250:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.1] )
  264:  Thread
  26C:  	Wait  4`
  278:  	Set   *Var0  00000000
  288:  	Loop  00000004
  294:  		Add   *Var0  0000002D
  2A4:  		Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
  2C0:  		Wait  1`
  2CC:  	EndLoop
  2D4:  	Call  SetAnimation  ( .Actor:Self 00000001 00090006 )
  2EC:  EndThread
  2F4:  Thread
  2FC:  	Call  LoadActionCommand ( .ActionCommand:Jump )
  30C:  	Call  802A9000 ( )
  318:  	Call  802694A4  ( 00000001 )
  328:  	Wait  10`
  334:  	Call  802A9120  ( 0000000C 00000003 )
  348:  EndThread
  350:  Call  PlaySound     ( 000003E2 )
  360:  Call  JumpToGoal    ( .Actor:Self  22` .False .True .False )
  380:  Call  SetAnimation  ( .Actor:Self 00000001 00090006 )
  398:  Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  3B4:  Wait  1`
  3C0:  Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
  3DC:  Wait  1`
  3E8:  Call  GetActionCommandMode  ( *Var0 )
  3F8:  If  *Var0  ==  00000002
  408:  	Call  SetActionCommandMode  ( 00000003 )
  418:  	Loop
  424:  		Call  GetActionCommandMode  ( *Var0 )
  434:  		If  *Var0  <  00000002
  444:  			BreakLoop
  44C:  		EndIf
  454:  		Wait  1`
  460:  	EndLoop
  468:  EndIf
  470:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
  488:  If  *Var0  ==  00000001
  498:  	Call  80269EAC  ( 00000005 )
  4A8:  EndIf
  4B0:  Wait  2`
  4BC:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000001 00000020 )
  4E4:  Call  CloseActionCommandInfo ( )
  4F0:  Set   *VarF  *Var0
  500:  Switch  *VarF
  50C:  	CaseOR  ==  .HitResult:Hit % 0
  518:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  524:  	CaseOR  ==  0000000A % A
  530:  		Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
  54C:  		Wait  1`
  558:  		Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  574:  		Wait  1`
  580:  		Call  SetActorRotation      ( .Actor:Self 00000000 00000000 00000000 )
  59C:  		Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
  5B8:  		Call  SetAnimation  ( .Actor:Self 00000001 00090001 )
  5D0:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  5EC:  		Add   *Var0  00000028
  5FC:  		Set   *Var1  00000000
  60C:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  620:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  63C:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  65C:  		Add   *Var0  0000001E
  66C:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  688:  		Call  JumpToGoal    ( .Actor:Self  8` .False .True .False )
  6A8:  		Add   *Var0  00000014
  6B8:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  6D4:  		Call  JumpToGoal    ( .Actor:Self  6` .False .True .False )
  6F4:  		Sub   *Var0  0000000A
  704:  		Call  JumpToGoal    ( .Actor:Self  4` .False .True .False )
  724:  		Call  SetAnimation  ( .Actor:Self 00000001 00090001 )
  73C:  		Wait  8`
  748:  		Call  UseBattleCamPreset    ( 00000002 )
  758:  		Call  YieldTurn ( )
  764:  		Call  SetAnimation  ( .Actor:Self 00000001 00090001 )
  77C:  		Call  SetGoalToHome ( .Actor:Self )
  78C:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  7A0:  		Call  SetAnimation  ( .Actor:Self 00000001 00090003 )
  7B8:  		Call  RunToGoal     ( .Actor:Self  0` .False )
  7D0:  		Call  SetAnimation  ( .Actor:Self 00000001 00090001 )
  7E8:  	EndCaseGroup
  7F0:  EndSwitch
  7F8:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  80C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  820:  Return
  828:  End
}

#new:Script $Script_80219C74
{
    0:  Call  SetBattleFlagBits ( 02000000 .True )
   14:  Call  802535B4  ( 00000000 )
   24:  Call  WaitForState      ( .BattleState:PlayerMenu )
   34:  Wait  15`
   40:  Call  UseIdleAnimation  ( .Actor:Partner .False )
   54:  Call  EnableIdleScript  ( .Actor:Partner 00000000 )
   68:  Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[1.0] )
   7C:  Call  GetActorPos       ( .Actor:Partner *Var0 *Var1 *Var2 )
   98:  Call  SetGoalPos        ( .Actor:Partner *Var0 *Var1 *Var2 )
   B4:  Call  JumpToGoal        ( .Actor:Partner  10` .False .False .False )
   D4:  Call  UseIdleAnimation  ( .Actor:Partner .False )
   E8:  Call  ActorSpeak        ( 000A0019 .Actor:Partner 00000001 00200009 00200005 ) % First, Mario, choose the Jump command and then dec ...
  108:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  11C:  Call  8026E020  ( 00000001 )
  12C:  Call  SetActionCommandMode  ( 00000002 )
  13C:  Call  WaitForState      ( .BattleState:PlayerMove )
  14C:  Call  UseBattleCamPreset    ( 00000002 )
  15C:  Wait  15`
  168:  Call  SetGoalPos        ( .Actor:Partner  -73`  40`  202` )
  184:  Call  FlyToGoal ( .Actor:Partner  20`  20` .Easing:CosInOut )
  1A0:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  1B4:  Call  ActorSpeak        ( 000A001A .Actor:Partner 00000001 00200009 00200005 ) % Once you decide on the enemy, the explanation of t ...
  1D4:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  1E8:  Call  SetActionCommandMode  ( 00000001 )
  1F8:  Call  SetBattleFlagBits ( 00004000 .False )
  20C:  Call  SetMessageBoxDuration ( FFFFFFFF )
  21C:  Thread
  224:  	Loop  0000000F
  230:  		Call  SetMessageBoxDuration ( 00000023 )
  240:  		Wait  1`
  24C:  	EndLoop
  254:  EndThread
  25C:  Wait  15`
  268:  Call  SetGoalToHome ( .Actor:Partner )
  278:  Call  FlyToGoal ( .Actor:Partner  20`  20` .Easing:CosInOut )
  294:  Call  SetActionCommandMode  ( 00000002 )
  2A4:  Call  WaitForState  ( .BattleState:None )
  2B4:  Call  SetBattleFlagBits2    ( 00000200 .True )
  2C8:  Loop
  2D4:  	Call  GetActionCommandMode  ( *Var0 )
  2E4:  	If  *Var0  !=  00000002
  2F4:  		BreakLoop
  2FC:  	EndIf
  304:  	Wait  1`
  310:  EndLoop
  318:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  32C:  Call  ActorSpeak        ( 000A001B .Actor:Partner 00000001 00200009 00200005 ) % Right now! Just before stomping the enemy. Press a ...
  34C:  Loop
  358:  	Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  36C:  	If  *Var0  ==  .False
  37C:  		BreakLoop
  384:  	EndIf
  38C:  	Wait  1`
  398:  EndLoop
  3A0:  Loop
  3AC:  	Call  CheckButtonPress  ( ~Flags:Buttons:A *Var0 )
  3C0:  	If  *Var0  ==  .True
  3D0:  		BreakLoop
  3D8:  	EndIf
  3E0:  	Wait  1`
  3EC:  EndLoop
  3F4:  Call  EndActorSpeech    ( .Actor:Partner 00000001 00200009 00200005 )
  410:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  424:  Call  SetActionSuccess  ( 00000001 )
  434:  Call  SetActionCommandMode  ( 00000001 )
  444:  Call  WaitForState      ( .BattleState:BeginPartnerTurn )
  454:  Call  UseBattleCamPreset    ( 00000002 )
  464:  Wait  15`
  470:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  484:  Call  ActorSpeak        ( 000A001D .Actor:Partner 00000001 00200009 00200005 ) % When you see "Nice" appear, it means you've succes ...
  4A4:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  4B8:  Call  WaitForState      ( .BattleState:NextPlayer )
  4C8:  Call  UseBattleCamPreset    ( 00000002 )
  4D8:  Wait  15`
  4E4:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  4F8:  Call  ActorSpeak        ( 000A001E .Actor:Enemy0 00000001 0009000F 00090001 ) % OK! Here it comes, Mario!
  518:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  52C:  Call  SetActionCommandMode  ( 00000002 )
  53C:  Call  WaitForState      ( .BattleState:None )
  54C:  Loop
  558:  	Call  GetActionCommandMode  ( *Var0 )
  568:  	If  *Var0  !=  00000002
  578:  		BreakLoop
  580:  	EndIf
  588:  	Wait  1`
  594:  EndLoop
  59C:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  5B0:  Call  ActorSpeak        ( 000A001F .Actor:Partner 00000001 00200009 00200005 ) % Right now! Press just before the attack strikes yo ...
  5D0:  Loop
  5DC:  	Call  CheckButtonDown   ( ~Flags:Buttons:A *Var0 )
  5F0:  	If  *Var0  ==  .False
  600:  		BreakLoop
  608:  	EndIf
  610:  	Wait  1`
  61C:  EndLoop
  624:  Loop
  630:  	Call  CheckButtonPress  ( ~Flags:Buttons:A *Var0 )
  644:  	If  *Var0  ==  .True
  654:  		BreakLoop
  65C:  	EndIf
  664:  	Wait  1`
  670:  EndLoop
  678:  Call  EndActorSpeech    ( .Actor:Partner 00000001 00200009 00200005 )
  694:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  6A8:  Call  SetActionSuccess  ( 00000001 )
  6B8:  Call  SetActionCommandMode  ( FFFFFFFF )
  6C8:  Call  WaitForState      ( .BattleState:EndTurn )
  6D8:  Call  UseBattleCamPreset    ( 00000002 )
  6E8:  Wait  15`
  6F4:  Call  SetActionCommandMode  ( 00000001 )
  704:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  718:  Call  ActorSpeak        ( 000A0020 .Actor:Partner 00000001 00200009 00200005 ) % Yes! You successfully used the action command. Thi ...
  738:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  74C:  Call  WaitForState      ( .BattleState:PlayerMenu )
  75C:  Call  8026E020  ( 00000002 )
  76C:  Call  SetActionCommandMode  ( 00000002 )
  77C:  Call  WaitForState      ( .BattleState:PlayerMove )
  78C:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  7A0:  Call  ActorSpeak        ( 000A0022 .Actor:Partner 00000001 00200009 00200005 ) % Once you choose an enemy to attack, move the Contr ...
  7C0:  Loop
  7CC:  	Call  CheckButtonDown   ( ~Flags:Buttons::40000 *Var0 )
  7E0:  	If  *Var0  ==  .False
  7F0:  		BreakLoop
  7F8:  	EndIf
  800:  	Wait  1`
  80C:  EndLoop
  814:  Loop
  820:  	Call  CheckButtonPress  ( ~Flags:Buttons::40000 *Var0 )
  834:  	If  *Var0  ==  .True
  844:  		BreakLoop
  84C:  	EndIf
  854:  	Wait  1`
  860:  EndLoop
  868:  Call  EndActorSpeech        ( .Actor:Partner 00000001 00200009 00200005 )
  884:  Call  UseIdleAnimation      ( .Actor:Partner .True )
  898:  Call  SetActionCommandMode  ( 00000001 )
  8A8:  Call  WaitForState  ( .BattleState:None )
  8B8:  Wait  5`
  8C4:  Call  SetActionCommandMode  ( 00000002 )
  8D4:  Loop
  8E0:  	Call  GetActionCommandMode  ( *Var0 )
  8F0:  	If  *Var0  !=  00000002
  900:  		BreakLoop
  908:  	EndIf
  910:  	Call  CheckButtonDown   ( ~Flags:Buttons::40000 *Var0 )
  924:  	If  *Var0  ==  .False
  934:  		Call  SetActionCommandMode  ( FFFFFFFF )
  944:  		Call  PauseTakeTurn     ( .Actor:Player )
  954:  		Call  UseIdleAnimation  ( .Actor:Partner .False )
  968:  		Call  ActorSpeak        ( 000A0023 .Actor:Partner 00000001 00200009 00200005 ) % Move the Control Stick to the left and keep it the ...
  988:  		Loop
  994:  			Call  CheckButtonPress  ( ~Flags:Buttons::40000 *Var0 )
  9A8:  			If  *Var0  ==  .True
  9B8:  				BreakLoop
  9C0:  			EndIf
  9C8:  			Wait  1`
  9D4:  		EndLoop
  9DC:  		Call  EndActorSpeech    ( .Actor:Partner 00000001 00200009 00200005 )
  9F8:  		Call  UseIdleAnimation  ( .Actor:Partner .True )
  A0C:  		Call  SetActionCommandMode  ( 00000002 )
  A1C:  		Call  ResumeTakeTurn    ( .Actor:Player )
  A2C:  	EndIf
  A34:  	Wait  1`
  A40:  EndLoop
  A48:  Loop
  A54:  	Call  GetActionResult   ( *Var0 )
  A64:  	If  *Var0  ==  00000003
  A74:  		BreakLoop
  A7C:  	EndIf
  A84:  	Wait  1`
  A90:  EndLoop
  A98:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  AAC:  Call  ActorSpeak        ( 000A0024 .Actor:Partner 00000001 00200009 00200005 ) % flashes as soon as your power reaches its maximum. ...
  ACC:  Loop
  AD8:  	Call  CheckButtonDown   ( ~Flags:Buttons::40000 *Var0 )
  AEC:  	If  *Var0  ==  .False
  AFC:  		BreakLoop
  B04:  	EndIf
  B0C:  	Wait  1`
  B18:  EndLoop
  B20:  Call  EndActorSpeech    ( .Actor:Partner 00000001 00200009 00200005 )
  B3C:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  B50:  Call  SetActionSuccess  ( 00000001 )
  B60:  Call  SetActionCommandMode  ( 00000001 )
  B70:  Call  WaitForState      ( .BattleState:BeginPartnerTurn )
  B80:  Call  UseBattleCamPreset    ( 00000002 )
  B90:  Wait  15`
  B9C:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  BB0:  Call  ActorSpeak        ( 000A0025 .Actor:Partner 00000001 00200009 00200005 ) % All right! You successfully used the action comman ...
  BD0:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  BE4:  Call  SetActorFlagBits  ( .Actor:Enemy0 00200000 .True )
  BFC:  Call  WaitForState      ( .BattleState:None )
  C0C:  Call  WaitForState      ( .BattleState:PlayerMenu )
  C1C:  Call  ShowBattleChoice  ( 001E001D ) % Yes No
  C2C:  Call  EndActorSpeech    ( .Actor:Partner 00000001 00200009 00200005 )
  C48:  If  *Var0  ==  00000001
  C58:  	Call  ActorSpeak    ( 000A0027 .Actor:Partner 00000001 00200009 00200005 ) % You don't need to practice anymore...? That's our  ...
  C78:  	Goto  64
  C84:  EndIf
  C8C:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  CA0:  Call  ActorSpeak        ( 000A0028 .Actor:Partner 00000001 00200009 00200005 ) % The action command will serve you well, so practic ...
  CC0:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  CD4:  Call  SetActorVar       ( .Actor:Self 00000000 00000000 )
  CEC:  Call  SetBattleFlagBits2    ( 00000200 .False )
  D00:  Label  A
  D0C:  Call  8026E020  ( 00000083 )
  D1C:  Call  SetActionCommandMode  ( 00000002 )
  D2C:  Call  WaitForState      ( .BattleState:PlayerMove )
  D3C:  Call  GetMenuSelection  ( *Var0 *Var1 *Var2 )
  D54:  If  *Var0  ==  00000007
  D64:  	Goto  63
  D70:  EndIf
  D78:  Call  SetActionCommandMode  ( 00000001 )
  D88:  Call  WaitForState      ( .BattleState:BeginPartnerTurn )
  D98:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  DAC:  Call  80269524  ( *Var0 )
  DBC:  Switch  *Var0
  DC8:  	Case  ==  FFFFFFFF
  DD4:  		Call  ActorSpeak    ( 000A002A .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too early.
  DF4:  	Case  ==  00000000
  E00:  		Call  ActorSpeak    ( 000A002B .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too late.
  E20:  	Case  ==  00000001
  E2C:  		Call  ActorSpeak    ( 000A0029 .Actor:Partner 00000001 00200009 00200005 ) % Well done, Mario!! You successfully used the actio ...
  E4C:  EndSwitch
  E54:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  E68:  Call  SetEnemyHP        ( .Actor:Enemy0  99` )
  E7C:  Call  SetActorFlagBits  ( .Actor:Enemy0 00200000 .False )
  E94:  Call  SetActionCommandMode  ( 00000001 )
  EA4:  Call  WaitForState      ( .BattleState:EndTurn )
  EB4:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  EC8:  Call  GetBlockResult    ( *Var0 )
  ED8:  Switch  *Var0
  EE4:  	Case  ==  FFFFFFFF
  EF0:  		Call  ActorSpeak    ( 000A002A .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too early.
  F10:  	Case  ==  00000000
  F1C:  		Call  ActorSpeak    ( 000A002B .Actor:Partner 00000001 00200009 00200005 ) % Almost!! That was a little bit too late.
  F3C:  	Case  ==  00000001
  F48:  		Call  ActorSpeak    ( 000A0029 .Actor:Partner 00000001 00200009 00200005 ) % Well done, Mario!! You successfully used the actio ...
  F68:  EndSwitch
  F70:  Call  UseIdleAnimation  ( .Actor:Partner .True )
  F84:  Call  WaitForState      ( .BattleState:PlayerMenu )
  F94:  Goto  A
  FA0:  Label  63
  FAC:  Call  UseIdleAnimation  ( .Actor:Partner .False )
  FC0:  Call  ActorSpeak        ( 000A002C .Actor:Partner 00000001 00200009 00200005 ) % Well, I guess that's about all I can teach you.
  FE0:  Label  64
  FEC:  Call  WaitForState      ( .BattleState:None )
  FFC:  Call  SetBattleState    ( .BattleState:EndTrainingBattle )
 100C:  Call  $Function_80218000 ( )
 1018:  Wait  00002710
 1024:  Return
 102C:  End
}

PADDING: 8021ACA8 to 8021ACB0 (00481D58 to 00481D60)
00000000 00000000

#new:DefenseTable $DefenseTable_8021ACB0
{
	.Element:Normal 00000000
	.Element:Water  FFFFFFFE
	.Element:Ice    FFFFFFFE
	.Element:Fire   00000063
	.Element:End
}

#new:StatusTable $StatusTable_8021ACD4
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy     100`
	.Status:Fear        0`
	.Status:Static     50`
	.Status:Paralyze    0`
	.Status:Shrink     90`
	.Status:Stop       85`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

#new:PartsTable $PartsTable_8021AD80
{
	00800000 01000000 FE1900FF $IdleAnimations_8021AE5C $DefenseTable_8021ACB0 00000002 00000000 FDF60000 00000000
	00120001 02000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000
	00120001 03000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000
	00120001 04000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000
	00120001 05000000 001800FF $IdleAnimations_8021AEA8 $DefenseTable_8021ACB0 00000000 00000000 FFF60000 00000000
}

#new:Actor $Ember
{
	% stats
	[Index]        45b
	[Level]        24`b
	[MaxHP]        10`b
	[Coins]         2`b
	[Flags]       00000200
	[StatusTable] $StatusTable_8021ACD4
	% ai
	[PartsCount]    5`s
	[PartsTable]  $PartsTable_8021AD80
	[Script]      $Script_Init_8021AEB4
	% move effectiveness
	[Escape]       60`b
	[Item]         50`b
	[AirLift]      80`b
	[Hurricane]    75`b % Bow's "Spook" as well
	[UpAndAway]    95`b
	[PowerBounce]  80`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         33`b  32`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:IdleAnimations $IdleAnimations_8021AE5C
{
	.Status:Normal    00460101
	.Status:Stone     00460100
	.Status:Sleep     00460101
	.Status:Poison    00460101
	.Status:Stop      00460100
	.Status:Static    00460101
	.Status:Paralyze  00460100
	.Status:Dizzy     0046010A
	.Status:Fear      0046010A
	.Status:End
}

#new:IdleAnimations $IdleAnimations_8021AEA8
{
	.Status:Normal    00460101
	.Status:End
}

#new:Script $Script_Init_8021AEB4
{
    0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8021D284 )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021B07C )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021B8BC )
   3C:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   54:  Switch  *Var0
   60:  	Case  ==  00000000
   6C:  		Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
   84:  	Case  ==  00000001
   90:  		Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
   A8:  EndSwitch
   B0:  Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   D0:  Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   F0:  Call  SetPartScale  ( .Actor:Self 00000004 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
  110:  Call  SetPartScale  ( .Actor:Self 00000005 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
  130:  Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
  148:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
  160:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  17C:  Add   *Var1  00000005
  18C:  Call  ForceHomePos  ( .Actor:Self *Var0 *Var1 *Var2 )
  1A8:  Call  HPBarToHome   ( .Actor:Self )
  1B8:  Return
  1C0:  End
}

#new:Script $Script_Idle_8021B07C
{
    0:  Label  0
    C:  Call  MakeLerp      ( 00000000 0000000A 00000019 .Easing:CosInOut )
   28:  Label  1
   34:  Call  UpdateLerp ( )
   40:  Call  GetHomePos    ( .Actor:Self *Var2 *Var3 *Var4 )
   5C:  Add   *Var0  *Var3
   6C:  Call  SetActorPos   ( .Actor:Self *Var2 *Var0 *Var4 )
   88:  If  *Var1  ==  00000001
   98:  	Label  B
   A4:  	Wait  1`
   B0:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
   C4:  	If  *Var0  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
   D4:  		Goto  B
   E0:  	EndIf
   E8:  	Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
  100:  	If  *Var0  ==  00000001
  110:  		Goto  B
  11C:  	EndIf
  124:  	Goto  1
  130:  EndIf
  138:  Call  MakeLerp      ( 0000000A 00000000 00000019 .Easing:CosInOut )
  154:  Label  2
  160:  Call  UpdateLerp ( )
  16C:  Call  GetHomePos    ( .Actor:Self *Var2 *Var3 *Var4 )
  188:  Add   *Var0  *Var3
  198:  Call  SetActorPos   ( .Actor:Self *Var2 *Var0 *Var4 )
  1B4:  If  *Var1  ==  00000001
  1C4:  	Label  16
  1D0:  	Wait  1`
  1DC:  	Call  GetStatusFlags    ( .Actor:Self *Var0 )
  1F0:  	If  *Var0  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  200:  		Goto  16
  20C:  	EndIf
  214:  	Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
  22C:  	If  *Var0  ==  00000001
  23C:  		Goto  16
  248:  	EndIf
  250:  	Goto  2
  25C:  EndIf
  264:  Goto  0
  270:  Return
  278:  End
}

#new:Script $Script_8021B2FC
{
    0:  Call  SetAnimation  ( .Actor:Self 00000001 00460103 )
   18:  Call  SetGoalToHome ( .Actor:Self )
   28:  Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
   3C:  Thread
   44:  	Call  $Function_80218020 ( )
   50:  EndThread
   58:  Call  FlyToGoal     ( .Actor:Self  0`  1` .Easing:SinOut )
   74:  Call  SetAnimation  ( .Actor:Self 00000001 00460101 )
   8C:  Return
   94:  End
}

#new:Script $Script_8021B398
{
    0:  Call  EnemyCreateTargetList ( 00008002 )
   10:  Call  InitTargetIterator ( )
   1C:  Label  0
   28:  Call  GetOwnerTarget        ( *Var0 *Var5 )
   3C:  Call  GetIndexFromHome      ( *Var0 *Var5 )
   50:  Mod   *Var5  00000004
   60:  Switch  *Var5
   6C:  	Case  ==  00000000
   78:  		Set   *Flag[01]  .True
   88:  	Case  ==  00000001
   94:  		Set   *Flag[02]  .True
   A4:  	Case  ==  00000002
   B0:  		Set   *Flag[03]  .True
   C0:  	Case  ==  00000003
   CC:  		Set   *Flag[04]  .True
   DC:  EndSwitch
   E4:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
   F8:  If  *Var0  !=  FFFFFFFF
  108:  	Goto  0
  114:  EndIf
  11C:  If  *Flag[01]  ==  .False
  12C:  	Set   *VarA  00000000
  13C:  	Return
  144:  EndIf
  14C:  If  *Flag[02]  ==  .False
  15C:  	Set   *VarA  00000001
  16C:  	Return
  174:  EndIf
  17C:  If  *Flag[03]  ==  .False
  18C:  	Set   *VarA  00000002
  19C:  	Return
  1A4:  EndIf
  1AC:  If  *Flag[04]  ==  .False
  1BC:  	Set   *VarA  00000003
  1CC:  	Return
  1D4:  EndIf
  1DC:  Set   *VarA  FFFFFFFF
  1EC:  Return
  1F4:  End
}

#new:Vector3D $Vector3D_8021B594
{
	0` -1000` 0`
}

#new:SpecialFormation $SpecialFormation_8021B5A0
{
	$Ember $Vector3D_8021B594 00000000 00000000 00000000 00000000 00000000
}

#new:Script $Script_Split
{
    0:  Call  GetLastDamage ( .Actor:Self *Var0 )
   14:  If  *Var0  ==  00000000
   24:  	Return
   2C:  EndIf
   34:  Call  GetActorHP    ( .Actor:Self *Var0 )
   48:  If  *Var0  <=  00000000
   58:  	Return
   60:  EndIf
   68:  Call  GetLastElement    ( *Var0 )
   78:  If  *Var0  &  20000000
   88:  	Return
   90:  EndIf
   98:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
   B0:  If  *Var0  >=  00000002
   C0:  	Return
   C8:  EndIf
   D0:  ExecWait  $Script_8021B398
   DC:  Switch  *VarA
   E8:  	CaseOR  ==  00000000
   F4:  	CaseOR  ==  00000001
  100:  	CaseOR  ==  00000002
  10C:  	CaseOR  ==  00000003
  118:  		Call  SummonEnemy   ( $SpecialFormation_8021B5A0 00000000 )
  12C:  		Call  SetActorVar   ( *Var0 00000002 00000001 )
  144:  		Call  GetActorHP    ( .Actor:Self *VarB )
  158:  		Call  SetEnemyHP    ( *Var0 *VarB )
  16C:  		Call  GetActorPos   ( .Actor:Self *VarB *VarC *VarD )
  188:  		Call  SetActorPos   ( *Var0 *VarB *VarC *VarD )
  1A4:  		Call  SetGoalToIndex        ( *Var0 *VarA )
  1B8:  		Call  GetGoalPos    ( *Var0 *VarB *VarC *VarD )
  1D4:  		Call  SetHomePos    ( *Var0 *VarB *VarC *VarD )
  1F0:  		Call  SetActorJumpGravity   ( *Var0 *Fixed[1.2] )
  204:  		Call  JumpToGoal    ( *Var0  20` .False .True .False )
  224:  		Call  HPBarToHome   ( *Var0 )
  234:  		Call  GetActorVar   ( .Actor:Self 00000001 *Var1 )
  24C:  		Switch  *Var1
  258:  			Case  ==  00000000
  264:  				Call  SetActorVar   ( *Var0 00000001 00000001 )
  27C:  			Case  ==  00000001
  288:  				Call  SetActorVar   ( *Var0 00000001 00000002 )
  2A0:  		EndSwitch
  2A8:  		Call  SetActorVar   ( .Actor:Self 00000001 00000003 )
  2C0:  		Call  SetActorVar   ( *Var0 00000002 00000000 )
  2D8:  	EndCaseGroup
  2E0:  	Default
  2E8:  EndSwitch
  2F0:  Return
  2F8:  End
}

#new:Script $Script_HandleEvent_8021B8BC
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   3C:  Switch  *Var0
   48:  	CaseOR  ==  .Event:HitCombo % 9
   54:  	CaseOR  ==  .Event:Hit % A
   60:  		Exec  $Script_Split
   6C:  		SetConst  *Var0  00000001
   7C:  		SetConst  *Var1  00460107
   8C:  		ExecWait  DoNormalHit
   98:  	EndCaseGroup
   A0:  	Case  ==  .Event:BurnHit % E
   AC:  		Exec  $Script_Split
   B8:  		SetConst  *Var0  00000001
   C8:  		SetConst  *Var1  00460108
   D8:  		SetConst  *Var2  00460109
   E8:  		ExecWait  DoBurnHit
   F4:  	Case  ==  .Event:BurnDeath % 24
  100:  		SetConst  *Var0  00000001
  110:  		SetConst  *Var1  00460108
  120:  		SetConst  *Var2  00460109
  130:  		ExecWait  DoBurnHit
  13C:  		SetConst  *Var0  00000001
  14C:  		SetConst  *Var1  00460109
  15C:  		ExecWait  DoDeath
  168:  		Return
  170:  	Case  ==  .Event:SpinSmashHit % B
  17C:  		Exec  $Script_Split
  188:  		SetConst  *Var0  00000001
  198:  		SetConst  *Var1  00460107
  1A8:  		ExecWait  DoSpinSmashHit
  1B4:  	Case  ==  .Event:SpinSmashDeath % 21
  1C0:  		SetConst  *Var0  00000001
  1D0:  		SetConst  *Var1  00460107
  1E0:  		ExecWait  DoSpinSmashHit
  1EC:  		SetConst  *Var0  00000001
  1FC:  		SetConst  *Var1  00460107
  20C:  		ExecWait  DoDeath
  218:  		Return
  220:  	Case  ==  .Event:ShockHit % 2F
  22C:  		Call  PlaySoundAtActor  ( .Actor:Self 00000759 )
  240:  		SetConst  *Var0  00000001
  250:  		SetConst  *Var1  00460107
  260:  		ExecWait  DoShockHit
  26C:  		SetConst  *Var0  00000001
  27C:  		SetConst  *Var1  00460107
  28C:  		ExecWait  DoJumpBack
  298:  		ExecWait  $Script_8021B2FC
  2A4:  	Case  ==  .Event:ShockDeath % 26
  2B0:  		Call  PlaySoundAtActor  ( .Actor:Self 00000759 )
  2C4:  		SetConst  *Var0  00000001
  2D4:  		SetConst  *Var1  00460107
  2E4:  		ExecWait  DoShockHit
  2F0:  		SetConst  *Var0  00000001
  300:  		SetConst  *Var1  00460107
  310:  		ExecWait  DoDeath
  31C:  		Return
  324:  	CaseOR  ==  00000017 % 17
  330:  	CaseOR  ==  .Event:Immune % 19
  33C:  	CaseOR  ==  .Event:AirLiftFailed % 1F
  348:  	CaseOR  ==  .Event:BurnTaunt % 1C
  354:  		SetConst  *Var0  00000001
  364:  		SetConst  *Var1  00460101
  374:  		ExecWait  DoImmune
  380:  	EndCaseGroup
  388:  	Case  ==  .Event:Death % 20
  394:  		SetConst  *Var0  00000001
  3A4:  		SetConst  *Var1  00460107
  3B4:  		ExecWait  DoNormalHit
  3C0:  		SetConst  *Var0  00000001
  3D0:  		SetConst  *Var1  00460107
  3E0:  		ExecWait  DoDeath
  3EC:  		Return
  3F4:  	Case  ==  .Event:BeginFirstStrike % 38
  400:  		Call  SetActorPos       ( .Actor:Self  20`  0`  0` )
  41C:  		Call  HPBarToCurrent    ( .Actor:Self )
  42C:  	Case  ==  .Event:EndFirstStrike % 35
  438:  		ExecWait  $Script_8021B2FC
  444:  		Call  HPBarToHome   ( .Actor:Self )
  454:  	Case  ==  .Event:RecoverStatus % 31
  460:  		SetConst  *Var0  00000001
  470:  		SetConst  *Var1  00460101
  480:  		ExecWait  DoRecover
  48C:  	Case  ==  .Event:ScareAway % 39
  498:  		SetConst  *Var0  00000001
  4A8:  		SetConst  *Var1  00460103
  4B8:  		SetConst  *Var2  00460107
  4C8:  		ExecWait  DoScareAway
  4D4:  		Return
  4DC:  	Case  ==  .Event:BeginAirLift % 3A
  4E8:  		SetConst  *Var0  00000001
  4F8:  		SetConst  *Var1  00460103
  508:  		ExecWait  DoAirLift
  514:  	Case  ==  .Event:BlowAway % 16
  520:  		SetConst  *Var0  00000001
  530:  		SetConst  *Var1  00460103
  540:  		ExecWait  DoBlowAway
  54C:  		Return
  554:  	Case  ==  .Event:UpAndAway % 3D
  560:  	Default
  568:  EndSwitch
  570:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  584:  Call  UseIdleAnimation  ( .Actor:Self .True )
  598:  Return
  5A0:  End
}

#new:Script $Script_8021BE64
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  SetAnimation      ( .Actor:Self 00000001 00460103 )
   8C:  Call  SetGoalToTarget   ( .Actor:Self )
   9C:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   B8:  Add   *Var0  0000001E
   C8:  Set   *Var1  00000005
   D8:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   F4:  Call  SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
  108:  Thread
  110:  	Call  $Function_80218020 ( )
  11C:  EndThread
  124:  Call  FlyToGoal ( .Actor:Self  0`  0` .Easing:SinOut )
  140:  Call  SetAnimation      ( .Actor:Self 00000001 00460101 )
  158:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  17C:  Switch  *Var0
  188:  	CaseOR  ==  .HitResult:Miss % 6
  194:  	CaseOR  ==  .HitResult:Lucky % 5
  1A0:  		Set   *VarA  *Var0
  1B0:  		Call  SetAnimation  ( .Actor:Self 00000001 00460104 )
  1C8:  		Call  SetGoalToTarget       ( .Actor:Self )
  1D8:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  1F4:  		Sub   *Var0  00000014
  204:  		Set   *Var1  00000000
  214:  		Add   *Var2  00000001
  224:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.0] )
  238:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  254:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  274:  		If  *VarA  ==  .HitResult:Lucky % 5
  284:  			Call  EnemyTestTarget   ( .Actor:Self *VarA ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2A8:  		EndIf
  2B0:  		Sub   *Var0  0000001E
  2C0:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  2DC:  		Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  2FC:  		Sub   *Var0  00000014
  30C:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  328:  		Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
  348:  		Sub   *Var0  0000000A
  358:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  374:  		Call  JumpToGoal    ( .Actor:Self  3` .False .True .False )
  394:  		Wait  14`
  3A0:  		Call  UseBattleCamPreset    ( 00000002 )
  3B0:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  3CC:  		Call  SetActorYaw   ( .Actor:Self  180` )
  3E0:  		ExecWait  $Script_8021B2FC
  3EC:  		Call  SetActorYaw   ( .Actor:Self  0` )
  400:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  418:  		Call  EnableIdleScript      ( .Actor:Self FFFFFFFF )
  42C:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  440:  		Return
  448:  	EndCaseGroup
  450:  EndSwitch
  458:  Call  SetAnimation      ( .Actor:Self 00000001 00460104 )
  470:  Call  SetGoalToTarget   ( .Actor:Self )
  480:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  49C:  Add   *Var2  00000001
  4AC:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
  4C0:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  4DC:  Call  JumpToGoal        ( .Actor:Self  10` .False .True .False )
  4FC:  Wait  2`
  508:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000004 00000020 )
  530:  Switch  *Var0
  53C:  	CaseOR  ==  .HitResult:Hit % 0
  548:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  554:  		Call  UseBattleCamPreset    ( 00000002 )
  564:  		Set   *Var0  00000001
  574:  		Set   *Var1  00460104
  584:  		ExecWait  DoJumpBack
  590:  		Wait  5`
  59C:  		ExecWait  $Script_8021B2FC
  5A8:  	EndCaseGroup
  5B0:  EndSwitch
  5B8:  Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  5CC:  Call  UseIdleAnimation  ( .Actor:Self .True )
  5E0:  Return
  5E8:  End
}

#new:Script $Script_8021C454
{
    0:  Set   *Var6  00000002
   10:  Loop  00000004
   1C:  	Thread
   24:  		Call  GetStatusFlags    ( .Actor:Self *VarA )
   38:  		If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
   48:  			Call  SetPartScale  ( .Actor:Self *Var6 *Fixed[0.2] *Fixed[0.2] *Fixed[0.2] )
   68:  		Else
   70:  			Call  SetPartScale  ( .Actor:Self *Var6 *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
   90:  		EndIf
   98:  		Call  SetPartPos        ( .Actor:Self *Var6 *Var0 *Var1 *Var2 )
   B8:  		Call  SetPartFlagBits   ( .Actor:Self *Var6 00000001 .False )
   D4:  		Call  SetPartMoveSpeed  ( .Actor:Self *Var6 *Fixed[8.0] )
   EC:  		Call  SetPartJumpGravity    ( .Actor:Self *Var6 *Fixed[0.01] )
  104:  		Call  SetPartSounds     ( .Actor:Self *Var6 .ActorSound:Jump 000002D0 00000000 )
  124:  		Call  JumpPartTo        ( .Actor:Self *Var6 *Var3 *Var4 *Var5  0` .False )
  14C:  		Call  SetPartFlagBits   ( .Actor:Self *Var6 00000001 .True )
  168:  	EndThread
  170:  	Wait  3`
  17C:  	Add   *Var6  00000001
  18C:  EndLoop
  194:  Return
  19C:  End
}

#new:Script $Script_8021C5F8
{
    0:  Exec  $Script_8021C454
    C:  Call  GetDistanceToGoal ( .Actor:Self *Var0 )
   20:  DivF  *Var0  *Fixed[8.0]
   30:  Add   *Var0  00000001
   40:  Wait  *Var0
   4C:  Return
   54:  End
}

#new:Script $Script_8021C654
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Partner )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
   90:  Call  GetActorVar       ( .Actor:Self 00000000 *VarA )
   A8:  If  *VarA  ==  00000001
   B8:  	Add   *Var0  00000064
   C8:  	Set   *Var1  00000005
   D8:  Else
   E0:  	Add   *Var0  0000001E
   F0:  	Set   *Var1  00000032
  100:  EndIf
  108:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  124:  Call  SetAnimation  ( .Actor:Self 00000001 00460103 )
  13C:  Call  SetActorSpeed ( .Actor:Self *Fixed[6.0] )
  150:  Thread
  158:  	Call  $Function_80218020 ( )
  164:  EndThread
  16C:  Call  FlyToGoal     ( .Actor:Self  0`  -4` .Easing:SinOut )
  188:  Call  SetAnimation  ( .Actor:Self 00000001 00460101 )
  1A0:  Wait  10`
  1AC:  Call  SetAnimation  ( .Actor:Self 00000001 00460105 )
  1C4:  Wait  30`
  1D0:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  1F4:  Switch  *Var0
  200:  	CaseOR  ==  .HitResult:Miss % 6
  20C:  	CaseOR  ==  .HitResult:Lucky % 5
  218:  		Set   *VarA  *Var0
  228:  		Call  SetAnimation  ( .Actor:Self 00000001 00460106 )
  240:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  25C:  		Sub   *Var0  00000005
  26C:  		Add   *Var1  00000004
  27C:  		Add   *Var2  00000002
  28C:  		Call  SetGoalToTarget   ( .Actor:Self )
  29C:  		Call  GetGoalPos    ( .Actor:Self *Var3 *Var4 *Var5 )
  2B8:  		Sub   *Var3  00000064
  2C8:  		Add   *Var5  00000002
  2D8:  		ExecWait  $Script_8021C5F8
  2E4:  		If  *VarA  ==  00000005
  2F4:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  318:  		EndIf
  320:  		Wait  20`
  32C:  		Call  UseBattleCamPreset    ( 00000002 )
  33C:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  358:  		Call  SetActorYaw   ( .Actor:Self  180` )
  36C:  		ExecWait  $Script_8021B2FC
  378:  		Wait  20`
  384:  		Call  SetActorYaw   ( .Actor:Self  0` )
  398:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  3B0:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
  3C4:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  3D8:  		Return
  3E0:  	EndCaseGroup
  3E8:  EndSwitch
  3F0:  Call  SetAnimation      ( .Actor:Self 00000001 00460106 )
  408:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  424:  Sub   *Var0  00000005
  434:  Add   *Var1  00000004
  444:  Add   *Var2  00000002
  454:  Call  SetGoalToTarget   ( .Actor:Self )
  464:  Call  GetGoalPos        ( .Actor:Self *Var3 *Var4 *Var5 )
  480:  Sub   *Var4  00000006
  490:  Add   *Var5  00000002
  4A0:  ExecWait  $Script_8021C5F8
  4AC:  Wait  2`
  4B8:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Fire 00000000 00000000 00000003 00000020 )
  4E0:  Wait  20`
  4EC:  Switch  *Var0
  4F8:  	CaseOR  ==  .HitResult:Hit % 0
  504:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  510:  		Call  UseBattleCamPreset    ( 00000002 )
  520:  		ExecWait  $Script_8021B2FC
  52C:  	EndCaseGroup
  534:  EndSwitch
  53C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  550:  Call  UseIdleAnimation  ( .Actor:Self .True )
  564:  Return
  56C:  End
}

#new:Script $Script_8021CBC8
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  UseBattleCamPreset    ( 0000003F )
   4C:  Call  BattleCamTargetActor  ( .Actor:Self )
   5C:  Call  8024ECF8  ( FFFFFFFF 00000001 00000000 )
   74:  Call  SetAnimation      ( .Actor:Self 00000001 00460103 )
   8C:  Call  SetGoalToTarget   ( .Actor:Self )
   9C:  Call  AddGoalPos        ( .Actor:Self  30`  0`  0` )
   B8:  Call  SetActorSpeed     ( .Actor:Self *Fixed[5.0] )
   CC:  Thread
   D4:  	Call  $Function_80218020 ( )
   E0:  EndThread
   E8:  Call  FlyToGoal ( .Actor:Self  0`  -4` .Easing:SinOut )
  104:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  128:  Switch  *Var0
  134:  	CaseOR  ==  .HitResult:Miss % 6
  140:  	CaseOR  ==  .HitResult:Lucky % 5
  14C:  		Set   *VarA  *Var0
  15C:  		Wait  10`
  168:  		Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
  184:  		Call  PlaySoundAtActor  ( .Actor:Self 000002CF )
  198:  		Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  1AC:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  1C0:  		Call  SetAnimation  ( .Actor:Self 00000001 00460104 )
  1D8:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  1F4:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  210:  		Call  JumpToGoal    ( .Actor:Self  10` .False .False .False )
  230:  		Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
  244:  		Call  PlaySoundAtActor  ( .Actor:Self 000002EF )
  258:  		Call  SetGoalToTarget   ( .Actor:Self )
  268:  		Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  284:  		Sub   *Var0  0000001E
  294:  		Add   *Var2  00000002
  2A4:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  2C0:  		Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  2D4:  		Call  SetAnimation  ( .Actor:Self 00000001 00460104 )
  2EC:  		Call  FlyToGoal     ( .Actor:Self  0`  -10` .Easing:QuadraticOut )
  308:  		If  *VarA  ==  .HitResult:Lucky % 5
  318:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  33C:  		EndIf
  344:  		Wait  30`
  350:  		Call  UseBattleCamPreset    ( 00000002 )
  360:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  37C:  		Call  SetActorYaw   ( .Actor:Self  180` )
  390:  		ExecWait  $Script_8021B2FC
  39C:  		Call  SetActorYaw   ( .Actor:Self  0` )
  3B0:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  3C8:  		Call  EnableIdleScript      ( .Actor:Self FFFFFFFF )
  3DC:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  3F0:  		Return
  3F8:  	EndCaseGroup
  400:  EndSwitch
  408:  Wait  5`
  414:  Call  SetActorSounds    ( .Actor:Self .ActorSound:Jump 00000000 00000000 )
  430:  Call  PlaySoundAtActor  ( .Actor:Self 000002CF )
  444:  Call  SetActorSpeed ( .Actor:Self *Fixed[5.0] )
  458:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
  46C:  Call  SetAnimation  ( .Actor:Self 00000001 00460104 )
  484:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  4A0:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  4BC:  Call  JumpToGoal    ( .Actor:Self  10` .False .False .False )
  4DC:  Call  ResetActorSounds  ( .Actor:Self .ActorSound:Jump )
  4F0:  Set   *VarA  *Var0
  500:  Set   *VarB  *Var1
  510:  Set   *VarC  *Var2
  520:  Call  PlaySoundAtActor  ( .Actor:Self 000002EF )
  534:  Call  SetGoalToTarget   ( .Actor:Self )
  544:  Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  560:  Add   *Var2  00000002
  570:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  58C:  Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
  5A0:  Call  FlyToGoal     ( .Actor:Self  0`  -10` .Easing:QuadraticOut )
  5BC:  Wait  2`
  5C8:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:Fire 00000000 00000000 00000004 00000020 )
  5F0:  Switch  *Var0
  5FC:  	CaseOR  ==  .HitResult:Hit % 0
  608:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  614:  		Call  UseBattleCamPreset    ( 00000002 )
  624:  		Call  SetGoalPos    ( .Actor:Self *VarA *VarB *VarC )
  640:  		Call  FlyToGoal ( .Actor:Self  0`  -10` .Easing:Linear )
  65C:  		Wait  20`
  668:  		ExecWait  $Script_8021B2FC
  674:  	EndCaseGroup
  67C:  EndSwitch
  684:  Call  EnableIdleScript  ( .Actor:Self FFFFFFFF )
  698:  Call  UseIdleAnimation  ( .Actor:Self .True )
  6AC:  Return
  6B4:  End
}

#new:Script $Script_TakeTurn_8021D284
{
    0:  Call  GetBattlePhase    ( *Var0 )
   10:  If  *Var0  ==  00000001
   20:  	Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   38:  	Switch  *Var0
   44:  		Case  ==  00000001
   50:  			ExecWait  $Script_8021BE64
   5C:  		Case  ==  00000000
   68:  			ExecWait  $Script_8021CBC8
   74:  	EndSwitch
   7C:  	Return
   84:  EndIf
   8C:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   A4:  Switch  *Var0
   B0:  	Case  ==  00000001
   BC:  		Call  GetStatusFlags    ( .Actor:Partner *Var0 )
   D0:  		If  *Var0  &  ~Flags:StatusFlags:KO % 1000000
   E0:  			ExecWait  $Script_8021BE64
   EC:  		Else
   F4:  			Call  RandInt   ( 000003E8 *Var0 )
  108:  			If  *Var0  <=  0000012C
  118:  				ExecWait  $Script_8021C654
  124:  			Else
  12C:  				ExecWait  $Script_8021BE64
  138:  			EndIf
  140:  		EndIf
  148:  	Case  ==  00000000
  154:  		Call  GetStatusFlags    ( .Actor:Partner *Var0 )
  168:  		If  *Var0  &  ~Flags:StatusFlags:KO % 1000000
  178:  			ExecWait  $Script_8021CBC8
  184:  		Else
  18C:  			Call  RandInt   ( 000003E8 *Var0 )
  1A0:  			If  *Var0  <=  0000012C
  1B0:  				ExecWait  $Script_8021C654
  1BC:  			Else
  1C4:  				ExecWait  $Script_8021CBC8
  1D0:  			EndIf
  1D8:  		EndIf
  1E0:  EndSwitch
  1E8:  Return
  1F0:  End
}

PADDING: 8021D47C to 8021D480 (0048452C to 00484530)
00000000

% Origin: HINT
#new:DefenseTable $DefenseTable_8021D480
{
	.Element:Normal 00000000
	.Element:End
}

#new:DefenseTable $DefenseTable_8021D48C
{
	.Element:Normal 00000000
	.Element:End
}

% Origin: HINT
#new:StatusTable $StatusTable_8021D498
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep     100`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy      50`
	.Status:Fear        0`
	.Status:Static     50`
	.Status:Paralyze  100`
	.Status:Shrink    100`
	.Status:Stop      100`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

#new:StatusTable $StatusTable_8021D544
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep     100`
	.Status:Poison     50`
	.Status:Frozen      0`
	.Status:Dizzy     100`
	.Status:Fear        0`
	.Status:Static     50`
	.Status:Paralyze  100`
	.Status:Shrink    100`
	.Status:Stop      100`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

% Origin: HINT
#new:PartsTable $PartsTable_8021D5F0
{
	00800000 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_8021D480 00000000 00000000 FBF40000 00000000
}

#new:PartsTable $PartsTable_8021D614
{
	00020001 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_8021D48C 00000000 00000000 FBF40000 00000000
	00800000 02000000 F62300FF $IdleAnimations_8021D71C $DefenseTable_8021D48C 00000000 00000000 00F80000 00000000
	00020001 03000000 000000FF $IdleAnimations_8021D768 $DefenseTable_8021D48C 00000000 00000000 00000000 00000000
}

% Origin: HINT
#new:Actor $Magikoopa
{
	% stats
	[Index]        95b
	[Level]        32`b
	[MaxHP]         8`b
	[Coins]         0`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8021D498
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_8021D5F0
	[Script]      $Script_Init_8021E100
	% move effectiveness
	[Escape]        0`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce] 100`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         36`b  40`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:Actor $FlyingMagikoopa
{
	% stats
	[Index]        96b
	[Level]        32`b
	[MaxHP]         8`b
	[Coins]         0`b
	[Flags]       00000200
	[StatusTable] $StatusTable_8021D544
	% ai
	[PartsCount]    3`s
	[PartsTable]  $PartsTable_8021D614
	[Script]      $Script_Init_8021E2C0
	% move effectiveness
	[Escape]        0`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce] 100`b
	[SpinSmash]     4`b % weight (0-4)
	% ui positions
	[Size]         48`b  40`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

% Origin: HINT
#new:IdleAnimations $IdleAnimations_8021D6D0
{
	.Status:Normal    00560001
	.Status:Stone     00560000
	.Status:Sleep     00560008
	.Status:Poison    00560001
	.Status:Stop      00560000
	.Status:Static    00560001
	.Status:Paralyze  00560000
	.Status:Dizzy     00560007
	.Status:Fear      00560007
	.Status:End
}

#new:IdleAnimations $IdleAnimations_8021D71C
{
	.Status:Normal    00570001
	.Status:Stone     00570000
	.Status:Sleep     00570008
	.Status:Poison    00570001
	.Status:Stop      00570000
	.Status:Static    00570001
	.Status:Paralyze  00570000
	.Status:Dizzy     00570007
	.Status:Fear      00570007
	.Status:End
}

#new:IdleAnimations $IdleAnimations_8021D768
{
	.Status:Normal    0057000A
	.Status:End
}

% Origin: HINT
#new:Script $Script_Idle_8021D774
{
    0:  Return
    8:  End
}

#new:Script $Script_8021D784
{
    0:  Call  GetBattleFlags    ( *Var0 )
   10:  If  *Var0  !&  00080000
   20:  	If  *Var0  &  00000240
   30:  		Call  SetActorVar   ( .Actor:Self 00000002 00000001 )
   48:  	EndIf
   50:  Else
   58:  	Call  $Function_802182A8    ( *Var0 )
   68:  	Switch  *Var0
   74:  		CaseOR  ==  00000083
   80:  		CaseOR  ==  00000084
   8C:  		CaseOR  ==  00000085
   98:  		CaseOR  ==  00000088
   A4:  			Call  GetBattleFlags    ( *Var0 )
   B4:  			If  *Var0  &  00000240
   C4:  				Call  SetActorVar   ( .Actor:Self 00000002 00000001 )
   DC:  			EndIf
   E4:  		EndCaseGroup
   EC:  	EndSwitch
   F4:  EndIf
   FC:  Return
  104:  End
}

#new:Script $Script_8021D890
{
    0:  Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
   18:  If  *Var0  ==  00000001
   28:  	Call  SetAnimation  ( .Actor:Self 00000001 00560004 )
   40:  	Goto  0
   4C:  EndIf
   54:  Call  GetLastElement    ( *Var0 )
   64:  If  *Var0  &  00000400
   74:  	Call  SetAnimation  ( .Actor:Self 00000001 00560004 )
   8C:  	Goto  0
   98:  EndIf
   A0:  Return
   A8:  Label  0
   B4:  Call  8027D32C  ( FFFFFF81 )
   C4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
   D8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
   E8:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
  108:  EndIf
  110:  Call  SetPartFlagBits   ( .Actor:Self 00000001 00800000 .True )
  12C:  Call  SetPartFlagBits   ( .Actor:Self 00000001 00020001 .False )
  148:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00020001 .True )
  164:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00800000 .False )
  180:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00100000 .True )
  19C:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  1B8:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  1D4:  Sub   *Var2  00000001
  1E4:  Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  204:  Call  PlaySoundAtActor  ( .Actor:Self 00000301 )
  218:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  234:  Set   *Var1  00000000
  244:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.8] )
  258:  Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  274:  Call  JumpToGoal        ( .Actor:Self  15` .False .True .False )
  294:  Call  $Function_802183A0    ( 00000096 0000000A )
  2A8:  Thread
  2B0:  	Call  ShakeCam  ( .Cam:Battle 00000000  5` *Fixed[0.7] )
  2CC:  EndThread
  2D4:  Call  GetLastEvent  ( .Actor:Self *Var3 )
  2E8:  If  *Var3  ==  0000000F % F
  2F8:  	Call  SetAnimation  ( .Actor:Self 00000001 00560004 )
  310:  	Call  GetActorPos   ( .Actor:Self *Var3 *Var4 *Var5 )
  32C:  	Add   *Var4  0000000A
  33C:  	Add   *Var5  00000005
  34C:  	Call  PlayEffect    ( ~FX:SmokeBurst:Black *Var3 *Var4 *Var5 *Fixed[1.0] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  390:  EndIf
  398:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  3B4:  Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
  3D4:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  3F0:  Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
  410:  Loop  00000014
  41C:  	Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  438:  	Wait  1`
  444:  	Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  460:  	Wait  1`
  46C:  EndLoop
  474:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  490:  Call  SetAnimation      ( .Actor:Self 00000001 00560001 )
  4A8:  Call  SetActorFlagBits  ( .Actor:Self 00000200 .False )
  4C0:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021E6D8 )
  4D4:  Call  SetActorType      ( .Actor:Self 00000095 )
  4E8:  Call  SetStatusTable    ( .Actor:Self $StatusTable_8021D498 )
  4FC:  Call  $Function_802182D4    ( FFFFFFF6 00000014 0000000A 00000020 )
  518:  Call  SetActorFlagBits  ( .Actor:Self 00001000 .True )
  530:  Call  ResetAllActorSounds   ( .Actor:Self )
  540:  Call  GetIndexFromPos   ( .Actor:Self *Var0 )
  554:  Mod   *Var0  00000004
  564:  Call  SetGoalToIndex    ( .Actor:Self *Var0 )
  578:  Call  SetActorSpeed     ( .Actor:Self *Fixed[4.0] )
  58C:  Call  RunToGoal ( .Actor:Self  0` .False )
  5A4:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  5C0:  Call  ForceHomePos      ( .Actor:Self *Var0 *Var1 *Var2 )
  5DC:  Call  HPBarToHome       ( .Actor:Self )
  5EC:  Return
  5F4:  End
}

% Origin: HINT
#new:Script $Script_RunAway
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  8027D32C  ( FFFFFF81 )
   38:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   4C:  If  *Var0  !=  .Event:ScareAway % 39
   5C:  	Call  UseBattleCamPreset    ( 0000000E )
   6C:  	Call  BattleCamTargetActor  ( .Actor:Self )
   7C:  	Call  MoveBattleCamOver     (  15` )
   8C:  	Wait  15`
   98:  	Call  UseBattleCamPreset    ( 00000001 )
   A8:  EndIf
   B0:  Call  SetActorSpeed ( .Actor:Self *Fixed[1.0] )
   C4:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
   E0:  Add   *Var0  00000014
   F0:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  10C:  Call  RunToGoal     ( .Actor:Self  0` .False )
  124:  Wait  10`
  130:  Call  SetActorYaw   ( .Actor:Self  180` )
  144:  Call  EnableActorBlur       ( .Actor:Self 00000001 )
  158:  Call  SetActorSpeed ( .Actor:Self *Fixed[10.0] )
  16C:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  188:  Add   *Var0  000000C8
  198:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  1B4:  Call  RunToGoal     ( .Actor:Self  0` .False )
  1CC:  Call  YieldTurn ( )
  1D8:  Call  UseBattleCamPreset    ( 00000002 )
  1E8:  ExecWait  ForceNextTarget
  1F4:  Call  8027D32C      ( FFFFFF81 )
  204:  Call  RemoveActor   ( .Actor:Self )
  214:  Return
  21C:  End
}

% Origin: HINT
#new:Script $Script_NextTurn_8021E0B0
{
    0:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   18:  ConstAND  *Var0 FFFFFFFE
   28:  Call  SetActorVar   ( .Actor:Self 00000000 *Var0 )
   40:  Return
   48:  End
}

% Origin: HINT
#new:Script $Script_Init_8021E100
{
    0:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021D774 )
   14:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80223B24 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021E6D8 )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8021E0B0 )
   50:  Call  GetBattleVar  ( 00000002 *Var0 )
   64:  If  *Var0  ==  00000000
   74:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
   88:  EndIf
   90:  Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
   A8:  Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
   C0:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
   D8:  Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
   F0:  Call  SetActorVar   ( .Actor:Self 00000004 00000000 )
  108:  Call  SetActorVar   ( .Actor:Self 00000005 00000000 )
  120:  Call  SetActorVar   ( .Actor:Self 00000006 00000000 )
  138:  Call  SetActorVar   ( .Actor:Self 00000007 00000000 )
  150:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  168:  Call  SetActorVar   ( .Actor:Self 00000009 FFFFFFFF )
  180:  Call  SetActorVar   ( .Actor:Self 0000000A 00000000 )
  198:  Call  SetActorVar   ( .Actor:Self 0000000B FFFFFFFF )
  1B0:  Return
  1B8:  End
}

#new:Script $Script_Init_8021E2C0
{
    0:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021D774 )
   14:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_80223B24 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021EDF0 )
   3C:  Call  GetBattleVar  ( 00000002 *Var0 )
   50:  If  *Var0  ==  00000000
   60:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
   74:  EndIf
   7C:  Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
   94:  Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
   AC:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
   C4:  Call  SetActorVar   ( .Actor:Self 00000003 00000000 )
   DC:  Call  SetActorVar   ( .Actor:Self 00000004 00000000 )
   F4:  Call  SetActorVar   ( .Actor:Self 00000005 00000000 )
  10C:  Call  SetActorVar   ( .Actor:Self 00000006 00000000 )
  124:  Call  SetActorVar   ( .Actor:Self 00000007 00000000 )
  13C:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
  154:  Call  SetActorVar   ( .Actor:Self 00000009 FFFFFFFF )
  16C:  Call  SetActorVar   ( .Actor:Self 0000000A 00000000 )
  184:  Call  SetActorVar   ( .Actor:Self 0000000B FFFFFFFF )
  19C:  Return
  1A4:  End
}

% Origin: HINT
#new:Script $Script_8021E46C
{
    0:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
   18:  If  *Var0  ==  00000001
   28:  	Return
   30:  EndIf
   38:  Call  GetActorVar   ( .Actor:Self 00000009 *Var0 )
   50:  Call  ActorExists   ( *Var0 *Var1 )
   64:  If  *Var1  ==  .False
   74:  	Return
   7C:  EndIf
   84:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
   9C:  Call  GetLastElement    ( *VarA )
   AC:  If  *VarA  &  20000000
   BC:  	Label  0
   C8:  	Call  GetBattleFlags    ( *VarA )
   D8:  	If  *VarA  &  00000100
   E8:  		Wait  1`
   F4:  		Goto  0
  100:  	EndIf
  108:  EndIf
  110:  Call  GetActorVar   ( .Actor:Self 00000009 *Var0 )
  128:  Call  SetActorVar   ( .Actor:Self 00000009 FFFFFFFF )
  140:  Call  GetActorFlags ( .Actor:Self *VarA )
  154:  If  *VarA  &  00000200
  164:  	Call  SetPartEventBits  ( .Actor:Self 00000002 00400000 .False )
  180:  Else
  188:  	Call  SetPartEventBits  ( .Actor:Self 00000001 00400000 .False )
  1A4:  EndIf
  1AC:  Call  GetActorPos   ( *Var0 *Var1 *Var2 *Var3 )
  1C8:  Call  RemoveActor   ( *Var0 )
  1D8:  Thread
  1E0:  	Add   *Var3  00000002
  1F0:  	Loop  00000002
  1FC:  		Call  PlayEffect    ( ~FX:BigSmokePuff *Var1 *Var2 *Var3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  240:  		Wait  2`
  24C:  	EndLoop
  254:  EndThread
  25C:  Return
  264:  End
}

% Origin: HINT
#new:Script $Script_HandleEvent_8021E6D8
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetPartAlpha      ( .Actor:Self 00000001 000000FF )
   40:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   54:  Switch  *Var0
   60:  	Case  ==  .Event:HitCombo % 9
   6C:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   84:  		ConstOR  *Var0 00000001
   94:  		Call  SetActorVar   ( .Actor:Self 00000000 *Var0 )
   AC:  		SetConst  *Var0  00000001
   BC:  		SetConst  *Var1  00560004
   CC:  		ExecWait  DoNormalHit
   D8:  	CaseOR  ==  .Event:Hit % A
   E4:  	CaseOR  ==  .Event:UpAndAway % 3D
   F0:  		SetConst  *Var0  00000001
  100:  		SetConst  *Var1  00560004
  110:  		ExecWait  DoNormalHit
  11C:  		ExecWait  $Script_8021E46C
  128:  	EndCaseGroup
  130:  	Case  ==  .Event:BurnHit % E
  13C:  		SetConst  *Var0  00000001
  14C:  		SetConst  *Var1  00560005
  15C:  		SetConst  *Var2  00560006
  16C:  		ExecWait  DoBurnHit
  178:  		ExecWait  $Script_8021E46C
  184:  	Case  ==  .Event:BurnDeath % 24
  190:  		SetConst  *Var0  00000001
  1A0:  		SetConst  *Var1  00560005
  1B0:  		SetConst  *Var2  00560006
  1C0:  		ExecWait  DoBurnHit
  1CC:  		ExecWait  $Script_8021E46C
  1D8:  		SetConst  *Var0  00000001
  1E8:  		SetConst  *Var1  00560006
  1F8:  		ExecWait  DoDeath
  204:  		Return
  20C:  	Case  ==  .Event:SpinSmashHit % B
  218:  		SetConst  *Var0  00000001
  228:  		SetConst  *Var1  00560004
  238:  		ExecWait  DoSpinSmashHit
  244:  		ExecWait  $Script_8021E46C
  250:  	Case  ==  .Event:SpinSmashDeath % 21
  25C:  		SetConst  *Var0  00000001
  26C:  		SetConst  *Var1  00560004
  27C:  		ExecWait  DoSpinSmashHit
  288:  		ExecWait  $Script_8021E46C
  294:  		SetConst  *Var0  00000001
  2A4:  		SetConst  *Var1  00560004
  2B4:  		ExecWait  DoDeath
  2C0:  		Return
  2C8:  	Case  ==  00000017 % 17
  2D4:  		SetConst  *Var0  00000001
  2E4:  		SetConst  *Var1  00560001
  2F4:  		ExecWait  DoImmune
  300:  	Case  ==  .Event:Immune % 19
  30C:  		SetConst  *Var0  00000001
  31C:  		SetConst  *Var1  00560001
  32C:  		ExecWait  DoImmune
  338:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
  350:  		If  *Var0  &  00000001
  360:  			ExecWait  $Script_8021E46C
  36C:  			Return
  374:  		EndIf
  37C:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  390:  		If  *Var0  !=  ~Flags:StatusFlags:0 % 0
  3A0:  			ExecWait  $Script_8021E46C
  3AC:  		EndIf
  3B4:  	Case  ==  .Event:Death % 20
  3C0:  		SetConst  *Var0  00000001
  3D0:  		SetConst  *Var1  00560004
  3E0:  		ExecWait  DoNormalHit
  3EC:  		ExecWait  $Script_8021E46C
  3F8:  		Wait  10`
  404:  		SetConst  *Var0  00000001
  414:  		SetConst  *Var1  00560004
  424:  		ExecWait  DoDeath
  430:  		Return
  438:  	Case  ==  .Event:RecoverStatus % 31
  444:  		SetConst  *Var0  00000001
  454:  		SetConst  *Var1  00560001
  464:  		ExecWait  DoRecover
  470:  	Case  ==  .Event:ScareAway % 39
  47C:  		ExecWait  $Script_8021E46C
  488:  		Call  SetAnimation  ( .Actor:Self 00000001 00560004 )
  4A0:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
  4B4:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  4D0:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  4EC:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  50C:  		Wait  15`
  518:  		Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  530:  		ExecWait  $Script_RunAway
  53C:  		Return
  544:  	Case  ==  .Event:BeginAirLift % 3A
  550:  		SetConst  *Var0  00000001
  560:  		SetConst  *Var1  00560002
  570:  		ExecWait  DoAirLift
  57C:  	Case  ==  .Event:BlowAway % 16
  588:  		ExecWait  $Script_8021E46C
  594:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  5A8:  		If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  5B8:  			If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  5C8:  				Call  SetPartDispOffset ( .Actor:Self 00000001 00000000 00000002 00000000 )
  5E8:  			Else
  5F0:  				Call  SetPartDispOffset ( .Actor:Self 00000001 FFFFFFFC 00000005 00000000 )
  610:  			EndIf
  618:  		EndIf
  620:  		SetConst  *Var0  00000001
  630:  		SetConst  *Var1  00560004
  640:  		ExecWait  DoBlowAway
  64C:  		Return
  654:  	Case  ==  .Event:AirLiftFailed % 1F
  660:  		SetConst  *Var0  00000001
  670:  		SetConst  *Var1  00560001
  680:  		ExecWait  DoImmune
  68C:  	Case  ==  .Event:StarBeam % 13
  698:  		SetConst  *Var0  00000001
  6A8:  		SetConst  *Var1  00560004
  6B8:  		ExecWait  DoNormalHit
  6C4:  		ExecWait  $Script_8021E46C
  6D0:  	Default
  6D8:  EndSwitch
  6E0:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  6F4:  Call  UseIdleAnimation  ( .Actor:Self .True )
  708:  Return
  710:  End
}

#new:Script $Script_HandleEvent_8021EDF0
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetPartAlpha      ( .Actor:Self 00000002 000000FF )
   40:  Call  GetLastEvent      ( .Actor:Self *Var0 )
   54:  Switch  *Var0
   60:  	Case  ==  .Event:HitCombo % 9
   6C:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   84:  		ConstOR  *Var0 00000001
   94:  		Call  SetActorVar   ( .Actor:Self 00000000 *Var0 )
   AC:  		ExecWait  $Script_8021D784
   B8:  		SetConst  *Var0  00000002
   C8:  		SetConst  *Var1  00570004
   D8:  		ExecWait  DoNormalHit
   E4:  	CaseOR  ==  .Event:Hit % A
   F0:  	CaseOR  ==  .Event:FallTrigger % C
   FC:  		ExecWait  $Script_8021D784
  108:  		SetConst  *Var0  00000002
  118:  		SetConst  *Var1  00570004
  128:  		ExecWait  DoNormalHit
  134:  		ExecWait  $Script_8021E46C
  140:  		ExecWait  $Script_8021D890
  14C:  	EndCaseGroup
  154:  	Case  ==  .Event:UpAndAway % 3D
  160:  		SetConst  *Var0  00000002
  170:  		SetConst  *Var1  00570004
  180:  		ExecWait  DoNormalHit
  18C:  		ExecWait  $Script_8021E46C
  198:  	CaseOR  ==  .Event:BurnHit % E
  1A4:  	CaseOR  ==  0000000F % F
  1B0:  		ExecWait  $Script_8021D784
  1BC:  		SetConst  *Var0  00000002
  1CC:  		SetConst  *Var1  00570005
  1DC:  		SetConst  *Var2  00570006
  1EC:  		ExecWait  DoBurnHit
  1F8:  		ExecWait  $Script_8021E46C
  204:  		ExecWait  $Script_8021D890
  210:  	EndCaseGroup
  218:  	Case  ==  .Event:BurnDeath % 24
  224:  		SetConst  *Var0  00000002
  234:  		SetConst  *Var1  00570005
  244:  		SetConst  *Var2  00570006
  254:  		ExecWait  DoBurnHit
  260:  		ExecWait  $Script_8021E46C
  26C:  		SetConst  *Var0  00000002
  27C:  		SetConst  *Var1  00570006
  28C:  		ExecWait  DoDeath
  298:  		Return
  2A0:  	Case  ==  .Event:SpinSmashHit % B
  2AC:  		SetConst  *Var0  00000002
  2BC:  		SetConst  *Var1  00570004
  2CC:  		ExecWait  DoSpinSmashHit
  2D8:  		ExecWait  $Script_8021E46C
  2E4:  	Case  ==  .Event:SpinSmashDeath % 21
  2F0:  		SetConst  *Var0  00000002
  300:  		SetConst  *Var1  00570004
  310:  		ExecWait  DoSpinSmashHit
  31C:  		ExecWait  $Script_8021E46C
  328:  		SetConst  *Var0  00000002
  338:  		SetConst  *Var1  00570004
  348:  		ExecWait  DoDeath
  354:  		Return
  35C:  	Case  ==  00000017 % 17
  368:  		SetConst  *Var0  00000002
  378:  		SetConst  *Var1  00570001
  388:  		ExecWait  DoImmune
  394:  	Case  ==  .Event:Immune % 19
  3A0:  		SetConst  *Var0  00000002
  3B0:  		SetConst  *Var1  00570001
  3C0:  		ExecWait  DoImmune
  3CC:  		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
  3E4:  		If  *Var0  &  00000001
  3F4:  			ExecWait  $Script_8021E46C
  400:  			Return
  408:  		EndIf
  410:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  424:  		If  *Var0  !=  ~Flags:StatusFlags:0 % 0
  434:  			ExecWait  $Script_8021E46C
  440:  		EndIf
  448:  	Case  ==  .Event:Death % 20
  454:  		SetConst  *Var0  00000002
  464:  		SetConst  *Var1  00570004
  474:  		ExecWait  DoNormalHit
  480:  		ExecWait  $Script_8021E46C
  48C:  		Wait  10`
  498:  		SetConst  *Var0  00000002
  4A8:  		SetConst  *Var1  00570004
  4B8:  		ExecWait  DoDeath
  4C4:  		Return
  4CC:  	Case  ==  .Event:BeginFirstStrike % 38
  4D8:  		Call  SetActorPos       ( .Actor:Self  20`  0`  0` )
  4F4:  		Call  HPBarToCurrent    ( .Actor:Self )
  504:  	Case  ==  .Event:EndFirstStrike % 35
  510:  		Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  528:  		Call  SetGoalToHome ( .Actor:Self )
  538:  		Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
  54C:  		Call  FlyToGoal     ( .Actor:Self  0`  1` .Easing:Linear )
  568:  		Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  580:  		Call  HPBarToHome   ( .Actor:Self )
  590:  	Case  ==  .Event:RecoverStatus % 31
  59C:  		SetConst  *Var0  00000002
  5AC:  		SetConst  *Var1  00570001
  5BC:  		ExecWait  DoRecover
  5C8:  	Case  ==  .Event:ScareAway % 39
  5D4:  		ExecWait  $Script_8021E46C
  5E0:  		Call  SetAnimation  ( .Actor:Self 00000002 00570004 )
  5F8:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
  60C:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  628:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  644:  		Call  JumpToGoal    ( .Actor:Self  15` .False .True .False )
  664:  		Wait  15`
  670:  		Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  688:  		ExecWait  $Script_RunAway
  694:  		Return
  69C:  	Case  ==  .Event:BeginAirLift % 3A
  6A8:  		SetConst  *Var0  00000002
  6B8:  		SetConst  *Var1  00570002
  6C8:  		ExecWait  DoAirLift
  6D4:  	Case  ==  .Event:BlowAway % 16
  6E0:  		ExecWait  $Script_8021E46C
  6EC:  		Call  GetStatusFlags    ( .Actor:Self *Var0 )
  700:  		If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
  710:  			If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  720:  				Call  SetPartDispOffset ( .Actor:Self 00000002 FFFFFFFD 00000000 00000000 )
  740:  			Else
  748:  				Call  SetPartDispOffset ( .Actor:Self 00000002 FFFFFFF1 00000000 00000000 )
  768:  			EndIf
  770:  		EndIf
  778:  		SetConst  *Var0  00000002
  788:  		SetConst  *Var1  00570004
  798:  		ExecWait  DoBlowAway
  7A4:  		Return
  7AC:  	Case  ==  .Event:AirLiftFailed % 1F
  7B8:  		SetConst  *Var0  00000002
  7C8:  		SetConst  *Var1  00570001
  7D8:  		ExecWait  DoImmune
  7E4:  	Case  ==  .Event:StarBeam % 13
  7F0:  		SetConst  *Var0  00000002
  800:  		SetConst  *Var1  00570004
  810:  		ExecWait  DoNormalHit
  81C:  		ExecWait  $Script_8021E46C
  828:  	Default
  830:  EndSwitch
  838:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  84C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  860:  Return
  868:  End
}

% Origin: HINT
#new:Script $Script_HealOne
{
    0:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
   18:  Call  SetActorVar       ( .Actor:Self 0000000B 00000000 )
   30:  Call  AddActorVar       ( .Actor:Self 00000004 00000001 )
   48:  Call  UseIdleAnimation  ( .Actor:Self .False )
   5C:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   70:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   84:  Call  UseBattleCamPreset    ( 0000000E )
   94:  Call  BattleCamTargetActor  ( .Actor:Self )
   A4:  Call  MoveBattleCamOver (  15` )
   B4:  Wait  15`
   C0:  Call  GetActorFlags     ( .Actor:Self *Var0 )
   D4:  If  *Var0  !&  00000200
   E4:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
   FC:  Else
  104:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  11C:  EndIf
  124:  Wait  5`
  130:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  144:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  158:  If  *Var0  !&  00000200
  168:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  184:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  198:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  1A8:  		Sub   *Var0  00000006
  1B8:  		Add   *Var1  0000000C
  1C8:  		Sub   *Var2  00000002
  1D8:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  21C:  	Else
  224:  		Sub   *Var0  00000010
  234:  		Add   *Var1  0000001F
  244:  		Sub   *Var2  00000002
  254:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  298:  	EndIf
  2A0:  Else
  2A8:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  2C4:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  2D8:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  2E8:  		Sub   *Var0  0000000C
  2F8:  		Add   *Var1  0000000E
  308:  		Sub   *Var2  00000002
  318:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  35C:  	Else
  364:  		Sub   *Var0  0000001E
  374:  		Add   *Var1  00000024
  384:  		Sub   *Var2  00000002
  394:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  3D8:  	EndIf
  3E0:  EndIf
  3E8:  Wait  30`
  3F4:  Call  GetActorFlags ( .Actor:Self *Var0 )
  408:  If  *Var0  !&  00000200
  418:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  430:  Else
  438:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  450:  EndIf
  458:  Wait  5`
  464:  Thread
  46C:  	Wait  5`
  478:  	Call  PlaySoundAtActor  ( *VarB 0000206D )
  48C:  	Call  PlaySoundAtActor  ( *VarB 00000214 )
  4A0:  	Wait  30`
  4AC:  	Call  PlaySoundAtActor  ( *VarB 0000025C )
  4C0:  EndThread
  4C8:  Thread
  4D0:  	Call  8026BF48  ( 00000001 )
  4E0:  	Call  HealActor ( *VarB 00000000 .False )
  4F8:  	Call  8026BF48  ( 00000000 )
  508:  EndThread
  510:  Call  WaitForBuffDone ( )
  51C:  Call  UseBattleCamPreset    ( 00000002 )
  52C:  Call  MoveBattleCamOver (  10` )
  53C:  Wait  10`
  548:  Call  YieldTurn ( )
  554:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  568:  Call  UseIdleAnimation  ( .Actor:Self .True )
  57C:  Return
  584:  End
}

% Origin: HINT
#new:Script $Script_HealAll
{
    0:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
   18:  Call  SetActorVar       ( .Actor:Self 0000000B 00000001 )
   30:  Call  AddActorVar       ( .Actor:Self 00000003 00000001 )
   48:  Call  UseIdleAnimation  ( .Actor:Self .False )
   5C:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   70:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   84:  Call  UseBattleCamPreset    ( 0000000E )
   94:  Call  BattleCamTargetActor  ( .Actor:Self )
   A4:  Call  MoveBattleCamOver (  15` )
   B4:  Wait  15`
   C0:  Call  GetActorFlags     ( .Actor:Self *Var0 )
   D4:  If  *Var0  !&  00000200
   E4:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
   FC:  Else
  104:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  11C:  EndIf
  124:  Wait  5`
  130:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  144:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  158:  If  *Var0  !&  00000200
  168:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  184:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  198:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  1A8:  		Sub   *Var0  00000006
  1B8:  		Add   *Var1  0000000C
  1C8:  		Sub   *Var2  00000002
  1D8:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  21C:  	Else
  224:  		Sub   *Var0  00000010
  234:  		Add   *Var1  0000001F
  244:  		Sub   *Var2  00000002
  254:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  298:  	EndIf
  2A0:  Else
  2A8:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  2C4:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  2D8:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  2E8:  		Sub   *Var0  0000000C
  2F8:  		Add   *Var1  0000000E
  308:  		Sub   *Var2  00000002
  318:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  35C:  	Else
  364:  		Sub   *Var0  0000001E
  374:  		Add   *Var1  00000024
  384:  		Sub   *Var2  00000002
  394:  		Call  PlayEffect    ( ~FX:RadialFlowOut:RedEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  3D8:  	EndIf
  3E0:  EndIf
  3E8:  Wait  30`
  3F4:  Call  GetActorFlags ( .Actor:Self *Var0 )
  408:  If  *Var0  !&  00000200
  418:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  430:  Else
  438:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  450:  EndIf
  458:  Wait  5`
  464:  Call  EnemyCreateTargetList ( 00008002 )
  474:  Call  InitTargetIterator ( )
  480:  Label  0
  48C:  Set   *Flag[00]  .False
  49C:  Call  GetOwnerTarget        ( *Var0 *Var1 )
  4B0:  Call  GetOriginalActorType  ( *Var0 *Var1 )
  4C4:  If  *Var1  ==  00000047
  4D4:  	Call  GetActorVar   ( *Var0 00000008 *Var1 )
  4EC:  	If  *Var1  ==  00000001
  4FC:  		Set   *Flag[00]  .True
  50C:  	EndIf
  514:  EndIf
  51C:  If  *Flag[00]  ==  .False
  52C:  	Thread
  534:  		Wait  5`
  540:  		Call  PlaySoundAtActor  ( *Var0 0000206D )
  554:  		Call  PlaySoundAtActor  ( *Var0 00000214 )
  568:  		Wait  30`
  574:  		Call  PlaySoundAtActor  ( *Var0 0000025C )
  588:  	EndThread
  590:  	Thread
  598:  		Call  8026BF48  ( 00000001 )
  5A8:  		Call  HealActor ( *Var0 00000000 .True )
  5C0:  		Call  8026BF48  ( 00000000 )
  5D0:  	EndThread
  5D8:  EndIf
  5E0:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  5F4:  If  *Var0  !=  FFFFFFFF
  604:  	Goto  0
  610:  EndIf
  618:  Call  WaitForBuffDone ( )
  624:  Wait  1`
  630:  Call  UseBattleCamPreset    ( 00000002 )
  640:  Call  MoveBattleCamOver (  10` )
  650:  Wait  10`
  65C:  Call  YieldTurn ( )
  668:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  67C:  Call  UseIdleAnimation  ( .Actor:Self .True )
  690:  Return
  698:  End
}

% Origin: HINT
#new:Script $Script_ShapeSpell
{
    0:  Call  SetActorVar   ( .Actor:Self 0000000B 00000002 )
   18:  Set   *Flag[00]  .False
   28:  Set   *Flag[01]  .False
   38:  Call  GetActorVar   ( .Actor:Self 0000000A *Var0 )
   50:  If  *Var0  ==  00000001
   60:  	Set   *Flag[00]  .True
   70:  	Call  GetActorVar   ( .Actor:Self 00000009 *VarA )
   88:  EndIf
   90:  Call  GetActorFlags ( .Actor:Self *Var0 )
   A4:  If  *Var0  &  00000200
   B4:  	Set   *Flag[01]  .True
   C4:  EndIf
   CC:  Call  UseIdleAnimation  ( .Actor:Self .False )
   E0:  If  *Flag[00]  ==  .True
   F0:  	Call  UseIdleAnimation  ( *VarA .False )
  104:  EndIf
  10C:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  120:  Call  GetBattlePhase    ( *Var0 )
  130:  If  *Var0  ==  00000001
  140:  	Call  UseBattleCamPreset    ( 00000002 )
  150:  	Call  MoveBattleCamOver     (  1` )
  160:  Else
  168:  	Call  UseBattleCamPreset    ( 00000002 )
  178:  	Call  MoveBattleCamOver     (  10` )
  188:  EndIf
  190:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  1A4:  If  *Flag[01]  ==  .False
  1B4:  	If  *Flag[00]  ==  .True
  1C4:  		Call  SetAnimation  ( *VarA 00000001 00560002 )
  1DC:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  1F8:  		Sub   *Var0  00000011
  208:  		Add   *Var1  00000021
  218:  		Call  PlayEffect    ( ~FX:GatherMagic:Pink *Var0 *Var1 *Var2 *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  25C:  	EndIf
  264:  	Call  SetAnimation      ( .Actor:Self 00000001 00560002 )
  27C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  298:  	Call  GetStatusFlags    ( .Actor:Self *Var3 )
  2AC:  	If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  2BC:  		Sub   *Var0  00000006
  2CC:  		Add   *Var1  0000000D
  2DC:  	Else
  2E4:  		Sub   *Var0  00000011
  2F4:  		Add   *Var1  00000021
  304:  	EndIf
  30C:  	Call  PlayEffect    ( ~FX:GatherMagic:Pink *Var0 *Var1 *Var2 *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  350:  Else
  358:  	If  *Flag[00]  ==  .True
  368:  		Call  SetAnimation  ( *VarA 00000001 00570002 )
  380:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  39C:  		Sub   *Var0  0000001E
  3AC:  		Add   *Var1  00000024
  3BC:  		Call  PlayEffect    ( ~FX:GatherMagic:Pink *Var0 *Var1 *Var2 *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  400:  	EndIf
  408:  	Call  SetAnimation      ( .Actor:Self 00000002 00570002 )
  420:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  43C:  	Call  GetStatusFlags    ( .Actor:Self *Var3 )
  450:  	If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  460:  		Sub   *Var0  0000000C
  470:  		Add   *Var1  0000000E
  480:  	Else
  488:  		Sub   *Var0  0000001E
  498:  		Add   *Var1  00000024
  4A8:  	EndIf
  4B0:  	Call  PlayEffect    ( ~FX:GatherMagic:Pink *Var0 *Var1 *Var2 *Fixed[0.5] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  4F4:  EndIf
  4FC:  Wait  30`
  508:  Call  EnemyTestTarget   ( .Actor:Self *Var9 ~Flags:DamageType:0 00000000 00000001 00000010 )
  52C:  Switch  *Var9
  538:  	CaseOR  ==  .HitResult:Miss % 6
  544:  	CaseOR  ==  .HitResult:Lucky % 5
  550:  		If  *Flag[00]  ==  .True
  560:  			Call  PlaySoundAtActor  ( *VarA .Sound:SpellCast2 )
  574:  		EndIf
  57C:  		Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast2 )
  590:  		If  *Flag[01]  ==  .False
  5A0:  			If  *Flag[00]  ==  .True
  5B0:  				Call  SetAnimation  ( *VarA 00000001 00560003 )
  5C8:  			EndIf
  5D0:  			Call  SetAnimation  ( .Actor:Self 00000001 00560003 )
  5E8:  		Else
  5F0:  			If  *Flag[00]  ==  .True
  600:  				Call  SetAnimation  ( *VarA 00000001 00570003 )
  618:  			EndIf
  620:  			Call  SetAnimation  ( .Actor:Self 00000002 00570003 )
  638:  		EndIf
  640:  		Wait  5`
  64C:  		Call  SetGoalToTarget   ( .Actor:Self )
  65C:  		Call  GetGoalPos        ( .Actor:Self *Var4 *Var5 *Var6 )
  678:  		Sub   *Var4  00000032
  688:  		Set   *Var5  00000000
  698:  		If  *Flag[01]  ==  .False
  6A8:  			If  *Flag[00]  ==  .True
  6B8:  				Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  6D4:  				Sub   *Var0  00000014
  6E4:  				Add   *Var1  00000014
  6F4:  				Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 0000001E )
  71C:  			EndIf
  724:  			Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  740:  			Call  GetStatusFlags    ( .Actor:Self *Var3 )
  754:  			If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  764:  				Sub   *Var0  00000008
  774:  				Add   *Var1  00000008
  784:  			Else
  78C:  				Sub   *Var0  00000014
  79C:  				Add   *Var1  00000014
  7AC:  			EndIf
  7B4:  			Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 0000001E )
  7DC:  		Else
  7E4:  			If  *Flag[00]  ==  .True
  7F4:  				Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  810:  				Sub   *Var0  00000014
  820:  				Add   *Var1  00000014
  830:  				Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 0000001E )
  858:  			EndIf
  860:  			Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  87C:  			Call  GetStatusFlags    ( .Actor:Self *Var3 )
  890:  			If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  8A0:  				Sub   *Var0  00000008
  8B0:  				Add   *Var1  00000008
  8C0:  			Else
  8C8:  				Sub   *Var0  00000014
  8D8:  				Add   *Var1  00000014
  8E8:  			EndIf
  8F0:  			Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 0000001E )
  918:  		EndIf
  920:  		Wait  50`
  92C:  		If  *Var9  ==  .HitResult:Lucky % 5
  93C:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  960:  		EndIf
  968:  		Wait  15`
  974:  		Call  YieldTurn ( )
  980:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  994:  		If  *Flag[00]  ==  .True
  9A4:  			Call  UseIdleAnimation  ( *VarA .True )
  9B8:  		EndIf
  9C0:  		Return
  9C8:  	EndCaseGroup
  9D0:  EndSwitch
  9D8:  If  *Flag[00]  ==  .True
  9E8:  	Call  PlaySoundAtActor  ( *VarA .Sound:SpellCast2 )
  9FC:  EndIf
  A04:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast2 )
  A18:  If  *Flag[01]  ==  .False
  A28:  	If  *Flag[00]  ==  .True
  A38:  		Call  SetAnimation  ( *VarA 00000001 00560003 )
  A50:  	EndIf
  A58:  	Call  SetAnimation  ( .Actor:Self 00000001 00560003 )
  A70:  Else
  A78:  	If  *Flag[00]  ==  .True
  A88:  		Call  SetAnimation  ( *VarA 00000001 00570003 )
  AA0:  	EndIf
  AA8:  	Call  SetAnimation  ( .Actor:Self 00000002 00570003 )
  AC0:  EndIf
  AC8:  Wait  5`
  AD4:  Call  SetGoalToTarget   ( .Actor:Self )
  AE4:  Call  GetGoalPos        ( .Actor:Self *Var4 *Var5 *Var6 )
  B00:  If  *Flag[01]  ==  .False
  B10:  	If  *Flag[00]  ==  .True
  B20:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  B3C:  		Sub   *Var0  00000014
  B4C:  		Add   *Var1  00000014
  B5C:  		Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 00000014 )
  B84:  	EndIf
  B8C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  BA8:  	Call  GetStatusFlags    ( .Actor:Self *Var3 )
  BBC:  	If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  BCC:  		Sub   *Var0  00000008
  BDC:  		Add   *Var1  00000008
  BEC:  	Else
  BF4:  		Sub   *Var0  00000014
  C04:  		Add   *Var1  00000014
  C14:  	EndIf
  C1C:  	Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 00000014 )
  C44:  Else
  C4C:  	If  *Flag[00]  ==  .True
  C5C:  		Call  GetActorPos   ( *VarA *Var0 *Var1 *Var2 )
  C78:  		Sub   *Var0  00000014
  C88:  		Add   *Var1  00000014
  C98:  		Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 00000014 )
  CC0:  	EndIf
  CC8:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  CE4:  	Call  GetStatusFlags    ( .Actor:Self *Var3 )
  CF8:  	If  *Var3  &  ~Flags:StatusFlags:Shrink % 80000
  D08:  		Sub   *Var0  00000008
  D18:  		Add   *Var1  00000008
  D28:  	Else
  D30:  		Sub   *Var0  00000014
  D40:  		Add   *Var1  00000014
  D50:  	EndIf
  D58:  	Call  $Function_80218150    ( *Var0 *Var1 *Var6 *Var4 *Var5 *Var6 00000014 )
  D80:  EndIf
  D88:  Wait  18`
  D94:  If  *Flag[00]  ==  .True
  DA4:  	Wait  2`
  DB0:  	Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Magic 00000000 00000000 00000000 00000020 )
  DD8:  Else
  DE0:  	Wait  2`
  DEC:  	Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|Magic 00000000 00000000 00000003 00000020 )
  E14:  EndIf
  E1C:  Switch  *Var0
  E28:  	CaseOR  ==  .HitResult:Hit % 0
  E34:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  E40:  		Wait  20`
  E4C:  		Call  YieldTurn ( )
  E58:  	EndCaseGroup
  E60:  EndSwitch
  E68:  Call  UseIdleAnimation  ( .Actor:Self .True )
  E7C:  If  *Flag[00]  ==  .True
  E8C:  	Call  UseIdleAnimation  ( *VarA .True )
  EA0:  EndIf
  EA8:  Return
  EB0:  End
}

% Origin: HINT
#new:Script $Script_80221144
{
    0:  Call  EnemyCreateTargetList ( 00008002 )
   10:  Call  InitTargetIterator ( )
   1C:  Label  0
   28:  Call  GetOwnerTarget        ( *Var0 *Var1 )
   3C:  Call  GetIndexFromHome      ( *Var0 *Var1 )
   50:  Mod   *Var1  00000004
   60:  Switch  *Var1
   6C:  	Case  ==  00000000
   78:  		Set   *Flag[0B]  .True
   88:  	Case  ==  00000001
   94:  		Set   *Flag[0C]  .True
   A4:  	Case  ==  00000002
   B0:  		Set   *Flag[0D]  .True
   C0:  	Case  ==  00000003
   CC:  		Set   *Flag[0E]  .True
   DC:  EndSwitch
   E4:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
   F8:  If  *Var0  !=  FFFFFFFF
  108:  	Goto  0
  114:  EndIf
  11C:  Set   *Var0  FFFFFFFF
  12C:  Call  GetIndexFromHome  ( .Actor:Self *Var1 )
  140:  Mod   *Var1  00000004
  150:  Switch  *Var1
  15C:  	Case  ==  00000000
  168:  		If  *Flag[0C]  ==  .False
  178:  			Set   *Var0  00000001
  188:  		EndIf
  190:  	Case  ==  00000001
  19C:  		If  *Flag[0B]  ==  .False
  1AC:  			Set   *Var0  00000000
  1BC:  		EndIf
  1C4:  		If  *Flag[0D]  ==  .False
  1D4:  			Set   *Var0  00000002
  1E4:  		EndIf
  1EC:  	Case  ==  00000002
  1F8:  		If  *Flag[0C]  ==  .False
  208:  			Set   *Var0  00000001
  218:  		EndIf
  220:  		If  *Flag[0E]  ==  .False
  230:  			Set   *Var0  00000003
  240:  		EndIf
  248:  	Case  ==  00000003
  254:  		If  *Flag[0D]  ==  .False
  264:  			Set   *Var0  00000002
  274:  		EndIf
  27C:  EndSwitch
  284:  If  *Var0  !=  FFFFFFFF
  294:  	Call  GetActorFlags ( .Actor:Self *Var1 )
  2A8:  	If  *Var1  &  00000200
  2B8:  		Add   *Var0  00000004
  2C8:  	EndIf
  2D0:  EndIf
  2D8:  Return
  2E0:  End
}

% Origin: HINT
#new:Script $Script_HandleEvent_8022142C
{
    0:  Return
    8:  End
}

% Origin: HINT
#new:Script $Script_Init_8022143C
{
    0:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022142C )
   14:  Call  SetActorVar       ( .Actor:Self 00000001 00000001 )
   2C:  Return
   34:  End
}

% Origin: HINT
#new:Script $Script_Init_80221478
{
    0:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022142C )
   14:  Call  SetActorVar       ( .Actor:Self 00000001 00000001 )
   2C:  Return
   34:  End
}

% Origin: HINT
#new:DefenseTable $DefenseTable_802214B4
{
	.Element:Normal 00000000
	.Element:End
}

% Origin: HINT
#new:DefenseTable $DefenseTable_802214C0
{
	.Element:Normal 00000000
	.Element:End
}

% Origin: HINT
#new:StatusTable $StatusTable_802214CC
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze    0`
	.Status:Shrink      0`
	.Status:Stop        0`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

% Origin: HINT
#new:StatusTable $StatusTable_80221578
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep       0`
	.Status:Poison      0`
	.Status:Frozen      0`
	.Status:Dizzy       0`
	.Status:Fear        0`
	.Status:Static      0`
	.Status:Paralyze    0`
	.Status:Shrink      0`
	.Status:Stop        0`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod      0`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod      0`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod       0`
	.Status:End
}

% Origin: HINT
#new:PartsTable $PartsTable_80221624
{
	00800000 01000000 022300FF $IdleAnimations_8021D6D0 $DefenseTable_802214B4 00000020 00000000 FBF40000 00000000
}

% Origin: HINT
#new:PartsTable $PartsTable_80221648
{
	00800000 01000000 F62300FF $IdleAnimations_8021D71C $DefenseTable_802214C0 00000020 00000000 00F80000 00000000
}

% Origin: HINT
#new:Actor $Magiclone
{
	% stats
	[Index]        4Fb
	[Level]        26`b
	[MaxHP]        11`b
	[Coins]         0`b
	[Flags]       00200000
	[StatusTable] $StatusTable_802214CC
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80221624
	[Script]      $Script_Init_8022143C
	% move effectiveness
	[Escape]       40`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  75`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         36`b  40`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  32`b % dx dy
}

% Origin: HINT
#new:Actor $FlyingMagiclone
{
	% stats
	[Index]        50b
	[Level]        26`b
	[MaxHP]        11`b
	[Coins]         2`b
	[Flags]       00200200
	[StatusTable] $StatusTable_80221578
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_80221648
	[Script]      $Script_Init_80221478
	% move effectiveness
	[Escape]       40`b
	[Item]          0`b
	[AirLift]       0`b
	[Hurricane]     0`b % Bow's "Spook" as well
	[UpAndAway]     0`b
	[PowerBounce]  75`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         48`b  40`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -25`b  20`b % dx dy
	[StatusIcon]    1`b  34`b % dx dy
}

% Origin: HINT
#new:Vector3D $Vector3D_802216BC
{
	0` -1000` 0`
}

% Origin: HINT
#new:SpecialFormation $SpecialFormation_802216C8
{
	$Magiclone $Vector3D_802216BC 00000000 00000000 00000000 00000000 00000000
}

% Origin: HINT
#new:SpecialFormation $SpecialFormation_802216E4
{
	$FlyingMagiclone $Vector3D_802216BC 00000000 00000000 00000000 00000000 00000000
}

% Origin: HINT
#new:Script $Script_MakeCopy
{
    0:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
   18:  If  *Var0  ==  00000001
   28:  	ExecWait  $Script_RunAway
   34:  	Return
   3C:  EndIf
   44:  Call  SetActorVar   ( .Actor:Self 0000000A 00000001 )
   5C:  Call  SetActorVar   ( .Actor:Self 0000000B 00000003 )
   74:  Set   *Flag[00]  .False
   84:  Call  GetActorFlags ( .Actor:Self *Var0 )
   98:  If  *Var0  &  00000200
   A8:  	Set   *Flag[00]  .True
   B8:  EndIf
   C0:  If  *Flag[00]  ==  .False
   D0:  	Call  SummonEnemy   ( $SpecialFormation_802216C8 00000000 )
   E4:  Else
   EC:  	Call  SummonEnemy   ( $SpecialFormation_802216E4 00000000 )
  100:  EndIf
  108:  Call  SetActorVar       ( .Actor:Self 00000009 *Var0 )
  120:  Set   *VarA  *Var0
  130:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
  144:  Call  EnableIdleScript  ( *VarA 00000000 )
  158:  Call  UseIdleAnimation  ( .Actor:Self .False )
  16C:  Call  UseIdleAnimation  ( *VarA .False )
  180:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  194:  Call  UseBattleCamPreset    ( 0000000E )
  1A4:  Call  BattleCamTargetActor  ( .Actor:Self )
  1B4:  Call  MoveBattleCamOver (  25` )
  1C4:  Wait  25`
  1D0:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast3 )
  1E4:  If  *Flag[00]  ==  .False
  1F4:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  20C:  	Call  SetAnimation  ( *VarA 00000001 00560002 )
  224:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  240:  	Add   *Var1  00000017
  250:  Else
  258:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  270:  	Call  SetAnimation  ( *VarA 00000001 00570002 )
  288:  	Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  2A4:  	Add   *Var1  00000017
  2B4:  EndIf
  2BC:  Call  PlayEffect        ( ~FX:EnergyIn:Stars *Var0 *Var1 *Var2 *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  300:  Wait  10`
  30C:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  320:  Call  EnableIdleScript  ( *Var9 00000001 )
  334:  Wait  30`
  340:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  35C:  Add   *Var2  FFFFFFFD
  36C:  Call  SetActorPos       ( *VarA *Var0 *Var1 *Var2 )
  388:  Set   *Var9  *VarA
  398:  Wait  15`
  3A4:  Call  UseBattleCamPreset    ( 00000002 )
  3B4:  Call  MoveBattleCamOver (  30` )
  3C4:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast4 )
  3D8:  Call  PlaySoundAtActor  ( *Var9 .Sound:SpellCast4 )
  3EC:  Call  SetPartFlagBits   ( *Var9 00000001 00800000 .False )
  408:  Call  RandInt   ( 000003E8 *Var0 )
  41C:  If  *Var0  <  000001F4
  42C:  	Call  SetActorSpeed     ( .Actor:Self *Fixed[2.0] )
  440:  	ExecWait  $Script_80221144
  44C:  	Call  SetGoalToIndex    ( .Actor:Self *Var0 )
  460:  	Call  FlyToGoal ( .Actor:Self  0`  0` .Easing:Linear )
  47C:  Else
  484:  	Call  SetActorSpeed     ( *Var9 *Fixed[2.0] )
  498:  	ExecWait  $Script_80221144
  4A4:  	Call  SetGoalToIndex    ( *Var9 *Var0 )
  4B8:  	Call  FlyToGoal ( *Var9  0`  0` .Easing:Linear )
  4D4:  EndIf
  4DC:  Call  SetPartFlagBits   ( *Var9 00000001 00800000 .True )
  4F8:  Call  GetActorHP    ( .Actor:Self *Var0 )
  50C:  Call  SetEnemyHP    ( *Var9 *Var0 )
  520:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  53C:  Call  ForceHomePos  ( .Actor:Self *Var0 *Var1 *Var2 )
  558:  Call  HPBarToHome   ( .Actor:Self )
  568:  Call  GetActorPos   ( *Var9 *Var0 *Var1 *Var2 )
  584:  Call  ForceHomePos  ( *Var9 *Var0 *Var1 *Var2 )
  5A0:  Call  HPBarToHome   ( *Var9 )
  5B0:  If  *Flag[00]  ==  .False
  5C0:  	Call  SetPartEventBits  ( .Actor:Self 00000001 00400000 .True )
  5DC:  Else
  5E4:  	Call  SetPartEventBits  ( .Actor:Self 00000002 00400000 .True )
  600:  EndIf
  608:  If  *Flag[00]  ==  .False
  618:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  630:  	Call  SetAnimation  ( *Var9 00000001 00560001 )
  648:  Else
  650:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  668:  	Call  SetAnimation  ( *Var9 00000001 00570001 )
  680:  EndIf
  688:  Call  UseIdleAnimation  ( .Actor:Self .True )
  69C:  Call  UseIdleAnimation  ( *Var9 .True )
  6B0:  Return
  6B8:  End
}

% Origin: HINT
#new:Script $Script_BoostAttack
{
    0:  Set   *Flag[00]  .False
   10:  Label  A
   1C:  Call  EnemyCreateTargetList ( 00008002 )
   2C:  Call  InitTargetIterator ( )
   38:  Label  0
   44:  Call  GetOwnerTarget    ( *Var0 *Var1 )
   58:  Call  GetIndexFromHome  ( *Var0 *Var1 )
   6C:  Call  GetBattleVar      ( 00000002 *Var2 )
   80:  If  *Var1  >  *Var2
   90:  	Call  $Function_802183F8    ( *Var0 *Var3 )
   A4:  	If  *Var3  ==  00000000
   B4:  		Call  GetActorAttackBoost   ( *Var0 *Var4 )
   C8:  		If  *Var4  <  00000000
   D8:  			Set   *Var8  *Var0
   E8:  			Call  SetBattleVar  ( 00000002 *Var1 )
   FC:  			Goto  64
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  134:  If  *Var0  !=  FFFFFFFF
  144:  	Goto  0
  150:  EndIf
  158:  If  *Flag[00]  ==  .False
  168:  	Set   *Flag[00]  .True
  178:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
  18C:  	Goto  A
  198:  EndIf
  1A0:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
  1B8:  If  *Var0  ==  00000001
  1C8:  	ExecWait  $Script_RunAway
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait  $Script_ShapeSpell
  1F0:  Return
  1F8:  Label  64
  204:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
  21C:  Call  SetActorVar       ( .Actor:Self 0000000B 00000004 )
  234:  Call  AddActorVar       ( .Actor:Self 00000005 00000001 )
  24C:  Call  UseIdleAnimation  ( .Actor:Self .False )
  260:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
  274:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  Call  UseBattleCamPreset    ( 0000000E )
  298:  Call  BattleCamTargetActor  ( .Actor:Self )
  2A8:  Call  MoveBattleCamOver (  15` )
  2B8:  Wait  15`
  2C4:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  2D8:  If  *Var0  !&  00000200
  2E8:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait  5`
  334:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  348:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  35C:  If  *Var0  !&  00000200
  36C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  388:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  39C:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  3AC:  		Sub   *Var0  00000006
  3BC:  		Add   *Var1  0000000C
  3CC:  		Sub   *Var2  00000002
  3DC:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub   *Var0  00000010
  438:  		Add   *Var1  0000001F
  448:  		Sub   *Var2  00000002
  458:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  4C8:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  4DC:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  4EC:  		Sub   *Var0  0000000C
  4FC:  		Add   *Var1  0000000E
  50C:  		Sub   *Var2  00000002
  51C:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub   *Var0  0000001E
  578:  		Add   *Var1  00000024
  588:  		Sub   *Var2  00000002
  598:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait  30`
  5F8:  Call  GetActorFlags ( .Actor:Self *Var0 )
  60C:  If  *Var0  !&  00000200
  61C:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait  5`
  668:  Thread
  670:  	Wait  10`
  67C:  	Call  PlaySoundAtActor  ( *Var8 000002DD )
  690:  EndThread
  698:  Thread
  6A0:  	Call  8026BF48      ( 00000001 )
  6B0:  	Call  BoostAttack   ( *Var8 00000000 )
  6C4:  	Call  8026BF48      ( 00000000 )
  6D4:  EndThread
  6DC:  Call  WaitForBuffDone ( )
  6E8:  Call  UseBattleCamPreset    ( 00000002 )
  6F8:  Wait  10`
  704:  Call  YieldTurn ( )
  710:  Call  EnableIdleScript      ( .Actor:Self 00000001 )
  724:  Call  UseIdleAnimation      ( .Actor:Self .True )
  738:  Return
  740:  End
}

% Origin: HINT
#new:Script $Script_BoostDefense
{
    0:  Set   *Flag[00]  .False
   10:  Label  A
   1C:  Call  EnemyCreateTargetList ( 00008002 )
   2C:  Call  InitTargetIterator ( )
   38:  Label  0
   44:  Call  GetOwnerTarget    ( *Var0 *Var1 )
   58:  Call  GetIndexFromHome  ( *Var0 *Var1 )
   6C:  Call  GetBattleVar      ( 00000002 *Var2 )
   80:  If  *Var1  >  *Var2
   90:  	Call  $Function_802183F8    ( *Var0 *Var3 )
   A4:  	If  *Var3  ==  00000000
   B4:  		Call  GetActorDefenseBoost  ( *Var0 *Var4 )
   C8:  		If  *Var4  <  00000000
   D8:  			Set   *Var8  *Var0
   E8:  			Call  SetBattleVar  ( 00000002 *Var1 )
   FC:  			Goto  64
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  134:  If  *Var0  !=  FFFFFFFF
  144:  	Goto  0
  150:  EndIf
  158:  If  *Flag[00]  ==  .False
  168:  	Set   *Flag[00]  .True
  178:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
  18C:  	Goto  A
  198:  EndIf
  1A0:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
  1B8:  If  *Var0  ==  00000001
  1C8:  	ExecWait  $Script_RunAway
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait  $Script_ShapeSpell
  1F0:  Return
  1F8:  Label  64
  204:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
  21C:  Call  SetActorVar       ( .Actor:Self 0000000B 00000005 )
  234:  Call  AddActorVar       ( .Actor:Self 00000006 00000001 )
  24C:  Call  UseIdleAnimation  ( .Actor:Self .False )
  260:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
  274:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  Call  UseBattleCamPreset    ( 0000000E )
  298:  Call  BattleCamTargetActor  ( .Actor:Self )
  2A8:  Call  MoveBattleCamOver (  15` )
  2B8:  Wait  15`
  2C4:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  2D8:  If  *Var0  !&  00000200
  2E8:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait  5`
  334:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  348:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  35C:  If  *Var0  !&  00000200
  36C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  388:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  39C:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  3AC:  		Sub   *Var0  00000006
  3BC:  		Add   *Var1  0000000C
  3CC:  		Sub   *Var2  00000002
  3DC:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub   *Var0  00000010
  438:  		Add   *Var1  0000001F
  448:  		Sub   *Var2  00000002
  458:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  4C8:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  4DC:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  4EC:  		Sub   *Var0  0000000C
  4FC:  		Add   *Var1  0000000E
  50C:  		Sub   *Var2  00000002
  51C:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub   *Var0  0000001E
  578:  		Add   *Var1  00000024
  588:  		Sub   *Var2  00000002
  598:  		Call  PlayEffect    ( ~FX:RadialFlowOut:YellowEnergy *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait  30`
  5F8:  Call  GetActorFlags ( .Actor:Self *Var0 )
  60C:  If  *Var0  !&  00000200
  61C:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait  5`
  668:  Thread
  670:  	Wait  10`
  67C:  	Call  PlaySoundAtActor  ( *Var8 000002DD )
  690:  EndThread
  698:  Thread
  6A0:  	Call  8026BF48      ( 00000001 )
  6B0:  	Call  BoostDefense  ( *Var8 00000000 )
  6C4:  	Call  8026BF48      ( 00000000 )
  6D4:  EndThread
  6DC:  Call  WaitForBuffDone ( )
  6E8:  Call  UseBattleCamPreset    ( 00000002 )
  6F8:  Wait  10`
  704:  Call  YieldTurn ( )
  710:  Call  EnableIdleScript      ( .Actor:Self 00000001 )
  724:  Call  UseIdleAnimation      ( .Actor:Self .True )
  738:  Return
  740:  End
}

% Origin: HINT
#new:Script $Script_Electrify
{
    0:  Set   *Flag[00]  .False
   10:  Label  A
   1C:  Call  EnemyCreateTargetList ( 00008002 )
   2C:  Call  InitTargetIterator ( )
   38:  Label  0
   44:  Call  GetOwnerTarget    ( *Var0 *Var1 )
   58:  Call  GetIndexFromHome  ( *Var0 *Var1 )
   6C:  Call  GetBattleVar      ( 00000002 *Var2 )
   80:  If  *Var1  >  *Var2
   90:  	Call  $Function_802183F8    ( *Var0 *Var3 )
   A4:  	If  *Var3  ==  00000000
   B4:  		Call  GetStatusFlags    ( *Var0 *Var4 )
   C8:  		If  *Var4  !&  ~Flags:StatusFlags:Static|Transparent % 4002000
   D8:  			Set   *Var8  *Var0
   E8:  			Call  SetBattleVar  ( 00000002 *Var1 )
   FC:  			Goto  64
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  134:  If  *Var0  !=  FFFFFFFF
  144:  	Goto  0
  150:  EndIf
  158:  If  *Flag[00]  ==  .False
  168:  	Set   *Flag[00]  .True
  178:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
  18C:  	Goto  A
  198:  EndIf
  1A0:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
  1B8:  If  *Var0  ==  00000001
  1C8:  	ExecWait  $Script_RunAway
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait  $Script_ShapeSpell
  1F0:  Return
  1F8:  Label  64
  204:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
  21C:  Call  SetActorVar       ( .Actor:Self 0000000B 00000006 )
  234:  Call  AddActorVar       ( .Actor:Self 00000007 00000001 )
  24C:  Call  UseIdleAnimation  ( .Actor:Self .False )
  260:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
  274:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  Call  UseBattleCamPreset    ( 0000000E )
  298:  Call  BattleCamTargetActor  ( .Actor:Self )
  2A8:  Call  MoveBattleCamOver (  15` )
  2B8:  Wait  15`
  2C4:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  2D8:  If  *Var0  !&  00000200
  2E8:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait  5`
  334:  Call  PlaySoundAtActor  ( .Actor:Self 000002F0 )
  348:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  35C:  If  *Var0  !&  00000200
  36C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  388:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  39C:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  3AC:  		Sub   *Var0  00000006
  3BC:  		Add   *Var1  0000000C
  3CC:  		Sub   *Var2  00000002
  3DC:  		Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub   *Var0  00000010
  438:  		Add   *Var1  0000001F
  448:  		Sub   *Var2  00000002
  458:  		Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  4C8:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  4DC:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  4EC:  		Sub   *Var0  0000000C
  4FC:  		Add   *Var1  0000000E
  50C:  		Sub   *Var2  00000002
  51C:  		Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub   *Var0  0000001E
  578:  		Add   *Var1  00000024
  588:  		Sub   *Var2  00000002
  598:  		Call  PlayEffect    ( ~FX:SnakingStatic *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait  30`
  5F8:  Call  GetActorFlags ( .Actor:Self *Var0 )
  60C:  If  *Var0  !&  00000200
  61C:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait  5`
  668:  Thread
  670:  	Wait  10`
  67C:  	Loop  00000004
  688:  		Call  PlaySoundAtActor  ( *Var8 000003D2 )
  69C:  		Call  RandInt   ( 00000003 *Var0 )
  6B0:  		Add   *Var0  00000003
  6C0:  		Wait  *Var0
  6CC:  	EndLoop
  6D4:  EndThread
  6DC:  Thread
  6E4:  	Call  8026BF48  ( 00000001 )
  6F4:  	Call  ElectrifyActor    ( *Var8 00000000 )
  708:  	Call  8026BF48  ( 00000000 )
  718:  EndThread
  720:  Call  WaitForBuffDone ( )
  72C:  Call  UseBattleCamPreset    ( 00000002 )
  73C:  Wait  10`
  748:  Call  YieldTurn ( )
  754:  Call  EnableIdleScript      ( .Actor:Self 00000001 )
  768:  Call  UseIdleAnimation      ( .Actor:Self .True )
  77C:  Return
  784:  End
}

% Origin: HINT
#new:Script $Script_Vanish
{
    0:  Set   *Flag[00]  .False
   10:  Label  A
   1C:  Call  EnemyCreateTargetList ( 00008002 )
   2C:  Call  InitTargetIterator ( )
   38:  Label  0
   44:  Call  GetOwnerTarget    ( *Var0 *Var1 )
   58:  Call  GetIndexFromHome  ( *Var0 *Var1 )
   6C:  Call  GetBattleVar      ( 00000002 *Var2 )
   80:  If  *Var1  >  *Var2
   90:  	Call  $Function_802183F8    ( *Var0 *Var3 )
   A4:  	If  *Var3  ==  00000000
   B4:  		Call  GetStatusFlags    ( *Var0 *Var4 )
   C8:  		If  *Var4  !&  ~Flags:StatusFlags:Static|Transparent % 4002000
   D8:  			Set   *Var8  *Var0
   E8:  			Call  SetBattleVar  ( 00000002 *Var1 )
   FC:  			Goto  64
  108:  		EndIf
  110:  	EndIf
  118:  EndIf
  120:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  134:  If  *Var0  !=  FFFFFFFF
  144:  	Goto  0
  150:  EndIf
  158:  If  *Flag[00]  ==  .False
  168:  	Set   *Flag[00]  .True
  178:  	Call  SetBattleVar  ( 00000002 FFFFFFFF )
  18C:  	Goto  A
  198:  EndIf
  1A0:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
  1B8:  If  *Var0  ==  00000001
  1C8:  	ExecWait  $Script_RunAway
  1D4:  	Return
  1DC:  EndIf
  1E4:  ExecWait  $Script_ShapeSpell
  1F0:  Return
  1F8:  Label  64
  204:  Call  SetActorVar       ( .Actor:Self 0000000A 00000000 )
  21C:  Call  SetActorVar       ( .Actor:Self 0000000B 00000007 )
  234:  Call  AddActorVar       ( .Actor:Self 00000008 00000001 )
  24C:  Call  UseIdleAnimation  ( .Actor:Self .False )
  260:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
  274:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  Call  UseBattleCamPreset    ( 0000000E )
  298:  Call  BattleCamTargetActor  ( .Actor:Self )
  2A8:  Call  MoveBattleCamOver (  15` )
  2B8:  Wait  15`
  2C4:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  2D8:  If  *Var0  !&  00000200
  2E8:  	Call  SetAnimation  ( .Actor:Self 00000001 00560002 )
  300:  Else
  308:  	Call  SetAnimation  ( .Actor:Self 00000002 00570002 )
  320:  EndIf
  328:  Wait  5`
  334:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:SpellCast1 )
  348:  Call  GetActorFlags     ( .Actor:Self *Var0 )
  35C:  If  *Var0  !&  00000200
  36C:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  388:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  39C:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  3AC:  		Sub   *Var0  00000006
  3BC:  		Add   *Var1  0000000C
  3CC:  		Sub   *Var2  00000002
  3DC:  		Call  PlayEffect    ( ~FX:RadialFlowOut:WhiteWaves *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  420:  	Else
  428:  		Sub   *Var0  00000010
  438:  		Add   *Var1  0000001F
  448:  		Sub   *Var2  00000002
  458:  		Call  PlayEffect    ( ~FX:RadialFlowOut:WhiteWaves *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  49C:  	EndIf
  4A4:  Else
  4AC:  	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  4C8:  	Call  GetStatusFlags    ( .Actor:Self *VarA )
  4DC:  	If  *VarA  &  ~Flags:StatusFlags:Shrink % 80000
  4EC:  		Sub   *Var0  0000000C
  4FC:  		Add   *Var1  0000000E
  50C:  		Sub   *Var2  00000002
  51C:  		Call  PlayEffect    ( ~FX:RadialFlowOut:WhiteWaves *Var0 *Var1 *Var2 *Fixed[0.12] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  560:  	Else
  568:  		Sub   *Var0  0000001E
  578:  		Add   *Var1  00000024
  588:  		Sub   *Var2  00000002
  598:  		Call  PlayEffect    ( ~FX:RadialFlowOut:WhiteWaves *Var0 *Var1 *Var2 *Fixed[0.3] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  5DC:  	EndIf
  5E4:  EndIf
  5EC:  Wait  30`
  5F8:  Call  GetActorFlags ( .Actor:Self *Var0 )
  60C:  If  *Var0  !&  00000200
  61C:  	Call  SetAnimation  ( .Actor:Self 00000001 00560001 )
  634:  Else
  63C:  	Call  SetAnimation  ( .Actor:Self 00000002 00570001 )
  654:  EndIf
  65C:  Wait  5`
  668:  Thread
  670:  	Wait  10`
  67C:  	Call  PlaySoundAtActor  ( *Var8 000002DB )
  690:  EndThread
  698:  Thread
  6A0:  	Call  8026BF48      ( 00000001 )
  6B0:  	Call  VanishActor   ( *Var8 00000000 )
  6C4:  	Call  8026BF48      ( 00000000 )
  6D4:  EndThread
  6DC:  Call  WaitForBuffDone ( )
  6E8:  Call  UseBattleCamPreset    ( 00000002 )
  6F8:  Wait  10`
  704:  Call  YieldTurn ( )
  710:  Call  EnableIdleScript      ( .Actor:Self 00000001 )
  724:  Call  UseIdleAnimation      ( .Actor:Self .True )
  738:  Return
  740:  End
}

% Origin: HINT
#new:Script $Script_TakeTurn_80223B24
{
    0:  Call  GetBattlePhase    ( *Var0 )
   10:  If  *Var0  ==  00000001
   20:  	ExecWait  $Script_ShapeSpell
   2C:  	Return
   34:  EndIf
   3C:  Call  GetActorVar   ( .Actor:Self 0000000A *Var0 )
   54:  If  *Var0  ==  00000001
   64:  	Goto  14
   70:  EndIf
   78:  Set   *VarA  00000000
   88:  Call  EnemyCreateTargetList ( 00008002 )
   98:  Call  InitTargetIterator ( )
   A4:  Label  0
   B0:  Set   *Flag[00]  .False
   C0:  Call  GetOwnerTarget        ( *Var0 *Var1 )
   D4:  Call  GetOriginalActorType  ( *Var0 *Var1 )
   E8:  If  *Var1  ==  00000047
   F8:  	Call  GetActorVar   ( *Var0 00000008 *Var1 )
  110:  	If  *Var1  ==  00000001
  120:  		Set   *Flag[00]  .True
  130:  	EndIf
  138:  EndIf
  140:  Call  GetActorHP    ( *Var0 *Var2 )
  154:  Call  GetEnemyMaxHP ( *Var0 *Var3 )
  168:  MulF  *Var2  *Fixed[100.0]
  178:  DivF  *Var2  *Var3
  188:  If  *Flag[00]  ==  .False
  198:  	If  *Var2  <=  00000000
  1A8:  		Call  RandInt   ( 00000063 *Var4 )
  1BC:  		Add   *Var4  00000001
  1CC:  		If  *Var4  <  00000000
  1DC:  			Add   *VarA  00000001
  1EC:  			Set   *VarB  *Var0
  1FC:  		EndIf
  204:  	EndIf
  20C:  EndIf
  214:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  228:  If  *Var0  !=  FFFFFFFF
  238:  	Goto  0
  244:  EndIf
  24C:  If  *VarA  >  00000000
  25C:  	Goto  A
  268:  EndIf
  270:  Set   *VarA  00000000
  280:  Call  EnemyCreateTargetList ( 00008002 )
  290:  Call  InitTargetIterator ( )
  29C:  Label  1
  2A8:  Set   *Flag[00]  .False
  2B8:  Call  GetOwnerTarget        ( *Var0 *Var1 )
  2CC:  Call  GetOriginalActorType  ( *Var0 *Var1 )
  2E0:  If  *Var1  ==  00000047
  2F0:  	Call  GetActorVar   ( *Var0 00000008 *Var1 )
  308:  	If  *Var1  ==  00000001
  318:  		Set   *Flag[00]  .True
  328:  	EndIf
  330:  EndIf
  338:  Call  GetActorHP    ( *Var0 *Var2 )
  34C:  Call  GetEnemyMaxHP ( *Var0 *Var3 )
  360:  MulF  *Var2  *Fixed[100.0]
  370:  DivF  *Var2  *Var3
  380:  If  *Flag[00]  ==  .False
  390:  	If  *Var2  <=  00000000
  3A0:  		Call  RandInt   ( 00000063 *Var4 )
  3B4:  		Add   *Var4  00000001
  3C4:  		If  *Var4  <  00000000
  3D4:  			Add   *VarA  00000001
  3E4:  			Set   *VarB  *Var0
  3F4:  		EndIf
  3FC:  	EndIf
  404:  EndIf
  40C:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  420:  If  *Var0  !=  FFFFFFFF
  430:  	Goto  1
  43C:  EndIf
  444:  If  *VarA  >  00000000
  454:  	Goto  A
  460:  EndIf
  468:  Set   *VarA  00000000
  478:  Call  EnemyCreateTargetList ( 00008002 )
  488:  Call  InitTargetIterator ( )
  494:  Label  2
  4A0:  Set   *Flag[00]  .False
  4B0:  Call  GetOwnerTarget        ( *Var0 *Var1 )
  4C4:  Call  GetOriginalActorType  ( *Var0 *Var1 )
  4D8:  If  *Var1  ==  00000047
  4E8:  	Call  GetActorVar   ( *Var0 00000008 *Var1 )
  500:  	If  *Var1  ==  00000001
  510:  		Set   *Flag[00]  .True
  520:  	EndIf
  528:  EndIf
  530:  Call  GetActorHP    ( *Var0 *Var2 )
  544:  Call  GetEnemyMaxHP ( *Var0 *Var3 )
  558:  MulF  *Var2  *Fixed[100.0]
  568:  DivF  *Var2  *Var3
  578:  If  *Flag[00]  ==  .False
  588:  	If  *Var2  <=  00000000
  598:  		Call  RandInt   ( 00000063 *Var4 )
  5AC:  		Add   *Var4  00000001
  5BC:  		If  *Var4  <  00000000
  5CC:  			Add   *VarA  00000001
  5DC:  			Set   *VarB  *Var0
  5EC:  		EndIf
  5F4:  	EndIf
  5FC:  EndIf
  604:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  618:  If  *Var0  !=  FFFFFFFF
  628:  	Goto  2
  634:  EndIf
  63C:  If  *VarA  >  00000000
  64C:  	Goto  A
  658:  EndIf
  660:  Goto  14
  66C:  Label  A
  678:  Call  CountPlayerTargets    ( .Actor:Self 00008002 *Var0 )
  690:  If  *Var0  ==  00000001
  6A0:  	ExecWait  $Script_RunAway
  6AC:  	Return
  6B4:  EndIf
  6BC:  If  *VarA  ==  00000001
  6CC:  	Call  GetActorVar   ( .Actor:Self 00000004 *Var0 )
  6E4:  	If  *Var0  <  00000000
  6F4:  		Call  RandInt   ( 000003E8 *Var0 )
  708:  		If  *Var0  <  00000000
  718:  			ExecWait  $Script_HealOne
  724:  			Return
  72C:  		EndIf
  734:  	Else
  73C:  		Call  GetActorVar   ( .Actor:Self 00000003 *Var0 )
  754:  		If  *Var0  <  00000000
  764:  			Call  RandInt   ( 000003E8 *Var0 )
  778:  			If  *Var0  <  00000000
  788:  				ExecWait  $Script_HealAll
  794:  				Return
  79C:  			EndIf
  7A4:  		EndIf
  7AC:  	EndIf
  7B4:  Else
  7BC:  	Call  GetActorVar   ( .Actor:Self 00000003 *Var0 )
  7D4:  	If  *Var0  <  00000000
  7E4:  		Call  RandInt   ( 000003E8 *Var0 )
  7F8:  		If  *Var0  <  00000000
  808:  			ExecWait  $Script_HealAll
  814:  			Return
  81C:  		EndIf
  824:  	Else
  82C:  		Call  GetActorVar   ( .Actor:Self 00000004 *Var0 )
  844:  		If  *Var0  <  00000000
  854:  			SetF  *Var9  *Fixed[100.0]
  864:  			Call  EnemyCreateTargetList ( 00008002 )
  874:  			Call  InitTargetIterator ( )
  880:  			Label  B
  88C:  			Set   *Flag[00]  .False
  89C:  			Call  GetOwnerTarget        ( *Var0 *Var1 )
  8B0:  			Call  GetOriginalActorType  ( *Var0 *Var1 )
  8C4:  			If  *Var1  ==  00000047
  8D4:  				Call  GetActorVar   ( *Var0 00000008 *Var1 )
  8EC:  				If  *Var1  ==  00000001
  8FC:  					Set   *Flag[00]  .True
  90C:  				EndIf
  914:  			EndIf
  91C:  			Call  GetActorHP    ( *Var0 *Var2 )
  930:  			Call  GetEnemyMaxHP ( *Var0 *Var3 )
  944:  			MulF  *Var2  *Fixed[100.0]
  954:  			DivF  *Var2  *Var3
  964:  			If  *Flag[00]  ==  .False
  974:  				If  *Var2  <=  *Var9
  984:  					SetF  *Var9  *Var2
  994:  					Set   *VarB  *Var0
  9A4:  				EndIf
  9AC:  			EndIf
  9B4:  			Call  ChooseNextTarget  ( .Iter:Next *Var0 )
  9C8:  			If  *Var0  !=  FFFFFFFF
  9D8:  				Goto  B
  9E4:  			EndIf
  9EC:  			Call  RandInt   ( 000003E8 *Var0 )
  A00:  			If  *Var0  <  00000000
  A10:  				ExecWait  $Script_HealOne
  A1C:  				Return
  A24:  			EndIf
  A2C:  		EndIf
  A34:  	EndIf
  A3C:  EndIf
  A44:  Label  14
  A50:  Set   *VarA  00000064
  A60:  Set   *VarB  00000000
  A70:  Set   *VarC  00000000
  A80:  Set   *VarD  00000000
  A90:  Set   *VarE  00000000
  AA0:  Set   *VarF  00000000
  AB0:  Call  GetActorVar   ( .Actor:Self 0000000A *Var0 )
  AC8:  If  *Var0  ==  00000001
  AD8:  	Set   *VarA  00000064
  AE8:  	Set   *VarB  00000000
  AF8:  	Set   *VarC  00000000
  B08:  	Set   *VarD  00000000
  B18:  	Set   *VarE  00000000
  B28:  	Set   *VarF  00000000
  B38:  	Goto  7B
  B44:  Else
  B4C:  	ExecWait  $Script_80221144
  B58:  	If  *Var0  ==  FFFFFFFF
  B68:  		Set   *VarB  00000000
  B78:  	EndIf
  B80:  EndIf
  B88:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  B9C:  If  *Var0  !=  ~Flags:StatusFlags:0 % 0
  BAC:  	Set   *VarB  00000000
  BBC:  EndIf
  BC4:  Call  GetActorVar   ( .Actor:Self 0000000B *Var0 )
  BDC:  Switch  *Var0
  BE8:  	Case  ==  00000004
  BF4:  		Call  GetActorVar   ( .Actor:Self 00000005 *Var1 )
  C0C:  		If  *Var1  <  00000000
  C1C:  			Call  RandInt   ( 00000063 *Var0 )
  C30:  			Add   *Var0  00000001
  C40:  			If  *Var0  <=  00000000
  C50:  				Set   *VarA  00000000
  C60:  				Set   *VarB  00000000
  C70:  				Set   *VarC  00000064
  C80:  				Set   *VarD  00000000
  C90:  				Set   *VarE  00000000
  CA0:  				Set   *VarF  00000000
  CB0:  			EndIf
  CB8:  		EndIf
  CC0:  	Case  ==  00000005
  CCC:  		Call  GetActorVar   ( .Actor:Self 00000006 *Var1 )
  CE4:  		If  *Var1  <  00000000
  CF4:  			Call  RandInt   ( 00000063 *Var0 )
  D08:  			Add   *Var0  00000001
  D18:  			If  *Var0  <=  00000000
  D28:  				Set   *VarA  00000000
  D38:  				Set   *VarB  00000000
  D48:  				Set   *VarC  00000000
  D58:  				Set   *VarD  00000064
  D68:  				Set   *VarE  00000000
  D78:  				Set   *VarF  00000000
  D88:  			EndIf
  D90:  		EndIf
  D98:  EndSwitch
  DA0:  Call  GetActorVar   ( .Actor:Self 00000005 *Var0 )
  DB8:  If  *Var0  >=  00000000
  DC8:  	Set   *VarC  00000000
  DD8:  EndIf
  DE0:  Call  GetActorVar   ( .Actor:Self 00000006 *Var0 )
  DF8:  If  *Var0  >=  00000000
  E08:  	Set   *VarD  00000000
  E18:  EndIf
  E20:  Call  GetActorVar   ( .Actor:Self 00000007 *Var0 )
  E38:  If  *Var0  >=  00000000
  E48:  	Set   *VarE  00000000
  E58:  EndIf
  E60:  Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
  E78:  If  *Var0  >=  00000000
  E88:  	Set   *VarF  00000000
  E98:  EndIf
  EA0:  Label  7B
  EAC:  Set   *Var9  00000000
  EBC:  Add   *Var9  *VarA
  ECC:  Add   *Var9  *VarB
  EDC:  Add   *Var9  *VarC
  EEC:  Add   *Var9  *VarD
  EFC:  Add   *Var9  *VarE
  F0C:  Add   *Var9  *VarF
  F1C:  Sub   *Var9  00000001
  F2C:  Call  RandInt   ( *Var9 *Var0 )
  F40:  Add   *Var0  00000001
  F50:  If  *Var0  <=  *VarA
  F60:  	ExecWait  $Script_ShapeSpell
  F6C:  	Return
  F74:  EndIf
  F7C:  Add   *VarA  *VarB
  F8C:  If  *Var0  <=  *VarA
  F9C:  	ExecWait  $Script_MakeCopy
  FA8:  	Return
  FB0:  EndIf
  FB8:  Add   *VarA  *VarC
  FC8:  If  *Var0  <=  *VarA
  FD8:  	ExecWait  $Script_BoostAttack
  FE4:  	Return
  FEC:  EndIf
  FF4:  Add   *VarA  *VarD
 1004:  If  *Var0  <=  *VarA
 1014:  	ExecWait  $Script_BoostDefense
 1020:  	Return
 1028:  EndIf
 1030:  Add   *VarA  *VarE
 1040:  If  *Var0  <=  *VarA
 1050:  	ExecWait  $Script_Electrify
 105C:  	Return
 1064:  EndIf
 106C:  ExecWait  $Script_Vanish
 1078:  Return
 1080:  End
}

PADDING: 80224BAC to 80224BB0 (0048BC5C to 0048BC60)
00000000

#new:Unknown $???_80224BB0
{
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
}

#new:Script $Script_BeforeBattle_80224BD0
{
    0:  Call  SetSpriteShading      ( FFFFFFFF )
   10:  Call  MakeLocalVertexCopy   ( 00000000 ~Model:hos_bt01:o345 .True )
   28:  Call  SetCustomGfxBuilders  ( 00000001 $Function_802184C0 00000000 )
   40:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o345 00000001 FFFFFFFF )
   58:  Call  SetModelFlags ( ~Model:hos_bt01:o345 00000080 .True )
   70:  Call  MakeLocalVertexCopy   ( 00000001 ~Model:hos_bt01:o338 .True )
   88:  Call  SetCustomGfxBuilders  ( 00000002 $Function_802184C0 00000000 )
   A0:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o338 00000002 FFFFFFFF )
   B8:  Call  SetModelFlags ( ~Model:hos_bt01:o338 00000080 .True )
   D0:  Call  MakeLocalVertexCopy   ( 00000002 ~Model:hos_bt01:o344 .True )
   E8:  Call  SetCustomGfxBuilders  ( 00000003 $Function_802184C0 00000000 )
  100:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o344 00000003 FFFFFFFF )
  118:  Call  SetModelFlags ( ~Model:hos_bt01:o344 00000080 .True )
  130:  Call  MakeLocalVertexCopy   ( 00000003 ~Model:hos_bt01:o354 .True )
  148:  Call  SetCustomGfxBuilders  ( 00000004 $Function_802184C0 00000000 )
  160:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o354 00000004 FFFFFFFF )
  178:  Call  SetModelFlags ( ~Model:hos_bt01:o354 00000080 .True )
  190:  Call  MakeLocalVertexCopy   ( 00000004 ~Model:hos_bt01:o341 .True )
  1A8:  Call  SetCustomGfxBuilders  ( 00000005 $Function_802184C0 00000000 )
  1C0:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o341 00000005 FFFFFFFF )
  1D8:  Call  SetModelFlags ( ~Model:hos_bt01:o341 00000080 .True )
  1F0:  Call  MakeLocalVertexCopy   ( 00000005 ~Model:hos_bt01:o352 .True )
  208:  Call  SetCustomGfxBuilders  ( 00000006 $Function_802186B8 00000000 )
  220:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o352 00000006 FFFFFFFF )
  238:  Call  SetModelFlags ( ~Model:hos_bt01:o352 00000080 .True )
  250:  Call  MakeLocalVertexCopy   ( 00000006 ~Model:hos_bt01:o346 .True )
  268:  Call  SetCustomGfxBuilders  ( 00000007 $Function_802186B8 00000000 )
  280:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o346 00000007 FFFFFFFF )
  298:  Call  SetModelFlags ( ~Model:hos_bt01:o346 00000080 .True )
  2B0:  Call  MakeLocalVertexCopy   ( 00000007 ~Model:hos_bt01:o349 .True )
  2C8:  Call  SetCustomGfxBuilders  ( 00000008 $Function_802189D0 00000000 )
  2E0:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o349 00000008 FFFFFFFF )
  2F8:  Call  SetModelFlags ( ~Model:hos_bt01:o349 00000080 .True )
  310:  Call  MakeLocalVertexCopy   ( 00000008 ~Model:hos_bt01:o353 .True )
  328:  Call  SetCustomGfxBuilders  ( 00000009 $Function_802189D0 00000000 )
  340:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o353 00000009 FFFFFFFF )
  358:  Call  SetModelFlags ( ~Model:hos_bt01:o353 00000080 .True )
  370:  Call  MakeLocalVertexCopy   ( 00000009 ~Model:hos_bt01:o347 .True )
  388:  Call  SetCustomGfxBuilders  ( 0000000A $Function_80218CEC 00000000 )
  3A0:  Call  SetModelCustomGfx     ( ~Model:hos_bt01:o347 0000000A FFFFFFFF )
  3B8:  Call  SetModelFlags ( ~Model:hos_bt01:o347 00000080 .True )
  3D0:  Thread
  3D8:  	Call  SetTexPanner  ( ~Model:hos_bt01:o332 00000000 )
  3EC:  	Call  SetTexPanner  ( ~Model:hos_bt01:o334 00000000 )
  400:  	Call  SetTexPanner  ( ~Model:hos_bt01:o333 00000000 )
  414:  	Call  SetTexPanner  ( ~Model:hos_bt01:o336 00000000 )
  428:  	Set   *Var0  00000000
  438:  	Set   *Var1  00000000
  448:  	Set   *Var2  00000000
  458:  	Set   *Var3  00000000
  468:  	Loop
  474:  		Add   *Var0  00000050
  484:  		Add   *Var1  FFFFFF6A
  494:  		If  *Var0  >  00008000
  4A4:  			Add   *Var0  FFFF8000
  4B4:  		EndIf
  4BC:  		If  *Var1  <  FFFF8000
  4CC:  			Add   *Var1  00008000
  4DC:  		EndIf
  4E4:  		Add   *Var2  FFFFFFCE
  4F4:  		Add   *Var3  00000064
  504:  		If  *Var2  <  FFFF8000
  514:  			Add   *Var2  00008000
  524:  		EndIf
  52C:  		If  *Var3  >  00008000
  53C:  			Add   *Var3  FFFF8000
  54C:  		EndIf
  554:  		Call  SetTexPanOffset   ( 00000000 00000000 *Var0 *Var1 )
  570:  		Call  SetTexPanOffset   ( 00000000 00000001 *Var2 *Var3 )
  58C:  		Wait  1`
  598:  	EndLoop
  5A0:  EndThread
  5A8:  Thread
  5B0:  	Label  2
  5BC:  	Call  MakeLerp  ( FFFFFFF9 00000007 0000001E .Easing:CosInOut )
  5D8:  	Label  0
  5E4:  	Call  UpdateLerp ( )
  5F0:  	Call  TranslateModel    ( ~Model:hos_bt01:o357 00000000 *Var0 00000000 )
  60C:  	Call  TranslateModel    ( ~Model:hos_bt01:o344 00000000 *Var0 00000000 )
  628:  	Call  TranslateModel    ( ~Model:hos_bt01:o361 00000000 *Var0 00000000 )
  644:  	Call  TranslateModel    ( ~Model:hos_bt01:o354 00000000 *Var0 00000000 )
  660:  	Call  TranslateModel    ( ~Model:hos_bt01:o341 00000000 *Var0 00000000 )
  67C:  	Call  TranslateModel    ( ~Model:hos_bt01:o362 00000000 *Var0 00000000 )
  698:  	Wait  1`
  6A4:  	If  *Var1  ==  00000001
  6B4:  		Goto  0
  6C0:  	EndIf
  6C8:  	Call  MakeLerp  ( 00000007 FFFFFFF9 0000001E .Easing:CosInOut )
  6E4:  	Label  1
  6F0:  	Call  UpdateLerp ( )
  6FC:  	Call  TranslateModel    ( ~Model:hos_bt01:o357 00000000 *Var0 00000000 )
  718:  	Call  TranslateModel    ( ~Model:hos_bt01:o344 00000000 *Var0 00000000 )
  734:  	Call  TranslateModel    ( ~Model:hos_bt01:o361 00000000 *Var0 00000000 )
  750:  	Call  TranslateModel    ( ~Model:hos_bt01:o354 00000000 *Var0 00000000 )
  76C:  	Call  TranslateModel    ( ~Model:hos_bt01:o341 00000000 *Var0 00000000 )
  788:  	Call  TranslateModel    ( ~Model:hos_bt01:o362 00000000 *Var0 00000000 )
  7A4:  	Wait  1`
  7B0:  	If  *Var1  ==  00000001
  7C0:  		Goto  1
  7CC:  	EndIf
  7D4:  	Goto  2
  7E0:  EndThread
  7E8:  Thread
  7F0:  	Label  3
  7FC:  	Call  MakeLerp  ( 00000007 FFFFFFF9 0000001E .Easing:CosInOut )
  818:  	Label  4
  824:  	Call  UpdateLerp ( )
  830:  	Call  TranslateModel    ( ~Model:hos_bt01:o363 00000000 *Var0 00000000 )
  84C:  	Call  TranslateModel    ( ~Model:hos_bt01:o343 00000000 *Var0 00000000 )
  868:  	Call  TranslateModel    ( ~Model:hos_bt01:o355 00000000 *Var0 00000000 )
  884:  	Call  TranslateModel    ( ~Model:hos_bt01:o338 00000000 *Var0 00000000 )
  8A0:  	Wait  1`
  8AC:  	If  *Var1  ==  00000001
  8BC:  		Goto  4
  8C8:  	EndIf
  8D0:  	Call  MakeLerp  ( FFFFFFF9 00000007 0000001E .Easing:CosInOut )
  8EC:  	Label  5
  8F8:  	Call  UpdateLerp ( )
  904:  	Call  TranslateModel    ( ~Model:hos_bt01:o363 00000000 *Var0 00000000 )
  920:  	Call  TranslateModel    ( ~Model:hos_bt01:o343 00000000 *Var0 00000000 )
  93C:  	Call  TranslateModel    ( ~Model:hos_bt01:o355 00000000 *Var0 00000000 )
  958:  	Call  TranslateModel    ( ~Model:hos_bt01:o338 00000000 *Var0 00000000 )
  974:  	Wait  1`
  980:  	If  *Var1  ==  00000001
  990:  		Goto  5
  99C:  	EndIf
  9A4:  	Goto  3
  9B0:  EndThread
  9B8:  Return
  9C0:  End
}

#new:Script $Script_AfterBattle_80225598
{
    0:  Return
    8:  End
}

#new:ForegroundModelList $ForegroundModelList_802255A8
{
	~Model:hos_bt01:o345
	00000000
}

#new:Stage $Stage_802255B0
{
	$ASCII_80226010  % hos_tex
	$ASCII_80226000  % hos_bt01_shape
	$ASCII_80225FF0  % hos_bt01_hit
	$Script_BeforeBattle_80224BD0
	$Script_AfterBattle_80225598
	$ASCII_80225FE8  % hos_bg
	$ForegroundModelList_802255A8
	00000000
	00000000
	00000000
}

PADDING: 802255D8 to 802255E0 (0048C688 to 0048C690)
00000000 00000000

#new:Script $Script_802255E0
{
    0:  Set   *VarA  *Var0
   10:  Label  0
   1C:  Call  TranslateModel    ( *VarA 00000000 00000002 00000000 )
   38:  Wait  5`
   44:  Call  TranslateModel    ( *VarA 00000000 00000000 00000000 )
   60:  Wait  5`
   6C:  Call  TranslateModel    ( *VarA 00000000 00000002 00000000 )
   88:  Wait  5`
   94:  Call  TranslateModel    ( *VarA 00000000 00000000 00000000 )
   B0:  Wait  5`
   BC:  Call  RandInt   ( 0000001E *Var0 )
   D0:  Add   *Var0  0000001E
   E0:  Wait  *Var0
   EC:  Goto  0
   F8:  Return
  100:  End
}

#new:Script $Script_BeforeBattle_802256E8
{
    0:  Call  SetSpriteShading  ( FFFFFFFF )
   10:  Thread
   18:  	Set   *Var0  00000013
   28:  	Exec  $Script_802255E0
   34:  	Wait  5`
   40:  	Set   *Var0  00000014
   50:  	Exec  $Script_802255E0
   5C:  	Wait  5`
   68:  	Set   *Var0  00000015
   78:  	Exec  $Script_802255E0
   84:  	Wait  5`
   90:  	Set   *Var0  00000016
   A0:  	Exec  $Script_802255E0
   AC:  	Wait  5`
   B8:  	Set   *Var0  00000017
   C8:  	Exec  $Script_802255E0
   D4:  	Wait  5`
   E0:  	Set   *Var0  00000018
   F0:  	Exec  $Script_802255E0
   FC:  	Wait  5`
  108:  	Set   *Var0  00000019
  118:  	Exec  $Script_802255E0
  124:  	Wait  5`
  130:  	Set   *Var0  0000001A
  140:  	Exec  $Script_802255E0
  14C:  	Wait  5`
  158:  	Set   *Var0  0000001B
  168:  	Exec  $Script_802255E0
  174:  	Wait  5`
  180:  	Set   *Var0  0000001C
  190:  	Exec  $Script_802255E0
  19C:  EndThread
  1A4:  Return
  1AC:  End
}

#new:Script $Script_AfterBattle_8022589C
{
    0:  Return
    8:  End
}

#new:ForegroundModelList $ForegroundModelList_802258AC
{
	~Model:nok_bt02:hap
	~Model:nok_bt02:kusa3
	00000000
}

#new:Stage $Stage_802258B8
{
	$ASCII_80226048  % nok_tex
	$ASCII_80226038  % nok_bt02_shape
	$ASCII_80226028  % nok_bt02_hit
	$Script_BeforeBattle_802256E8
	$Script_AfterBattle_8022589C
	$ASCII_80226020  % nok_bg
	$ForegroundModelList_802258AC
	00000000
	00000000
	00000000
}

#new:Script $Script_BeforeBattle_802258E0
{
    0:  Thread
    8:  	Call  SetTexPanner  ( ~Model:hos_bt02:o372 00000001 )
   1C:  	Call  SetTexPanner  ( ~Model:hos_bt02:o375 00000001 )
   30:  	Set   *Var0  00000000
   40:  	Set   *Var1  00000000
   50:  	Set   *Var2  00000000
   60:  	Set   *Var3  00000000
   70:  	Loop
   7C:  		Add   *Var0  FFFFFFCE
   8C:  		Add   *Var1  0000012C
   9C:  		Add   *Var2  0000005A
   AC:  		Add   *Var3  FFFFFF38
   BC:  		Call  SetTexPanOffset   ( 00000001 00000000 *Var0 *Var1 )
   D8:  		Call  SetTexPanOffset   ( 00000001 00000001 *Var2 *Var3 )
   F4:  		Wait  1`
  100:  	EndLoop
  108:  EndThread
  110:  Thread
  118:  	Set   *VarA  00000000
  128:  	Label  2
  134:  	Call  MakeLerp  ( FFFFFFF9 00000007 00000028 .Easing:CosInOut )
  150:  	Label  0
  15C:  	Call  UpdateLerp ( )
  168:  	Call  TranslateModel    ( ~Model:hos_bt02:o371 00000000 *Var0 00000000 )
  184:  	Call  TranslateModel    ( ~Model:hos_bt02:o372 00000000 *Var0 00000000 )
  1A0:  	Mul   *Var0  00000003
  1B0:  	Call  RotateModel       ( ~Model:hos_bt02:o371 *VarA 00000000 00000000 00000001 )
  1D0:  	Add   *VarA  FFFFFFFD
  1E0:  	Call  ClampAngleFloat   ( *VarA )
  1F0:  	Wait  1`
  1FC:  	If  *Var1  ==  00000001
  20C:  		Goto  0
  218:  	EndIf
  220:  	Call  MakeLerp  ( 00000007 FFFFFFF9 00000028 .Easing:CosInOut )
  23C:  	Label  1
  248:  	Call  UpdateLerp ( )
  254:  	Call  TranslateModel    ( ~Model:hos_bt02:o371 00000000 *Var0 00000000 )
  270:  	Call  TranslateModel    ( ~Model:hos_bt02:o372 00000000 *Var0 00000000 )
  28C:  	Mul   *Var0  00000003
  29C:  	Call  RotateModel       ( ~Model:hos_bt02:o371 *VarA 00000000 00000000 00000001 )
  2BC:  	Add   *VarA  FFFFFFFD
  2CC:  	Call  ClampAngleFloat   ( *VarA )
  2DC:  	Wait  1`
  2E8:  	If  *Var1  ==  00000001
  2F8:  		Goto  1
  304:  	EndIf
  30C:  	Goto  2
  318:  EndThread
  320:  Thread
  328:  	Set   *VarA  00000000
  338:  	Label  2
  344:  	Call  MakeLerp  ( FFFFFFF6 00000004 00000028 .Easing:CosInOut )
  360:  	Label  0
  36C:  	Call  UpdateLerp ( )
  378:  	Call  TranslateModel    ( ~Model:hos_bt02:o376 00000000 *Var0 00000000 )
  394:  	Call  TranslateModel    ( ~Model:hos_bt02:o375 00000000 *Var0 00000000 )
  3B0:  	Mul   *Var0  FFFFFFFD
  3C0:  	Call  RotateModel       ( ~Model:hos_bt02:o376 *VarA 00000000 00000000 00000001 )
  3E0:  	Add   *VarA  FFFFFFFD
  3F0:  	Call  ClampAngleFloat   ( *VarA )
  400:  	Wait  1`
  40C:  	If  *Var1  ==  00000001
  41C:  		Goto  0
  428:  	EndIf
  430:  	Call  MakeLerp  ( 00000004 FFFFFFF6 00000028 .Easing:CosInOut )
  44C:  	Label  1
  458:  	Call  UpdateLerp ( )
  464:  	Call  TranslateModel    ( ~Model:hos_bt02:o376 00000000 *Var0 00000000 )
  480:  	Call  TranslateModel    ( ~Model:hos_bt02:o375 00000000 *Var0 00000000 )
  49C:  	Mul   *Var0  FFFFFFFD
  4AC:  	Call  RotateModel       ( ~Model:hos_bt02:o376 *VarA 00000000 00000000 00000001 )
  4CC:  	Add   *VarA  FFFFFFFD
  4DC:  	Call  ClampAngleFloat   ( *VarA )
  4EC:  	Wait  1`
  4F8:  	If  *Var1  ==  00000001
  508:  		Goto  1
  514:  	EndIf
  51C:  	Goto  2
  528:  EndThread
  530:  Return
  538:  End
}

#new:Script $Script_AfterBattle_80225E20
{
    0:  Return
    8:  End
}

#new:Stage $Stage_80225E30
{
	$ASCII_80226078  % hos_tex
	$ASCII_80226068  % hos_bt02_shape
	$ASCII_80226058  % hos_bt02_hit
	$Script_BeforeBattle_802258E0
	$Script_AfterBattle_80225E20
	$ASCII_80226050  % nok_bg
	00000000
	00000000
	00000000
	00000000
}

PADDING: 80225E58 to 80225E60 (0048CF08 to 0048CF10)
00000000 00000000

#new:Formation $Formation_00
{
	$GoombarioTutor1 00000001 0000000A 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_01
{
	$Ember 00000001 0000000A 00000000 00000000 00000000 00000000
	$Ember 00000002 00000009 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_02
{
	$Ember 00000000 0000000A 00000000 00000000 00000000 00000000
	$Ember 00000001 00000009 00000000 00000000 00000000 00000000
	$Ember 00000002 00000008 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_03
{
	$FlyingMagikoopa 00000005 0000000A 00000000 00000000 00000000 00000000
}

#new:FormationTable $FormationTable
{
	$SJIS_802260B4 00000001 $Formation_00 $Stage_80225E30 00000000
	$SJIS_802260A8 00000002 $Formation_01 $Stage_802255B0 00000000
	$SJIS_8022609C 00000003 $Formation_02 $Stage_802255B0 00000000
	$SJIS_80226080 00000001 $Formation_03 $Stage_80225E30 00000000
	00000000 00000000 00000000 00000000 00000000
}

#new:StageTable $StageTable
{
	$ASCII_802260DC $Stage_802258B8
	$ASCII_802260D4 $Stage_802255B0
	$ASCII_802260CC $Stage_80225E30
	00000000 00000000
}

PADDING: 80225FA8 to 80225FB0 (0048D058 to 0048D060)
00000000 00000000

#new:ConstDouble $ConstDouble_80225FB0
{
	48.627451d
}

#new:ConstDouble $ConstDouble_80225FB8
{
	89.411765d
}

#new:ConstDouble $ConstDouble_80225FC0
{
	99.607843d
}

#new:ConstDouble $ConstDouble_80225FC8
{
	67.450980d
}

#new:ConstDouble $ConstDouble_80225FD0
{
	59.215686d
}

#new:ConstDouble $ConstDouble_80225FD8
{
	80.392157d
}

#new:ConstDouble $ConstDouble_80225FE0
{
	96.078431d
}

#new:ASCII $ASCII_80225FE8
{
	"hos_bg"
}

#new:ASCII $ASCII_80225FF0
{
	"hos_bt01_hit"
}

#new:ASCII $ASCII_80226000
{
	"hos_bt01_shape"
}

#new:ASCII $ASCII_80226010
{
	"hos_tex"
}

PADDING: 80226018 to 80226020 (0048D0C8 to 0048D0D0)
00000000 00000000

#new:ASCII $ASCII_80226020
{
	"nok_bg"
}

#new:ASCII $ASCII_80226028
{
	"nok_bt02_hit"
}

#new:ASCII $ASCII_80226038
{
	"nok_bt02_shape"
}

#new:ASCII $ASCII_80226048
{
	"nok_tex"
}

#new:ASCII $ASCII_80226050
{
	"nok_bg"
}

#new:ASCII $ASCII_80226058
{
	"hos_bt02_hit"
}

#new:ASCII $ASCII_80226068
{
	"hos_bt02_shape"
}

#new:ASCII $ASCII_80226078
{
	"hos_tex"
}

#new:SJIS $SJIS_80226080
{
	カメック（ＡＣヘルプご） % kamekku（ＡＣherupugo）
}

#new:SJIS $SJIS_8022609C
{
	エルモスx３ % erumosux3
}

#new:SJIS $SJIS_802260A8
{
	エルモスx２ % erumosux2
}

#new:SJIS $SJIS_802260B4
{
	クリオ（ＡＣヘルプ） % kurio（ＡＣherupu）
}

#new:ASCII $ASCII_802260CC
{
	"hos_02"
}

#new:ASCII $ASCII_802260D4
{
	"hos_01"
}

#new:ASCII $ASCII_802260DC
{
	"hos_00"
}

PADDING: 802260E4 to 802260F0 (0048D194 to 0048D1A0)
00000000 00000000 00000000

