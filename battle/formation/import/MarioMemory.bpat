%Animations
#define .marioStill         00A20000
#define .marioIdle          00A20001
#define .marioRun           00A20002
#define .marioJump          00A20003
#define .marioRaiseMushroom 00A20004
#define .marioThrowMushroom 00A20005
#define .blockMushroom      00A20006
#define .marioRaiseStar     00A20007
#define .marioThrowStar     00A20008
#define .blockStar          00A20009
#define .marioHurt          00A2000A
#define .marioDead          00A2000B
#define .marioBurnHurt      00A2000C
#define .marioBurnDead      00A2000D
#define .marioDizzy         00A2000E
#define .marioSleep         00A2000F

%Memory Mario parts
#define .marioPart 1
#define .starPart 2

%Memory Mario stats
#define .memoryMarioHP 50`b
#define .marioJumpAttackDamage 6`
#define .marioDashDamage 5`

#new:Actor $MarioMemory {
    % stats
    [Index]         7b 
    [Level]         5`b 
    [MaxHP]         .memoryMarioHP
    [Coins]         1`b 
    [Flags]       00000000 
    [StatusTable] $StatusTable_MemoryMario 
    % ai
    [PartsCount]    2`s 
    [PartsTable]  $PartsTable_MemoryMario0
    [Script]      $Script_Init_MemoryMario 
    % move effectiveness
    [Escape]       90`b 
    [Item]        100`b 
    [AirLift]     100`b 
    [Hurricane]    90`b % Bow's "Spook" as well
    [UpAndAway]    95`b 
    [PowerBounce] 100`b 
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  24`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:DefenseTable $DefenseTable_MemoryMario {
.Element:Normal 00000000
.Element:End
}

#new:StatusTable $StatusTable_MemoryMario {
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep     100`
.Status:Poison    100`
.Status:Frozen    100`
.Status:Dizzy     100`
.Status:Fear      100`
.Status:Static    100`
.Status:Paralyze  100`
.Status:Shrink    100`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_MemoryMario0 { %ActorPartBlueprint struct in decomp
/% s32 flags %/                 00800000
/% s8 index %/                  ~Byte:.marioPart
/% Vec3b posOffset %/           00b 00b 00b
/% Vec2b targetOffset %/        00b 2Bb %for cursor when selecting to attack in battle
/% s16 opacity %/               00FFs
/% s32* IdleAnimations %/       $IdleAnimations_MemoryMario
/% s32* defenseTable %/         $DefenseTable_MemoryMario
/% s32 eventFlags %/            00000000
/% s32 elementImmunityFlags %/  00000000
/% s8 unk_1C %/                 00b
/% s8 unk_1D %/                 F6b
/% s8 unk_1E %/                 00b
/% s8 unk_1F %/                 00b
/% s8 unk_20 %/                 00000000 

%star
/% s32 flags %/                 00120001
/% s8 index %/                  ~Byte:.starPart
/% Vec3b posOffset %/           00b 00b 00b
/% Vec2b targetOffset %/        00b 00b %for cursor when selecting to attack in battle
/% s16 opacity %/               00FFs
/% s32* IdleAnimations %/       $IdleAnimations_Star
/% s32* defenseTable %/         $DefenseTable_MemoryMario
/% s32 eventFlags %/            00000000
/% s32 elementImmunityFlags %/  00000000
/% s8 unk_1C %/                 00b
/% s8 unk_1D %/                 00b
/% s8 unk_1E %/                 00b
/% s8 unk_1F %/                 00b
/% s8 unk_20 %/                 00000000
}

#new:IdleAnimations $IdleAnimations_Star {
    .Status:Normal    .blockStar
    .Status:End
    }

#new:IdleAnimations $IdleAnimations_MemoryMario {
.Status:Normal    .marioIdle
.Status:Stone     .marioIdle
.Status:Sleep     .marioSleep
.Status:Poison    .marioIdle
.Status:Stop      .marioStill
.Status:Static    .marioIdle
.Status:Paralyze  .marioIdle
.Status:Dizzy     .marioDizzy
.Status:Fear      .marioIdle
.Status:End
}

#new:Script $Script_Init_MemoryMario {
    Call BindTakeTurn      ( .Actor:Self $Script_TakeTurn_MemoryMario )
    Call BindIdle  ( .Actor:Self $Script_Idle_MemoryMario )
    Call BindHandleEvent   ( .Actor:Self $Script_HandleEvent_MemoryMario )
    Return
    End
}

#new:Script $Script_Idle_MemoryMario {
    Return
    End
}

#new:Script $Script_HandleEvent_MemoryMario {
    Call UseIdleAnimation  ( .Actor:Self .False )
    Call EnableIdleScript  ( .Actor:Self .False )
    Call SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call GetLastEvent      ( .Actor:Self *Var0 )

    Switch  *Var0 
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            SetConst  *Var0  .marioPart 
            SetConst  *Var1  .marioHurt 
            ExecWait  DoNormalHit
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var0  .marioPart 
            SetConst  *Var1  .marioBurnHurt 
            SetConst  *Var2  .marioBurnDead 
        ExecWait  DoBurnHit
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var0  .marioPart 
            SetConst  *Var1  .marioBurnHurt 
            SetConst  *Var2  .marioBurnDead 
            ExecWait  DoBurnHit 
            SetConst  *Var0  .marioPart 
            SetConst  *Var1  .marioBurnDead 
            ExecWait  DoDeath 
            Return
        Case  ==  .Event:Death % 20
            SetConst  *Var0  .marioPart 
            SetConst  *Var1  .marioHurt 
            ExecWait  DoNormalHit 
            Wait  10`
            SetConst  *Var0  .marioPart  
            SetConst  *Var1  .marioDead
            ExecWait  DoDeath 
            Return
    EndSwitch
    % 174:  	Case  ==  .Event:SpinSmashHit % B
    % 180:  		SetConst  *Var0  00000001 
    % 190:  		SetConst  *Var1  00260005 
    % 1A0:  		ExecWait  DoSpinSmashHit 
    % 1AC:  	Case  ==  .Event:SpinSmashDeath % 21
    % 1B8:  		SetConst  *Var0  00000001 
    % 1C8:  		SetConst  *Var1  00260005 
    % 1D8:  		ExecWait  DoSpinSmashHit 
    % 1E4:  		SetConst  *Var0  00000001 
    % 1F4:  		SetConst  *Var1  00260006 
    % 204:  		ExecWait  DoDeath 
    % 210:  		Return
    % 218:  	Case  ==  .Event:ShockHit % 2F
    % 224:  		SetConst  *Var0  00000001 
    % 234:  		SetConst  *Var1  0026000E 
    % 244:  		ExecWait  DoShockHit 
    % 250:  		SetConst  *Var0  00000001 
    % 260:  		SetConst  *Var1  00260005 
    % 270:  		ExecWait  DoJumpBack 
    % 27C:  		Call JumpToGoal    ( .Actor:Self  5` .False .True .False )
    % 29C:  		Call SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
    % 2B4:  		Call SetAnimation  ( .Actor:Self 00000001 00260007 )
    % 2CC:  		Call SetGoalToHome ( .Actor:Self )
    % 2DC:  		Call SetActorSpeed ( .Actor:Self *Fixed[8.0] )
    % 2F0:  		Call RunToGoal     ( .Actor:Self  0` .False )
    % 308:  		Call SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
    % 320:  		Wait  5`
    % 32C:  		Call SetAnimation  ( .Actor:Self 00000001 00260001 )
    % 344:  		Call SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
    % 358:  		Call JumpToGoal    ( .Actor:Self  5` .False .True .False )
    % 378:  	Case  ==  .Event:ShockDeath % 26
    % 384:  		SetConst  *Var0  00000001 
    % 394:  		SetConst  *Var1  0026000E 
    % 3A4:  		ExecWait  DoShockHit 
    % 3B0:  		SetConst  *Var0  00000001 
    % 3C0:  		SetConst  *Var1  00260006 
    % 3D0:  		ExecWait  DoDeath 
    % 3DC:  		Return
    % 3E4:  	Case  ==  .Event:StarBeam % 13
    % 3F0:  	CaseOR  ==  00000017 % 17
    % 3FC:  	CaseOR  ==  .Event:Immune % 19
    % 408:  	CaseOR  ==  .Event:AirLiftFailed % 1F
    % 414:  		SetConst  *Var0  00000001 
    % 424:  		SetConst  *Var1  00260001 
    % 434:  		ExecWait  DoImmune 
    % 440:  	EndCaseGroup
    % 448:  	Case  ==  .Event:Death % 20
    % 454:  		SetConst  *Var0  00000001 
    % 464:  		SetConst  *Var1  .marioHurt 
    % 474:  		ExecWait  DoNormalHit 
    % 480:  		Wait  10`
    % 48C:  		SetConst  *Var0  00000001 
    % 49C:  		SetConst  *Var1  .marioDeath
    % 4AC:  		ExecWait  DoDeath 
    % 4B8:  		Return
    % 4C0:  	Case  ==  .Event:EndFirstStrike % 35
    % 4CC:  		Call SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
    % 4E4:  		Call SetAnimation  ( .Actor:Self 00000001 00260003 )
    % 4FC:  		Call SetGoalToHome ( .Actor:Self )
    % 50C:  		Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    % 520:  		Call RunToGoal     ( .Actor:Self  0` .False )
    % 538:  		Call SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
    % 550:  		Call HPBarToHome   ( .Actor:Self )
    % 560:  	Case  ==  .Event:RecoverStatus % 31
    % 56C:  		SetConst  *Var0  00000001 
    % 57C:  		SetConst  *Var1  00260001 
    % 58C:  		ExecWait  DoRecover 
    % 598:  	Case  ==  .Event:ScareAway % 39
    % 5A4:  		SetConst  *Var0  00000001 
    % 5B4:  		SetConst  *Var1  00260003 
    % 5C4:  		SetConst  *Var2  00260005 
    % 5D4:  		ExecWait  DoScareAway 
    % 5E0:  		Return
    % 5E8:  	Case  ==  .Event:BeginAirLift % 3A
    % 5F4:  		SetConst  *Var0  00000001 
    % 604:  		SetConst  *Var1  00260003 
    % 614:  		ExecWait  DoAirLift 
    % 620:  	Case  ==  .Event:BlowAway % 16
    % 62C:  		SetConst  *Var0  00000001 
    % 63C:  		SetConst  *Var1  00260005 
    % 64C:  		ExecWait  DoBlowAway 
    % 658:  		Return
    % 660:  	Default
    % 668:  EndSwitch
    Call SetAnimation      ( .Actor:Self .marioPart .marioIdle )
    Call EnableIdleScript  ( .Actor:Self .True )
    Call UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}

#new:FloatTable $FloatTable_MemoryMario {
0.0      0.017452 0.034899 0.052336 0.069756 0.087156 0.104528 0.121869
0.139173 0.156434 0.173648 0.190809 0.207912 0.224951 0.241922 0.258819
0.275637 0.292372 0.309017 0.325568 0.34202  0.358368 0.374607 0.390731
0.406737 0.422618 0.438371 0.45399  0.469472 0.48481  0.5      0.515038
0.529919 0.544639 0.559193 0.573576 0.587785 0.601815 0.615661 0.62932
0.642788 0.656059 0.669131 0.681998 0.694658 0.707107 0.71934  0.731354
0.743145 0.75471  0.766044 0.777146 0.788011 0.798636 0.809017 0.819152
0.829038 0.838671 0.848048 0.857167 0.866025 0.87462  0.882948 0.891007
0.898794 0.906308 0.913545 0.920505 0.927184 0.93358  0.939693 0.945519
0.951057 0.956305 0.961262 0.965926 0.970296 0.97437  0.978148 0.981627
0.984808 0.987688 0.990268 0.992546 0.994522 0.996195 0.997564 0.99863
0.999391 0.999848 1.0
}

%Call EnableActorGlow   ( .Actor:Self .True ) for rainbow effect

#new:Script $MarioJumpAttack {
    %memory mario takes a step forward before jumping
    Call SetAnimation ( .Actor:Self .marioPart .marioRun )
    Call GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
    Add *Var0 -25
    Call SetGoalPos ( .Actor:Self *Var0 *Var1 *Var2 )
    Call SetActorSpeed ( .Actor:Self *Fixed[3.0] )
    Call RunToGoal ( .Actor:Self 0` .True )

    %memory mario jump to mario
    Call RandInt ( 6` *Var0 )
    Call SetAnimation  ( .Actor:Self .marioPart .marioJump )
    Call SetActorJumpGravity   ( .Actor:Self *Fixed[1.5] )
    Call GetActorPos ( .Actor:Player *Var1 *Var2 *Var3 )
    Add *Var3 1` %add 1 to Z pos to remove Z fighting
    Call SetGoalPos ( .Actor:Self *Var1 *Var2 *Var3 )
    Add *Var0 23`
    Call JumpToGoal    ( .Actor:Self  *Var0 .False .True .False )
    Call PlayEffect (~FX:ShockWave:White *Var1 *Var2 *Var3)
    Call PlaySoundAtActor (.Actor:Self .Sound:Slam)
    
    %move goal position so damage stars appear in a good location
    Add *Var2 32`
    Call SetGoalPos ( .Actor:Self *Var1 *Var2 *Var3 )

    %damage target if not invisible
    Call EnemyTestTarget   ( .Actor:Self *Var1 ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var1 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
        Default
            Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 .marioJumpAttackDamage 00000020 )
    EndSwitch

    %memory mario returns to home
    Call SetAnimation ( .Actor:Self .marioPart .marioIdle )
    Wait 5`
    Call SetAnimation ( .Actor:Self .marioPart .marioRun )
    Call SetGoalToHome ( .Actor:Self )
    Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    Call RunToGoal ( .Actor:Self 0` .True )
    
    Return
    End
}

#new:Script $MarioRunAttack {
    %mario uses star
    Call SetAnimation( .Actor:Self .marioPart .marioRaiseStar)
    Wait 13` %animation of star raise
    Call SetAnimation( .Actor:Self .marioPart .marioThrowStar)
    Wait 18`
    Call SetAnimation( .Actor:Self .marioPart .marioIdle)

    %throw star into air
    Call GetActorPos ( .Actor:Self *Var3 *Var1 *Var2 )
    Set *Var0 *Var3
    Add *Var3 -18` %offset star starting X position
    Add *Var2 1` %get rid of Z fighting
    Call SetPartPos        ( .Actor:Self .starPart  *Var3  *Var1  *Var2 )
    Call SetPartScale  ( .Actor:Self .starPart *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call SetPartJumpGravity    ( .Actor:Self .starPart *Fixed[4.0] )
    Call SetPartFlagBits   ( .Actor:Self .starPart 00000001 .False )
    Add *Var1 20` %jump to mario's head and then disappear
    Call JumpPartTo        ( .Actor:Self .starPart *Var0 *Var1 *Var2  15` .True )
    Call SetPartFlagBits   ( .Actor:Self .starPart 00000001 .True )
    Call PlaySoundAtActor (.Actor:Self .Sound:Star)
    Call PlayEffect(~FX:Sparkles:Star *Var0 *Var1 *Var2 32` )
    Call EnableActorGlow ( .Actor:Self .True )
    Wait 20`

    %mario running attacking player
    Call SetAnimation( .Actor:Self .marioPart .marioRun)
    Call SetGoalToTarget ( .Actor:Self )
    Call SetActorSpeed ( .Actor:Self *Fixed[10.5] )
    Call RunToGoal ( .Actor:Self 0` .True )

    %damage target if not invisible
    Call EnemyTestTarget   ( .Actor:Self *Var1 ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var1 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
        Default
            Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 .marioDashDamage 00000020 )
    EndSwitch

    %run off screen
    Call AddGoalPos ( .Actor:Self -180` 0` 0` )
    Call SetActorSpeed ( .Actor:Self *Fixed[10.5] )
    Call RunToGoal ( .Actor:Self 0` .True )

    %wrap around from left of screen to right and then walk back to home position
    Wait 30`
    Call SetAnimation ( .Actor:Self .marioPart .marioRun )
    Call SetActorPos ( .Actor:Self 200` 0` 0` )
    Call SetGoalToHome ( .Actor:Self )
    Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    Call RunToGoal ( .Actor:Self 0` .True )
    Call EnableActorGlow ( .Actor:Self .False )
    Return
    End
}

#new:Script $Script_TakeTurn_MemoryMario {
    Call UseIdleAnimation  ( .Actor:Self .False )
    Call EnableIdleScript  ( .Actor:Self .False )
    Call RandInt ( 99` *Var0 )

    If *Var0 < 50`
        ExecWait $MarioJumpAttack
    Else
        ExecWait $MarioRunAttack
    EndIf

    Call EnableIdleScript  ( .Actor:Self .True )
    Call UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}
    