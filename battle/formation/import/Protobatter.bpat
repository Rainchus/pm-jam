%Animations
#define .protoStill     00280000
#define .protoIdle      00280001
#define .protoWalk      00280002
#define .protoRun       00280003
#define .protoSpit      00280004
#define .protoHit       00280005
#define .bulletGrow     00280006
#define .bullet         00280007
#define .protoGrow1     00280008
#define .protoGrow2     00280009
#define .protoHurt      0028000A
#define .protoDead      0028000B
#define .protoBurnHurt  0028000C
#define .protoBurnDead  0028000D
#define .protoDizzy     0028000E
#define .protoSleep     0028000F

%Actor variables
#define .protoScaleVar 0
#define .protoCursorVar 1

%Protobatter sizes
#define .protoSizeNormal    0
#define .protoSizeLarge     1
#define .protoSizeMax       2

%Cursor positions depending on size
#define .cursorPositionIndex0 0
#define .cursorPositionIndex1 1
#define .cursorPositionIndex2 2

%Protobatter parts
#define .protoPart 1
#define .bulletPart 2

%Protobatter stats
#define .protoHP 9`b
#define .protoNormalDamageSpitHit 3`
#define .protoLargeDamageHitSpit 4`
#define .protoMaxDamageHitSpit 5`
#define .protobatterThrowDamage 6`
#define .protobatterHitDamage 5`

#new:Actor $Protobatter {
    % stats
    [Index]         D6b 
    [Level]         5`b 
    [MaxHP]         .protoHP
    [Coins]         1`b 
    [Flags]       00000000 
    [StatusTable] $StatusTable_Protobatter
    % ai
    [PartsCount]    2`s 
    [PartsTable]  $PartsTable_Protobatter
    [Script]      $Script_Init_Protobatter
    % move effectiveness
    [Escape]       90`b 
    [Item]        100`b 
    [AirLift]     100`b 
    [Hurricane]    90`b % Bow's "Spook" as well
    [UpAndAway]    95`b 
    [PowerBounce] 100`b 
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         24`b  24`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -10`b  20`b % dx dy
    [StatusIcon]   10`b  20`b % dx dy
}

#new:DefenseTable $DefenseTable_Protobatter {
.Element:Normal 00000000
.Element:End
}

#new:StatusTable $StatusTable_Protobatter {
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep     100`
.Status:Poison    100`
.Status:Frozen    100`
.Status:Dizzy     100`
.Status:Fear      100`
.Status:Static    100`
.Status:Paralyze  100`
.Status:Shrink    100`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_Protobatter { %ActorPartBlueprint struct in decomp
/% s32 flags %/                 00800000
/% s8 index %/                  01b
/% Vec3b posOffset %/           00b 00b 00b
/% Vec2b targetOffset %/        00b 24b %for cursor when selecting to attack in battle
/% s16 opacity %/               00FFs
/% s32* IdleAnimations %/       $IdleAnimations_Protobatter
/% s32* defenseTable %/         $DefenseTable_Protobatter
/% s32 eventFlags %/            00000000
/% s32 elementImmunityFlags %/  00000000
/% s8 unk_1C %/                 00b
/% s8 unk_1D %/                 F6b
/% s8 unk_1E %/                 00b
/% s8 unk_1F %/                 00b
/% s8 unk_20 %/                 00000000

%bullet
/% s32 flags %/                 00120001
/% s8 index %/                  02b
/% Vec3b posOffset %/           00b 00b 00b
/% Vec2b targetOffset %/        00b 00b %for cursor when selecting to attack in battle
/% s16 opacity %/               00FFs
/% s32* IdleAnimations %/       $IdleAnimations_ProtobatterBullet
/% s32* defenseTable %/         $DefenseTable_Protobatter
/% s32 eventFlags %/            00000000
/% s32 elementImmunityFlags %/  00000000
/% s8 unk_1C %/                 00b
/% s8 unk_1D %/                 00b
/% s8 unk_1E %/                 00b
/% s8 unk_1F %/                 00b
/% s8 unk_20 %/                 00000000
}

#new:IdleAnimations $IdleAnimations_ProtobatterBullet {
    .Status:Normal    .bullet
    .Status:End
}

#new:IdleAnimations $IdleAnimations_Protobatter {
.Status:Normal    .protoIdle
.Status:Stone     .protoIdle
.Status:Sleep     .protoSleep
.Status:Poison    .protoIdle
.Status:Stop      .protoStill
.Status:Static    .protoIdle
.Status:Paralyze  .protoIdle
.Status:Dizzy     .protoDizzy
.Status:Fear      .protoIdle
.Status:End
}

#new:Script $Script_Init_Protobatter {
    Call BindTakeTurn ( .Actor:Self $Script_TakeTurn_Protobatter )
    Call BindIdle ( .Actor:Self $Script_Idle_Protobatter )
    Call BindHandleEvent ( .Actor:Self $Script_HandleEvent_Protobatter )
    Call SetActorVar ( .Actor:Self .protoScaleVar 0` ) %init proto to normal size
    Call SetActorVar ( .Actor:Self .protoCursorVar 0` ) %cursor when selecting to attack enemy init
    Return
    End
}

#new:Script $Script_Idle_Protobatter {
    Return
    End
}

#new:Script $ProtoAnimSetScale {
    Call GetActorVar ( .Actor:Self .protoScaleVar *Var0 )
    Switch *Var0
        Case == .protoSizeNormal
            Call SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
        Case == .protoSizeLarge
            Call SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call SetActorScale ( .Actor:Self *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
        Case == .protoSizeMax
            Call SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call SetActorScale ( .Actor:Self *Fixed[2.25] *Fixed[2.25] *Fixed[2.25] )
        EndSwitch
    Return
    End
}

#new:Script $ProtobatterGrow {
    Call GetActorVar ( .Actor:Self .protoScaleVar *Var0 )
    Call PlaySoundAtActor ( .Actor:Self .Sound:Rise )
    Switch *Var0
        Case == .protoSizeNormal
            Call SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call PlaySoundAtActor ( .Actor:Self .Sound:Rise )
            Call SetAnimation ( .Actor:Self .protoPart .protoGrow1 )
            Call SetActorVar ( .Actor:Self .protoScaleVar .protoSizeLarge )
            Wait 20`
            Call SetAnimation ( .Actor:Self .protoPart .protoIdle )
            Call SetActorScale ( .Actor:Self *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
        Case == .protoSizeLarge
            Call SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
            Call PlaySoundAtActor ( .Actor:Self .Sound:Rise )
            Call SetAnimation ( .Actor:Self .protoPart .protoGrow2 )
            Call SetActorVar ( .Actor:Self .protoScaleVar .protoSizeMax )
            Wait 20`
            Call SetAnimation ( .Actor:Self .protoPart .protoIdle )
            Call SetActorScale ( .Actor:Self *Fixed[2.25] *Fixed[2.25] *Fixed[2.25] )
        Default
    EndSwitch

    Return
    End
}

#new:Script $Script_HandleEvent_Protobatter {
    Call UseIdleAnimation  ( .Actor:Self .False )
    Call EnableIdleScript  ( .Actor:Self .False )
    Call SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call GetLastEvent      ( .Actor:Self *Var0 )

    Switch  *Var0 
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            ExecWait $ProtoAnimSetScale
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoHurt 
            ExecWait  DoNormalHit
            ExecWait $ProtobatterGrow
        EndCaseGroup 
            Case  ==  .Event:BurnHit % E
            ExecWait $ProtoAnimSetScale
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoBurnHurt 
            SetConst  *Var2  .protoBurnDead 
            ExecWait  DoBurnHit 
        Case  ==  .Event:BurnDeath % 24
            ExecWait $ProtoAnimSetScale
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoBurnHurt
            SetConst  *Var2  .protoBurnDead
            ExecWait  DoBurnHit 
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoBurnDead
            ExecWait  DoDeath 
            Return
        Case  ==  .Event:Death % 20
            ExecWait $ProtoAnimSetScale
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoHurt 
            ExecWait  DoNormalHit
            Wait  10`
            SetConst  *Var0  .protoPart 
            SetConst  *Var1  .protoDead
            ExecWait  DoDeath 
            Return
    EndSwitch
    ExecWait $ProtoAnimSetScale
    % 174:  	Case  ==  .Event:SpinSmashHit % B
    % 180:  		SetConst  *Var0  00000001 
    % 190:  		SetConst  *Var1  00260005 
    % 1A0:  		ExecWait  DoSpinSmashHit 
    % 1AC:  	Case  ==  .Event:SpinSmashDeath % 21
    % 1B8:  		SetConst  *Var0  00000001 
    % 1C8:  		SetConst  *Var1  00260005 
    % 1D8:  		ExecWait  DoSpinSmashHit 
    % 1E4:  		SetConst  *Var0  00000001 
    % 1F4:  		SetConst  *Var1  00260006 
    % 204:  		ExecWait  DoDeath 
    % 210:  		Return
    % 218:  	Case  ==  .Event:ShockHit % 2F
    % 224:  		SetConst  *Var0  00000001 
    % 234:  		SetConst  *Var1  0026000E 
    % 244:  		ExecWait  DoShockHit 
    % 250:  		SetConst  *Var0  00000001 
    % 260:  		SetConst  *Var1  00260005 
    % 270:  		ExecWait  DoJumpBack 
    % 27C:  		Call JumpToGoal    ( .Actor:Self  5` .False .True .False )
    % 29C:  		Call SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
    % 2B4:  		Call SetAnimation  ( .Actor:Self 00000001 00260007 )
    % 2CC:  		Call SetGoalToHome ( .Actor:Self )
    % 2DC:  		Call SetActorSpeed ( .Actor:Self *Fixed[8.0] )
    % 2F0:  		Call RunToGoal     ( .Actor:Self  0` .False )
    % 308:  		Call SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
    % 320:  		Wait  5`
    % 32C:  		Call SetAnimation  ( .Actor:Self 00000001 00260001 )
    % 344:  		Call SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
    % 358:  		Call JumpToGoal    ( .Actor:Self  5` .False .True .False )
    % 378:  	Case  ==  .Event:ShockDeath % 26
    % 384:  		SetConst  *Var0  00000001 
    % 394:  		SetConst  *Var1  0026000E 
    % 3A4:  		ExecWait  DoShockHit 
    % 3B0:  		SetConst  *Var0  00000001 
    % 3C0:  		SetConst  *Var1  00260006 
    % 3D0:  		ExecWait  DoDeath 
    % 3DC:  		Return
    % 3E4:  	Case  ==  .Event:StarBeam % 13
    % 3F0:  	CaseOR  ==  00000017 % 17
    % 3FC:  	CaseOR  ==  .Event:Immune % 19
    % 408:  	CaseOR  ==  .Event:AirLiftFailed % 1F
    % 414:  		SetConst  *Var0  00000001 
    % 424:  		SetConst  *Var1  00260001 
    % 434:  		ExecWait  DoImmune 
    % 440:  	EndCaseGroup
    % 448:  	Case  ==  .Event:Death % 20
    % 454:  		SetConst  *Var0  .protoPart 
    % 464:  		SetConst  *Var1  .protoHurt 
    % 474:  		ExecWait  DoNormalHit 
    % 480:  		Wait  10`
    % 48C:  		SetConst  *Var0  .protoPart 
    % 49C:  		SetConst  *Var1  .protoDeath
    % 4AC:  		ExecWait  DoDeath 
    % 4B8:  		Return
    % 4C0:  	Case  ==  .Event:EndFirstStrike % 35
    % 4CC:  		Call SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
    % 4E4:  		Call SetAnimation  ( .Actor:Self 00000001 00260003 )
    % 4FC:  		Call SetGoalToHome ( .Actor:Self )
    % 50C:  		Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    % 520:  		Call RunToGoal     ( .Actor:Self  0` .False )
    % 538:  		Call SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
    % 550:  		Call HPBarToHome   ( .Actor:Self )
    % 560:  	Case  ==  .Event:RecoverStatus % 31
    % 56C:  		SetConst  *Var0  00000001 
    % 57C:  		SetConst  *Var1  00260001 
    % 58C:  		ExecWait  DoRecover 
    % 598:  	Case  ==  .Event:ScareAway % 39
    % 5A4:  		SetConst  *Var0  00000001 
    % 5B4:  		SetConst  *Var1  00260003 
    % 5C4:  		SetConst  *Var2  00260005 
    % 5D4:  		ExecWait  DoScareAway 
    % 5E0:  		Return
    % 5E8:  	Case  ==  .Event:BeginAirLift % 3A
    % 5F4:  		SetConst  *Var0  00000001 
    % 604:  		SetConst  *Var1  00260003 
    % 614:  		ExecWait  DoAirLift 
    % 620:  	Case  ==  .Event:BlowAway % 16
    % 62C:  		SetConst  *Var0  00000001 
    % 63C:  		SetConst  *Var1  00260005 
    % 64C:  		ExecWait  DoBlowAway 
    % 658:  		Return
    % 660:  	Default
    % 668:  EndSwitch
          ExecWait $ProtoAnimSetScale
    670:  Call SetAnimation      ( .Actor:Self .protoPart .protoIdle )
    688:  Call EnableIdleScript  ( .Actor:Self .True )
    69C:  Call UseIdleAnimation  ( .Actor:Self .True )
    6B0:  Return
    6B8:  End
}

#new:Script $ProtobatterSwing {
    %run to player
    Call SetTargetActor ( .Actor:Self .Actor:Player )
    Call SetGoalToTarget   ( .Actor:Self )
    Call AddGoalPos ( .Actor:Self 20` 0` 0` )
    Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    ExecWait $ProtoAnimSetScale
    Call SetAnimation ( .Actor:Self .protoPart .protoRun )
    Call RunToGoal ( .Actor:Self 30` .False )
    ExecWait $ProtoAnimSetScale
    Call SetAnimation  ( .Actor:Self .protoPart .protoHit )
    Wait 26` %duration of swing

    %move damage star position to a normal location
    Call SetGoalToTarget   ( .Actor:Self )

    %damage target if not invisible
    Call EnemyTestTarget   ( .Actor:Self *Var1 ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var1 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
        Default
            Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 .protobatterHitDamage 00000020 )
    EndSwitch

    %idle for a bit
    ExecWait $ProtoAnimSetScale
    Call SetAnimation  ( .Actor:Self .protoPart .protoIdle )
    Wait 6`

    %run back to home
    ExecWait $ProtoAnimSetScale
    Call SetAnimation ( .Actor:Self .protoPart .protoRun )
    Call SetGoalToHome ( .Actor:Self )
    Call SetActorSpeed ( .Actor:Self *Fixed[4.0] )
    Call RunToGoal ( .Actor:Self 0` .True )
    
    Return
    End
}

#new:Script $ProtobatterSpit { %spit directly hit mario
    Call SetAnimation ( .Actor:Self .protoPart .protoSpit )
    Wait 20`
    Call GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )

    Call GetActorVar ( .Actor:Self .protoScaleVar *Var4 ) %get proto scale size
    Switch *Var4
        Case == .protoSizeNormal
            %offset 1
        Case == .protoSizeLarge
            %offset 2
        Case == .protoSizeMax
            %offset 3
    EndSwitch

    Add *Var2 1` %fix Z fighting
    Call SetPartPos        ( .Actor:Self .bulletPart  *Var0  *Var1  *Var2 )
    Call SetPartScale  ( .Actor:Self .bulletPart *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call SetPartJumpGravity    ( .Actor:Self .bulletPart *Fixed[0.0] )
    Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .False )
    Call SetGoalToTarget   ( .Actor:Self )
    Call GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )

    Call EnemyTestTarget   ( .Actor:Self *Var3 ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var3 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Call JumpPartTo        ( .Actor:Self .bulletPart *Var0 *Var1 *Var2  15` .True )
            Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .True )
            Wait  2`
        EndCaseGroup

        Default
            Call JumpPartTo        ( .Actor:Self .bulletPart *Var0 *Var1 *Var2  15` .True )
            Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .True )
            Wait  2`
            Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 3` 00000020 )
    EndSwitch

    Return
    End
}

#new:Script $ProtobatterHitSpit { %protobatter hits spit with club at mario
    %initial spit animation
    Call SetAnimation ( .Actor:Self .protoPart .protoSpit )
    Wait 20`

    %spit out bullet
    Call GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
    Call GetActorVar ( .Actor:Self .protoScaleVar *Var3 )

    %change bullet starting Y position based on size
    Switch *Var3
    Case == .protoSizeNormal
        Add *Var1 10`
    Case == .protoSizeLarge
        Add *Var1 15`
    Case == .protoSizeMax
        Add *Var1 20`
    EndSwitch
        
    Call SetAnimation ( .Actor:Self .bulletPart .bulletGrow )
    Call SetPartPos        ( .Actor:Self .bulletPart  *Var0  *Var1  *Var2 )
    Call SetPartScale  ( .Actor:Self .bulletPart *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    Call SetPartJumpGravity    ( .Actor:Self .bulletPart *Fixed[0.0] )
    Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .False )

    %change spit bullet location X before hit depending on scale
    Call GetActorVar ( .Actor:Self .protoScaleVar *Var3 )
    Switch *Var3
    Case == .protoSizeNormal
        Add *Var0 -30`
    Case == .protoSizeLarge
        Add *Var0 -35`
    Case == .protoSizeMax
        Add *Var0 -40`
    EndSwitch
    
    Add *Var2 1` %fix Z fighting
    Call JumpPartTo        ( .Actor:Self .bulletPart *Var0 *Var1 *Var2  5` .False )
    Wait 4`
    Call SetAnimation ( .Actor:Self .bulletPart .bullet )
    Wait 6`

    %protobatter hits bullet
    Call SetAnimation ( .Actor:Self .protoPart .protoHit )
    Wait 26` %duration of swing
    Call GetActorPos ( .Actor:Player *Var0 *Var1 *Var2 )
    Add *Var1 16`

    Call SetGoalToTarget   ( .Actor:Self )
    Call GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )

    %test if protobatter can hit mario
    Call EnemyTestTarget   ( .Actor:Self *Var3 ~Flags:DamageType:0 00000000 00000001 00000010 )
    Switch  *Var3 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Add *Var0 -180`
            Call JumpPartTo        ( .Actor:Self .bulletPart *Var0 *Var1 *Var2  20` .True )
            Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .True )
            Wait  2`
        EndCaseGroup

        Default
            Call JumpPartTo        ( .Actor:Self .bulletPart *Var0 *Var1 *Var2  15` .True )
            Call SetPartFlagBits   ( .Actor:Self .bulletPart 00000001 .True )
            Call GetActorVar ( .Actor:Self .protoScaleVar *Var4 ) %get proto scale size
            Switch *Var4
                Case == .protoSizeNormal
                    Set *Var5 .protoNormalDamageSpitHit
                Case == .protoSizeLarge
                    Set *Var5 .protoLargeDamageHitSpit
                Case == .protoSizeMax
                    Set *Var5 .protoMaxDamageHitSpit
            EndSwitch
            Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 *Var5 00000020 )
    EndSwitch

    Return
    End
}

#new:Script $Script_TakeTurn_Protobatter {
    Call UseIdleAnimation  ( .Actor:Self .False )
    Call EnableIdleScript  ( .Actor:Self .False )

    %ExecWait $ProtobatterSwing
    ExecWait $ProtobatterHitSpit

    Call EnableIdleScript  ( .Actor:Self .True )
    Call UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}